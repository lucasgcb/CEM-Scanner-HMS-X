
comandante.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072bc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074ac  080074ac  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  080074ac  080074ac  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074ac  080074ac  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080074b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eec  20000180  08007634  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000206c  08007634  0002206c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba0b  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e5d  00000000  00000000  0003bbb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b0  00000000  00000000  0003fa18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e8  00000000  00000000  00040ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c6a  00000000  00000000  000421b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000120d0  00000000  00000000  0005ae1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c6c5  00000000  00000000  0006ceea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e95af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a8  00000000  00000000  000e962c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	080073b4 	.word	0x080073b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	080073b4 	.word	0x080073b4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000168:	4b08      	ldr	r3, [pc, #32]	; (800018c <HAL_Init+0x28>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a07      	ldr	r2, [pc, #28]	; (800018c <HAL_Init+0x28>)
 800016e:	f043 0310 	orr.w	r3, r3, #16
 8000172:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000174:	2003      	movs	r0, #3
 8000176:	f000 f8d1 	bl	800031c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800017a:	2000      	movs	r0, #0
 800017c:	f006 fb64 	bl	8006848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000180:	f006 fb2a 	bl	80067d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000184:	2300      	movs	r3, #0
}
 8000186:	4618      	mov	r0, r3
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40022000 	.word	0x40022000

08000190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000194:	4b05      	ldr	r3, [pc, #20]	; (80001ac <HAL_IncTick+0x1c>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	461a      	mov	r2, r3
 800019a:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <HAL_IncTick+0x20>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4413      	add	r3, r2
 80001a0:	4a03      	ldr	r2, [pc, #12]	; (80001b0 <HAL_IncTick+0x20>)
 80001a2:	6013      	str	r3, [r2, #0]
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000004 	.word	0x20000004
 80001b0:	20001110 	.word	0x20001110

080001b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
  return uwTick;
 80001b8:	4b02      	ldr	r3, [pc, #8]	; (80001c4 <HAL_GetTick+0x10>)
 80001ba:	681b      	ldr	r3, [r3, #0]
}
 80001bc:	4618      	mov	r0, r3
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	20001110 	.word	0x20001110

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <__NVIC_GetPriorityGrouping+0x18>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	0a1b      	lsrs	r3, r3, #8
 800021a:	f003 0307 	and.w	r3, r3, #7
}
 800021e:	4618      	mov	r0, r3
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	2b00      	cmp	r3, #0
 800023c:	db0b      	blt.n	8000256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f003 021f 	and.w	r2, r3, #31
 8000244:	4906      	ldr	r1, [pc, #24]	; (8000260 <__NVIC_EnableIRQ+0x34>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	095b      	lsrs	r3, r3, #5
 800024c:	2001      	movs	r0, #1
 800024e:	fa00 f202 	lsl.w	r2, r0, r2
 8000252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	e000e100 	.word	0xe000e100

08000264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	6039      	str	r1, [r7, #0]
 800026e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000274:	2b00      	cmp	r3, #0
 8000276:	db0a      	blt.n	800028e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	b2da      	uxtb	r2, r3
 800027c:	490c      	ldr	r1, [pc, #48]	; (80002b0 <__NVIC_SetPriority+0x4c>)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	0112      	lsls	r2, r2, #4
 8000284:	b2d2      	uxtb	r2, r2
 8000286:	440b      	add	r3, r1
 8000288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800028c:	e00a      	b.n	80002a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	b2da      	uxtb	r2, r3
 8000292:	4908      	ldr	r1, [pc, #32]	; (80002b4 <__NVIC_SetPriority+0x50>)
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	f003 030f 	and.w	r3, r3, #15
 800029a:	3b04      	subs	r3, #4
 800029c:	0112      	lsls	r2, r2, #4
 800029e:	b2d2      	uxtb	r2, r2
 80002a0:	440b      	add	r3, r1
 80002a2:	761a      	strb	r2, [r3, #24]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e100 	.word	0xe000e100
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b089      	sub	sp, #36	; 0x24
 80002bc:	af00      	add	r7, sp, #0
 80002be:	60f8      	str	r0, [r7, #12]
 80002c0:	60b9      	str	r1, [r7, #8]
 80002c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	f003 0307 	and.w	r3, r3, #7
 80002ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	f1c3 0307 	rsb	r3, r3, #7
 80002d2:	2b04      	cmp	r3, #4
 80002d4:	bf28      	it	cs
 80002d6:	2304      	movcs	r3, #4
 80002d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002da:	69fb      	ldr	r3, [r7, #28]
 80002dc:	3304      	adds	r3, #4
 80002de:	2b06      	cmp	r3, #6
 80002e0:	d902      	bls.n	80002e8 <NVIC_EncodePriority+0x30>
 80002e2:	69fb      	ldr	r3, [r7, #28]
 80002e4:	3b03      	subs	r3, #3
 80002e6:	e000      	b.n	80002ea <NVIC_EncodePriority+0x32>
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ec:	f04f 32ff 	mov.w	r2, #4294967295
 80002f0:	69bb      	ldr	r3, [r7, #24]
 80002f2:	fa02 f303 	lsl.w	r3, r2, r3
 80002f6:	43da      	mvns	r2, r3
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	401a      	ands	r2, r3
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000300:	f04f 31ff 	mov.w	r1, #4294967295
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	fa01 f303 	lsl.w	r3, r1, r3
 800030a:	43d9      	mvns	r1, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000310:	4313      	orrs	r3, r2
         );
}
 8000312:	4618      	mov	r0, r3
 8000314:	3724      	adds	r7, #36	; 0x24
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f7ff ff4f 	bl	80001c8 <__NVIC_SetPriorityGrouping>
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000332:	b580      	push	{r7, lr}
 8000334:	b086      	sub	sp, #24
 8000336:	af00      	add	r7, sp, #0
 8000338:	4603      	mov	r3, r0
 800033a:	60b9      	str	r1, [r7, #8]
 800033c:	607a      	str	r2, [r7, #4]
 800033e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000344:	f7ff ff64 	bl	8000210 <__NVIC_GetPriorityGrouping>
 8000348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	68b9      	ldr	r1, [r7, #8]
 800034e:	6978      	ldr	r0, [r7, #20]
 8000350:	f7ff ffb2 	bl	80002b8 <NVIC_EncodePriority>
 8000354:	4602      	mov	r2, r0
 8000356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800035a:	4611      	mov	r1, r2
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff81 	bl	8000264 <__NVIC_SetPriority>
}
 8000362:	bf00      	nop
 8000364:	3718      	adds	r7, #24
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	b082      	sub	sp, #8
 800036e:	af00      	add	r7, sp, #0
 8000370:	4603      	mov	r3, r0
 8000372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ff57 	bl	800022c <__NVIC_EnableIRQ>
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000388:	b08b      	sub	sp, #44	; 0x2c
 800038a:	af06      	add	r7, sp, #24
 800038c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d101      	bne.n	8000398 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000394:	2301      	movs	r3, #1
 8000396:	e0d3      	b.n	8000540 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d106      	bne.n	80003b2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	2200      	movs	r2, #0
 80003a8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f006 fbf7 	bl	8006ba0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2203      	movs	r2, #3
 80003b6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 fdcf 	bl	8001f62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	687e      	ldr	r6, [r7, #4]
 80003cc:	466d      	mov	r5, sp
 80003ce:	f106 0410 	add.w	r4, r6, #16
 80003d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003d6:	6823      	ldr	r3, [r4, #0]
 80003d8:	602b      	str	r3, [r5, #0]
 80003da:	1d33      	adds	r3, r6, #4
 80003dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80003de:	6838      	ldr	r0, [r7, #0]
 80003e0:	f001 fd98 	bl	8001f14 <USB_CoreInit>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d005      	beq.n	80003f6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2202      	movs	r2, #2
 80003ee:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80003f2:	2301      	movs	r3, #1
 80003f4:	e0a4      	b.n	8000540 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f001 fdcc 	bl	8001f9a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000402:	2300      	movs	r3, #0
 8000404:	73fb      	strb	r3, [r7, #15]
 8000406:	e035      	b.n	8000474 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	015b      	lsls	r3, r3, #5
 800040e:	4413      	add	r3, r2
 8000410:	3329      	adds	r3, #41	; 0x29
 8000412:	2201      	movs	r2, #1
 8000414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000416:	7bfb      	ldrb	r3, [r7, #15]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	015b      	lsls	r3, r3, #5
 800041c:	4413      	add	r3, r2
 800041e:	3328      	adds	r3, #40	; 0x28
 8000420:	7bfa      	ldrb	r2, [r7, #15]
 8000422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	7bfa      	ldrb	r2, [r7, #15]
 8000428:	b291      	uxth	r1, r2
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	015b      	lsls	r3, r3, #5
 800042e:	4413      	add	r3, r2
 8000430:	3336      	adds	r3, #54	; 0x36
 8000432:	460a      	mov	r2, r1
 8000434:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	015b      	lsls	r3, r3, #5
 800043c:	4413      	add	r3, r2
 800043e:	332b      	adds	r3, #43	; 0x2b
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	015b      	lsls	r3, r3, #5
 800044a:	4413      	add	r3, r2
 800044c:	3338      	adds	r3, #56	; 0x38
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000452:	7bfb      	ldrb	r3, [r7, #15]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	015b      	lsls	r3, r3, #5
 8000458:	4413      	add	r3, r2
 800045a:	333c      	adds	r3, #60	; 0x3c
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	3302      	adds	r3, #2
 8000466:	015b      	lsls	r3, r3, #5
 8000468:	4413      	add	r3, r2
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	3301      	adds	r3, #1
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	7bfa      	ldrb	r2, [r7, #15]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	429a      	cmp	r2, r3
 800047c:	d3c4      	bcc.n	8000408 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800047e:	2300      	movs	r3, #0
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	e031      	b.n	80004e8 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	015b      	lsls	r3, r3, #5
 800048a:	4413      	add	r3, r2
 800048c:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000490:	2200      	movs	r2, #0
 8000492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	015b      	lsls	r3, r3, #5
 800049a:	4413      	add	r3, r2
 800049c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80004a0:	7bfa      	ldrb	r2, [r7, #15]
 80004a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	015b      	lsls	r3, r3, #5
 80004aa:	4413      	add	r3, r2
 80004ac:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80004b0:	2200      	movs	r2, #0
 80004b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	015b      	lsls	r3, r3, #5
 80004ba:	4413      	add	r3, r2
 80004bc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	015b      	lsls	r3, r3, #5
 80004ca:	4413      	add	r3, r2
 80004cc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	330a      	adds	r3, #10
 80004da:	015b      	lsls	r3, r3, #5
 80004dc:	4413      	add	r3, r2
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	3301      	adds	r3, #1
 80004e6:	73fb      	strb	r3, [r7, #15]
 80004e8:	7bfa      	ldrb	r2, [r7, #15]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d3c8      	bcc.n	8000484 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	687e      	ldr	r6, [r7, #4]
 80004fa:	466d      	mov	r5, sp
 80004fc:	f106 0410 	add.w	r4, r6, #16
 8000500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000504:	6823      	ldr	r3, [r4, #0]
 8000506:	602b      	str	r3, [r5, #0]
 8000508:	1d33      	adds	r3, r6, #4
 800050a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800050c:	6838      	ldr	r0, [r7, #0]
 800050e:	f001 fd50 	bl	8001fb2 <USB_DevInit>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d005      	beq.n	8000524 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2202      	movs	r2, #2
 800051c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000520:	2301      	movs	r3, #1
 8000522:	e00d      	b.n	8000540 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2201      	movs	r2, #1
 8000530:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f002 fd8e 	bl	800305a <USB_DevDisconnect>

  return HAL_OK;
 800053e:	2300      	movs	r3, #0
}
 8000540:	4618      	mov	r0, r3
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000548 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000556:	2b01      	cmp	r3, #1
 8000558:	d101      	bne.n	800055e <HAL_PCD_Start+0x16>
 800055a:	2302      	movs	r3, #2
 800055c:	e016      	b.n	800058c <HAL_PCD_Start+0x44>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2201      	movs	r2, #1
 8000562:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000566:	2101      	movs	r1, #1
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f006 fd80 	bl	800706e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f002 fd67 	bl	8003046 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f001 fcd9 	bl	8001f34 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fd64 	bl	800306e <USB_ReadInterrupts>
 80005a6:	4603      	mov	r3, r0
 80005a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005b0:	d102      	bne.n	80005b8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 faf2 	bl	8000b9c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fd56 	bl	800306e <USB_ReadInterrupts>
 80005c2:	4603      	mov	r3, r0
 80005c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005cc:	d112      	bne.n	80005f4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80005e0:	b292      	uxth	r2, r2
 80005e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f006 fb4f 	bl	8006c8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80005ec:	2100      	movs	r1, #0
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f8de 	bl	80007b0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fd38 	bl	800306e <USB_ReadInterrupts>
 80005fe:	4603      	mov	r3, r0
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000608:	d10b      	bne.n	8000622 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000612:	b29a      	uxth	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800061c:	b292      	uxth	r2, r2
 800061e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fd21 	bl	800306e <USB_ReadInterrupts>
 800062c:	4603      	mov	r3, r0
 800062e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000636:	d10b      	bne.n	8000650 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000640:	b29a      	uxth	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800064a:	b292      	uxth	r2, r2
 800064c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fd0a 	bl	800306e <USB_ReadInterrupts>
 800065a:	4603      	mov	r3, r0
 800065c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000664:	d126      	bne.n	80006b4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800066e:	b29a      	uxth	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f022 0204 	bic.w	r2, r2, #4
 8000678:	b292      	uxth	r2, r2
 800067a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000686:	b29a      	uxth	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f022 0208 	bic.w	r2, r2, #8
 8000690:	b292      	uxth	r2, r2
 8000692:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f006 fb30 	bl	8006cfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80006ae:	b292      	uxth	r2, r2
 80006b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 fcd8 	bl	800306e <USB_ReadInterrupts>
 80006be:	4603      	mov	r3, r0
 80006c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006c8:	d13d      	bne.n	8000746 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f042 0208 	orr.w	r2, r2, #8
 80006dc:	b292      	uxth	r2, r2
 80006de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006f4:	b292      	uxth	r2, r2
 80006f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000702:	b29a      	uxth	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f042 0204 	orr.w	r2, r2, #4
 800070c:	b292      	uxth	r2, r2
 800070e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fca9 	bl	800306e <USB_ReadInterrupts>
 800071c:	4603      	mov	r3, r0
 800071e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000726:	d10b      	bne.n	8000740 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000730:	b29a      	uxth	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800073a:	b292      	uxth	r2, r2
 800073c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f006 fac1 	bl	8006cc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fc8f 	bl	800306e <USB_ReadInterrupts>
 8000750:	4603      	mov	r3, r0
 8000752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800075a:	d10e      	bne.n	800077a <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000764:	b29a      	uxth	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800076e:	b292      	uxth	r2, r2
 8000770:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f006 fa7a 	bl	8006c6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fc75 	bl	800306e <USB_ReadInterrupts>
 8000784:	4603      	mov	r3, r0
 8000786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800078a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800078e:	d10b      	bne.n	80007a8 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80007a2:	b292      	uxth	r2, r2
 80007a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d101      	bne.n	80007ca <HAL_PCD_SetAddress+0x1a>
 80007c6:	2302      	movs	r3, #2
 80007c8:	e013      	b.n	80007f2 <HAL_PCD_SetAddress+0x42>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2201      	movs	r2, #1
 80007ce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	78fa      	ldrb	r2, [r7, #3]
 80007d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	78fa      	ldrb	r2, [r7, #3]
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fc1c 	bl	8003020 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b084      	sub	sp, #16
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	4608      	mov	r0, r1
 8000804:	4611      	mov	r1, r2
 8000806:	461a      	mov	r2, r3
 8000808:	4603      	mov	r3, r0
 800080a:	70fb      	strb	r3, [r7, #3]
 800080c:	460b      	mov	r3, r1
 800080e:	803b      	strh	r3, [r7, #0]
 8000810:	4613      	mov	r3, r2
 8000812:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000814:	2300      	movs	r3, #0
 8000816:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800081c:	2b00      	cmp	r3, #0
 800081e:	da0b      	bge.n	8000838 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	015b      	lsls	r3, r3, #5
 8000828:	3328      	adds	r3, #40	; 0x28
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2201      	movs	r2, #1
 8000834:	705a      	strb	r2, [r3, #1]
 8000836:	e00b      	b.n	8000850 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	015b      	lsls	r3, r3, #5
 8000840:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	4413      	add	r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2200      	movs	r2, #0
 800084e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	b2da      	uxtb	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800085c:	883a      	ldrh	r2, [r7, #0]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	78ba      	ldrb	r2, [r7, #2]
 8000866:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	785b      	ldrb	r3, [r3, #1]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d004      	beq.n	800087a <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b29a      	uxth	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800087a:	78bb      	ldrb	r3, [r7, #2]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d102      	bne.n	8000886 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2200      	movs	r2, #0
 8000884:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800088c:	2b01      	cmp	r3, #1
 800088e:	d101      	bne.n	8000894 <HAL_PCD_EP_Open+0x9a>
 8000890:	2302      	movs	r3, #2
 8000892:	e00e      	b.n	80008b2 <HAL_PCD_EP_Open+0xb8>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2201      	movs	r2, #1
 8000898:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	68f9      	ldr	r1, [r7, #12]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fbaa 	bl	8001ffc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80008b0:	7afb      	ldrb	r3, [r7, #11]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b084      	sub	sp, #16
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
 80008c2:	460b      	mov	r3, r1
 80008c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80008c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	da0b      	bge.n	80008e6 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	f003 0307 	and.w	r3, r3, #7
 80008d4:	015b      	lsls	r3, r3, #5
 80008d6:	3328      	adds	r3, #40	; 0x28
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2201      	movs	r2, #1
 80008e2:	705a      	strb	r2, [r3, #1]
 80008e4:	e00b      	b.n	80008fe <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80008e6:	78fb      	ldrb	r3, [r7, #3]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	015b      	lsls	r3, r3, #5
 80008ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2200      	movs	r2, #0
 80008fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	f003 0307 	and.w	r3, r3, #7
 8000904:	b2da      	uxtb	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000910:	2b01      	cmp	r3, #1
 8000912:	d101      	bne.n	8000918 <HAL_PCD_EP_Close+0x5e>
 8000914:	2302      	movs	r3, #2
 8000916:	e00e      	b.n	8000936 <HAL_PCD_EP_Close+0x7c>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2201      	movs	r2, #1
 800091c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68f9      	ldr	r1, [r7, #12]
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fe56 	bl	80025d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af00      	add	r7, sp, #0
 8000944:	60f8      	str	r0, [r7, #12]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	460b      	mov	r3, r1
 800094c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800094e:	7afb      	ldrb	r3, [r7, #11]
 8000950:	f003 0307 	and.w	r3, r3, #7
 8000954:	015b      	lsls	r3, r3, #5
 8000956:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	4413      	add	r3, r2
 800095e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	2200      	movs	r2, #0
 8000976:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000978:	7afb      	ldrb	r3, [r7, #11]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	b2da      	uxtb	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000984:	7afb      	ldrb	r3, [r7, #11]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	2b00      	cmp	r3, #0
 800098c:	d106      	bne.n	800099c <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6979      	ldr	r1, [r7, #20]
 8000994:	4618      	mov	r0, r3
 8000996:	f001 ffb5 	bl	8002904 <USB_EPStartXfer>
 800099a:	e005      	b.n	80009a8 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6979      	ldr	r1, [r7, #20]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 ffae 	bl	8002904 <USB_EPStartXfer>
  }

  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	460b      	mov	r3, r1
 80009bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80009be:	78fb      	ldrb	r3, [r7, #3]
 80009c0:	f003 0307 	and.w	r3, r3, #7
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	330a      	adds	r3, #10
 80009c8:	015b      	lsls	r3, r3, #5
 80009ca:	4413      	add	r3, r2
 80009cc:	3304      	adds	r3, #4
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	460b      	mov	r3, r1
 80009e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80009ea:	7afb      	ldrb	r3, [r7, #11]
 80009ec:	f003 0307 	and.w	r3, r3, #7
 80009f0:	015b      	lsls	r3, r3, #5
 80009f2:	3328      	adds	r3, #40	; 0x28
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	683a      	ldr	r2, [r7, #0]
 8000a04:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000a12:	7afb      	ldrb	r3, [r7, #11]
 8000a14:	f003 0307 	and.w	r3, r3, #7
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000a1e:	7afb      	ldrb	r3, [r7, #11]
 8000a20:	f003 0307 	and.w	r3, r3, #7
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d106      	bne.n	8000a36 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6979      	ldr	r1, [r7, #20]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 ff68 	bl	8002904 <USB_EPStartXfer>
 8000a34:	e005      	b.n	8000a42 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6979      	ldr	r1, [r7, #20]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 ff61 	bl	8002904 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000a58:	78fb      	ldrb	r3, [r7, #3]
 8000a5a:	f003 0207 	and.w	r2, r3, #7
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d901      	bls.n	8000a6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e046      	b.n	8000af8 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	da0b      	bge.n	8000a8a <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	f003 0307 	and.w	r3, r3, #7
 8000a78:	015b      	lsls	r3, r3, #5
 8000a7a:	3328      	adds	r3, #40	; 0x28
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2201      	movs	r2, #1
 8000a86:	705a      	strb	r2, [r3, #1]
 8000a88:	e009      	b.n	8000a9e <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	015b      	lsls	r3, r3, #5
 8000a8e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d101      	bne.n	8000abe <HAL_PCD_EP_SetStall+0x72>
 8000aba:	2302      	movs	r3, #2
 8000abc:	e01c      	b.n	8000af8 <HAL_PCD_EP_SetStall+0xac>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	68f9      	ldr	r1, [r7, #12]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 f9d1 	bl	8002e74 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	f003 0307 	and.w	r3, r3, #7
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d108      	bne.n	8000aee <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4610      	mov	r0, r2
 8000aea:	f002 facf 	bl	800308c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	f003 020f 	and.w	r2, r3, #15
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d901      	bls.n	8000b1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e03a      	b.n	8000b94 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da0b      	bge.n	8000b3e <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b26:	78fb      	ldrb	r3, [r7, #3]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	015b      	lsls	r3, r3, #5
 8000b2e:	3328      	adds	r3, #40	; 0x28
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	705a      	strb	r2, [r3, #1]
 8000b3c:	e00b      	b.n	8000b56 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000b3e:	78fb      	ldrb	r3, [r7, #3]
 8000b40:	f003 0307 	and.w	r3, r3, #7
 8000b44:	015b      	lsls	r3, r3, #5
 8000b46:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2200      	movs	r2, #0
 8000b54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d101      	bne.n	8000b76 <HAL_PCD_EP_ClrStall+0x76>
 8000b72:	2302      	movs	r3, #2
 8000b74:	e00e      	b.n	8000b94 <HAL_PCD_EP_ClrStall+0x94>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68f9      	ldr	r1, [r7, #12]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 f9b7 	bl	8002ef8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000ba4:	e282      	b.n	80010ac <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bae:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000bb0:	8afb      	ldrh	r3, [r7, #22]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	f003 030f 	and.w	r3, r3, #15
 8000bb8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8000bba:	7d7b      	ldrb	r3, [r7, #21]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f040 8142 	bne.w	8000e46 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000bc2:	8afb      	ldrh	r3, [r7, #22]
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d151      	bne.n	8000c70 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bdc:	b29c      	uxth	r4, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8000be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3328      	adds	r3, #40	; 0x28
 8000bf2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	4413      	add	r3, r2
 8000c08:	3302      	adds	r3, #2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	6812      	ldr	r2, [r2, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	695a      	ldr	r2, [r3, #20]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	441a      	add	r2, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f006 f805 	bl	8006c40 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 8234 	beq.w	80010ac <PCD_EP_ISR_Handler+0x510>
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f040 822f 	bne.w	80010ac <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	b292      	uxth	r2, r2
 8000c62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000c6e:	e21d      	b.n	80010ac <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c76:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000c80:	8a7b      	ldrh	r3, [r7, #18]
 8000c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d033      	beq.n	8000cf2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	3306      	adds	r3, #6
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6818      	ldr	r0, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	f002 fa2e 	bl	800312a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000cda:	4013      	ands	r3, r2
 8000cdc:	b29c      	uxth	r4, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f005 ff7e 	bl	8006bec <HAL_PCD_SetupStageCallback>
 8000cf0:	e1dc      	b.n	80010ac <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000cf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f280 81d8 	bge.w	80010ac <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000d08:	4013      	ands	r3, r2
 8000d0a:	b29c      	uxth	r4, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8000d14:	b292      	uxth	r2, r2
 8000d16:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3306      	adds	r3, #6
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	6812      	ldr	r2, [r2, #0]
 8000d34:	4413      	add	r3, r2
 8000d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	69db      	ldr	r3, [r3, #28]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d019      	beq.n	8000d80 <PCD_EP_ISR_Handler+0x1e4>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d015      	beq.n	8000d80 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6818      	ldr	r0, [r3, #0]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6959      	ldr	r1, [r3, #20]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	f002 f9e0 	bl	800312a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	695a      	ldr	r2, [r3, #20]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	441a      	add	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f005 ff48 	bl	8006c10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	461c      	mov	r4, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	441c      	add	r4, r3
 8000d92:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8000d96:	461c      	mov	r4, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d10e      	bne.n	8000dbe <PCD_EP_ISR_Handler+0x222>
 8000da0:	8823      	ldrh	r3, [r4, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	8023      	strh	r3, [r4, #0]
 8000dac:	8823      	ldrh	r3, [r4, #0]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	8023      	strh	r3, [r4, #0]
 8000dbc:	e02d      	b.n	8000e1a <PCD_EP_ISR_Handler+0x27e>
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	2b3e      	cmp	r3, #62	; 0x3e
 8000dc4:	d812      	bhi.n	8000dec <PCD_EP_ISR_Handler+0x250>
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	085b      	lsrs	r3, r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <PCD_EP_ISR_Handler+0x244>
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	029b      	lsls	r3, r3, #10
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	8023      	strh	r3, [r4, #0]
 8000dea:	e016      	b.n	8000e1a <PCD_EP_ISR_Handler+0x27e>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	095b      	lsrs	r3, r3, #5
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	f003 031f 	and.w	r3, r3, #31
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <PCD_EP_ISR_Handler+0x26a>
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e2a:	b29c      	uxth	r4, r3
 8000e2c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8000e30:	b29c      	uxth	r4, r3
 8000e32:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8000e36:	b29c      	uxth	r4, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4ba2      	ldr	r3, [pc, #648]	; (80010c8 <PCD_EP_ISR_Handler+0x52c>)
 8000e3e:	4323      	orrs	r3, r4
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	8013      	strh	r3, [r2, #0]
 8000e44:	e132      	b.n	80010ac <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	7d7b      	ldrb	r3, [r7, #21]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000e56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f280 80d1 	bge.w	8001002 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	7d7b      	ldrb	r3, [r7, #21]
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000e74:	4013      	ands	r3, r2
 8000e76:	b29c      	uxth	r4, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	7d7b      	ldrb	r3, [r7, #21]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8000e88:	b292      	uxth	r2, r2
 8000e8a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8000e8c:	7d7b      	ldrb	r3, [r7, #21]
 8000e8e:	015b      	lsls	r3, r3, #5
 8000e90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	7b1b      	ldrb	r3, [r3, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d121      	bne.n	8000ee6 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	4413      	add	r3, r2
 8000eb6:	3306      	adds	r3, #6
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eca:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8000ecc:	8bfb      	ldrh	r3, [r7, #30]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d072      	beq.n	8000fb8 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6959      	ldr	r1, [r3, #20]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	88da      	ldrh	r2, [r3, #6]
 8000ede:	8bfb      	ldrh	r3, [r7, #30]
 8000ee0:	f002 f923 	bl	800312a <USB_ReadPMA>
 8000ee4:	e068      	b.n	8000fb8 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d021      	beq.n	8000f44 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4413      	add	r3, r2
 8000f14:	3302      	adds	r3, #2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f28:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8000f2a:	8bfb      	ldrh	r3, [r7, #30]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d02a      	beq.n	8000f86 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6959      	ldr	r1, [r3, #20]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	891a      	ldrh	r2, [r3, #8]
 8000f3c:	8bfb      	ldrh	r3, [r7, #30]
 8000f3e:	f002 f8f4 	bl	800312a <USB_ReadPMA>
 8000f42:	e020      	b.n	8000f86 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4413      	add	r3, r2
 8000f58:	3306      	adds	r3, #6
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	6812      	ldr	r2, [r2, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f6c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8000f6e:	8bfb      	ldrh	r3, [r7, #30]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d008      	beq.n	8000f86 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6959      	ldr	r1, [r3, #20]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	895a      	ldrh	r2, [r3, #10]
 8000f80:	8bfb      	ldrh	r3, [r7, #30]
 8000f82:	f002 f8d2 	bl	800312a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fa0:	b29c      	uxth	r4, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	441a      	add	r2, r3
 8000fb0:	4b46      	ldr	r3, [pc, #280]	; (80010cc <PCD_EP_ISR_Handler+0x530>)
 8000fb2:	4323      	orrs	r3, r4
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	69da      	ldr	r2, [r3, #28]
 8000fbc:	8bfb      	ldrh	r3, [r7, #30]
 8000fbe:	441a      	add	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	695a      	ldr	r2, [r3, #20]
 8000fc8:	8bfb      	ldrh	r3, [r7, #30]
 8000fca:	441a      	add	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d004      	beq.n	8000fe2 <PCD_EP_ISR_Handler+0x446>
 8000fd8:	8bfa      	ldrh	r2, [r7, #30]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d206      	bcs.n	8000ff0 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f005 fe11 	bl	8006c10 <HAL_PCD_DataOutStageCallback>
 8000fee:	e008      	b.n	8001002 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	7819      	ldrb	r1, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	695a      	ldr	r2, [r3, #20]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff fc9e 	bl	800093e <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001002:	8a7b      	ldrh	r3, [r7, #18]
 8001004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001008:	2b00      	cmp	r3, #0
 800100a:	d04f      	beq.n	80010ac <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 800100c:	7d7b      	ldrb	r3, [r7, #21]
 800100e:	015b      	lsls	r3, r3, #5
 8001010:	3328      	adds	r3, #40	; 0x28
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	7d7b      	ldrb	r3, [r7, #21]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	b29b      	uxth	r3, r3
 8001028:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800102c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001030:	b29c      	uxth	r4, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	7d7b      	ldrb	r3, [r7, #21]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	441a      	add	r2, r3
 800103e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001046:	b29b      	uxth	r3, r3
 8001048:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001052:	b29b      	uxth	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4413      	add	r3, r2
 800105e:	3302      	adds	r3, #2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6812      	ldr	r2, [r2, #0]
 8001066:	4413      	add	r3, r2
 8001068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	441a      	add	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d106      	bne.n	800109a <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f005 fdd4 	bl	8006c40 <HAL_PCD_DataInStageCallback>
 8001098:	e008      	b.n	80010ac <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	7819      	ldrb	r1, [r3, #0]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fc97 	bl	80009da <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f6ff ad74 	blt.w	8000ba6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3724      	adds	r7, #36	; 0x24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd90      	pop	{r4, r7, pc}
 80010c8:	ffff8080 	.word	0xffff8080
 80010cc:	ffff80c0 	.word	0xffff80c0

080010d0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	817b      	strh	r3, [r7, #10]
 80010de:	4613      	mov	r3, r2
 80010e0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80010e2:	897b      	ldrh	r3, [r7, #10]
 80010e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010ee:	897b      	ldrh	r3, [r7, #10]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	015b      	lsls	r3, r3, #5
 80010f6:	3328      	adds	r3, #40	; 0x28
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	e006      	b.n	800110e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001100:	897b      	ldrh	r3, [r7, #10]
 8001102:	015b      	lsls	r3, r3, #5
 8001104:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800110e:	893b      	ldrh	r3, [r7, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d107      	bne.n	8001124 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2200      	movs	r2, #0
 8001118:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	b29a      	uxth	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	80da      	strh	r2, [r3, #6]
 8001122:	e00b      	b.n	800113c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2201      	movs	r2, #1
 8001128:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	b29a      	uxth	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	0c1b      	lsrs	r3, r3, #16
 8001136:	b29a      	uxth	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e26c      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8087 	beq.w	8001276 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001168:	4b92      	ldr	r3, [pc, #584]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 030c 	and.w	r3, r3, #12
 8001170:	2b04      	cmp	r3, #4
 8001172:	d00c      	beq.n	800118e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001174:	4b8f      	ldr	r3, [pc, #572]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	2b08      	cmp	r3, #8
 800117e:	d112      	bne.n	80011a6 <HAL_RCC_OscConfig+0x5e>
 8001180:	4b8c      	ldr	r3, [pc, #560]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118c:	d10b      	bne.n	80011a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118e:	4b89      	ldr	r3, [pc, #548]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d06c      	beq.n	8001274 <HAL_RCC_OscConfig+0x12c>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d168      	bne.n	8001274 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e246      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ae:	d106      	bne.n	80011be <HAL_RCC_OscConfig+0x76>
 80011b0:	4b80      	ldr	r3, [pc, #512]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a7f      	ldr	r2, [pc, #508]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	e02e      	b.n	800121c <HAL_RCC_OscConfig+0xd4>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x98>
 80011c6:	4b7b      	ldr	r3, [pc, #492]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a7a      	ldr	r2, [pc, #488]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b78      	ldr	r3, [pc, #480]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a77      	ldr	r2, [pc, #476]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e01d      	b.n	800121c <HAL_RCC_OscConfig+0xd4>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e8:	d10c      	bne.n	8001204 <HAL_RCC_OscConfig+0xbc>
 80011ea:	4b72      	ldr	r3, [pc, #456]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a71      	ldr	r2, [pc, #452]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4b6f      	ldr	r3, [pc, #444]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a6e      	ldr	r2, [pc, #440]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e00b      	b.n	800121c <HAL_RCC_OscConfig+0xd4>
 8001204:	4b6b      	ldr	r3, [pc, #428]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a6a      	ldr	r2, [pc, #424]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 800120a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b68      	ldr	r3, [pc, #416]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a67      	ldr	r2, [pc, #412]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 8001216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d013      	beq.n	800124c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7fe ffc6 	bl	80001b4 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800122c:	f7fe ffc2 	bl	80001b4 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	; 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e1fa      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0xe4>
 800124a:	e014      	b.n	8001276 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7fe ffb2 	bl	80001b4 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7fe ffae 	bl	80001b4 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e1e6      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x10c>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d063      	beq.n	800134a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001282:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00b      	beq.n	80012a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800128e:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b08      	cmp	r3, #8
 8001298:	d11c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x18c>
 800129a:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d116      	bne.n	80012d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	4b43      	ldr	r3, [pc, #268]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <HAL_RCC_OscConfig+0x176>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d001      	beq.n	80012be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e1ba      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012be:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4939      	ldr	r1, [pc, #228]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	e03a      	b.n	800134a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d020      	beq.n	800131e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012dc:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <HAL_RCC_OscConfig+0x270>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7fe ff67 	bl	80001b4 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ea:	f7fe ff63 	bl	80001b4 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e19b      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fc:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	4927      	ldr	r1, [pc, #156]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 8001318:	4313      	orrs	r3, r2
 800131a:	600b      	str	r3, [r1, #0]
 800131c:	e015      	b.n	800134a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <HAL_RCC_OscConfig+0x270>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7fe ff46 	bl	80001b4 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132c:	f7fe ff42 	bl	80001b4 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e17a      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d03a      	beq.n	80013cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d019      	beq.n	8001392 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <HAL_RCC_OscConfig+0x274>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001364:	f7fe ff26 	bl	80001b4 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136c:	f7fe ff22 	bl	80001b4 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e15a      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_RCC_OscConfig+0x26c>)
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800138a:	2001      	movs	r0, #1
 800138c:	f000 faf6 	bl	800197c <RCC_Delay>
 8001390:	e01c      	b.n	80013cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_RCC_OscConfig+0x274>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001398:	f7fe ff0c 	bl	80001b4 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139e:	e00f      	b.n	80013c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a0:	f7fe ff08 	bl	80001b4 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d908      	bls.n	80013c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e140      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	42420000 	.word	0x42420000
 80013bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	4b9e      	ldr	r3, [pc, #632]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1e9      	bne.n	80013a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80a6 	beq.w	8001526 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013de:	4b97      	ldr	r3, [pc, #604]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10d      	bne.n	8001406 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	4b94      	ldr	r3, [pc, #592]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a93      	ldr	r2, [pc, #588]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b91      	ldr	r3, [pc, #580]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001402:	2301      	movs	r3, #1
 8001404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001406:	4b8e      	ldr	r3, [pc, #568]	; (8001640 <HAL_RCC_OscConfig+0x4f8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140e:	2b00      	cmp	r3, #0
 8001410:	d118      	bne.n	8001444 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001412:	4b8b      	ldr	r3, [pc, #556]	; (8001640 <HAL_RCC_OscConfig+0x4f8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a8a      	ldr	r2, [pc, #552]	; (8001640 <HAL_RCC_OscConfig+0x4f8>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141e:	f7fe fec9 	bl	80001b4 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001426:	f7fe fec5 	bl	80001b4 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b64      	cmp	r3, #100	; 0x64
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0fd      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	4b81      	ldr	r3, [pc, #516]	; (8001640 <HAL_RCC_OscConfig+0x4f8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x312>
 800144c:	4b7b      	ldr	r3, [pc, #492]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	4a7a      	ldr	r2, [pc, #488]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6213      	str	r3, [r2, #32]
 8001458:	e02d      	b.n	80014b6 <HAL_RCC_OscConfig+0x36e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x334>
 8001462:	4b76      	ldr	r3, [pc, #472]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4a75      	ldr	r2, [pc, #468]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	6213      	str	r3, [r2, #32]
 800146e:	4b73      	ldr	r3, [pc, #460]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4a72      	ldr	r2, [pc, #456]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 8001474:	f023 0304 	bic.w	r3, r3, #4
 8001478:	6213      	str	r3, [r2, #32]
 800147a:	e01c      	b.n	80014b6 <HAL_RCC_OscConfig+0x36e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b05      	cmp	r3, #5
 8001482:	d10c      	bne.n	800149e <HAL_RCC_OscConfig+0x356>
 8001484:	4b6d      	ldr	r3, [pc, #436]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4a6c      	ldr	r2, [pc, #432]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	6213      	str	r3, [r2, #32]
 8001490:	4b6a      	ldr	r3, [pc, #424]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4a69      	ldr	r2, [pc, #420]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6213      	str	r3, [r2, #32]
 800149c:	e00b      	b.n	80014b6 <HAL_RCC_OscConfig+0x36e>
 800149e:	4b67      	ldr	r3, [pc, #412]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	4a66      	ldr	r2, [pc, #408]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	6213      	str	r3, [r2, #32]
 80014aa:	4b64      	ldr	r3, [pc, #400]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	4a63      	ldr	r2, [pc, #396]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	f023 0304 	bic.w	r3, r3, #4
 80014b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d015      	beq.n	80014ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7fe fe79 	bl	80001b4 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c6:	f7fe fe75 	bl	80001b4 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e0ab      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	4b57      	ldr	r3, [pc, #348]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0ee      	beq.n	80014c6 <HAL_RCC_OscConfig+0x37e>
 80014e8:	e014      	b.n	8001514 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7fe fe63 	bl	80001b4 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f0:	e00a      	b.n	8001508 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f7fe fe5f 	bl	80001b4 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001500:	4293      	cmp	r3, r2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e095      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001508:	4b4c      	ldr	r3, [pc, #304]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ee      	bne.n	80014f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d105      	bne.n	8001526 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151a:	4b48      	ldr	r3, [pc, #288]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	4a47      	ldr	r2, [pc, #284]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 8001520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001524:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 8081 	beq.w	8001632 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001530:	4b42      	ldr	r3, [pc, #264]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b08      	cmp	r3, #8
 800153a:	d061      	beq.n	8001600 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d146      	bne.n	80015d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001544:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <HAL_RCC_OscConfig+0x4fc>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7fe fe33 	bl	80001b4 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001552:	f7fe fe2f 	bl	80001b4 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e067      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001564:	4b35      	ldr	r3, [pc, #212]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f0      	bne.n	8001552 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001578:	d108      	bne.n	800158c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800157a:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	492d      	ldr	r1, [pc, #180]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800158c:	4b2b      	ldr	r3, [pc, #172]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a19      	ldr	r1, [r3, #32]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	430b      	orrs	r3, r1
 800159e:	4927      	ldr	r1, [pc, #156]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <HAL_RCC_OscConfig+0x4fc>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7fe fe03 	bl	80001b4 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b2:	f7fe fdff 	bl	80001b4 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e037      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x46a>
 80015d0:	e02f      	b.n	8001632 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <HAL_RCC_OscConfig+0x4fc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7fe fdec 	bl	80001b4 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e0:	f7fe fde8 	bl	80001b4 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e020      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x498>
 80015fe:	e018      	b.n	8001632 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e013      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_RCC_OscConfig+0x4f4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	429a      	cmp	r2, r3
 800161e:	d106      	bne.n	800162e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162a:	429a      	cmp	r2, r3
 800162c:	d001      	beq.n	8001632 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	40007000 	.word	0x40007000
 8001644:	42420060 	.word	0x42420060

08001648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0d0      	b.n	80017fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800165c:	4b6a      	ldr	r3, [pc, #424]	; (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d910      	bls.n	800168c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b67      	ldr	r3, [pc, #412]	; (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 0207 	bic.w	r2, r3, #7
 8001672:	4965      	ldr	r1, [pc, #404]	; (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b63      	ldr	r3, [pc, #396]	; (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0b8      	b.n	80017fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a58      	ldr	r2, [pc, #352]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016bc:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4a52      	ldr	r2, [pc, #328]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c8:	4b50      	ldr	r3, [pc, #320]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	494d      	ldr	r1, [pc, #308]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d040      	beq.n	8001768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d115      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e07f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e073      	b.n	80017fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001716:	4b3d      	ldr	r3, [pc, #244]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e06b      	b.n	80017fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001726:	4b39      	ldr	r3, [pc, #228]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f023 0203 	bic.w	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4936      	ldr	r1, [pc, #216]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001738:	f7fe fd3c 	bl	80001b4 <HAL_GetTick>
 800173c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	e00a      	b.n	8001756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001740:	f7fe fd38 	bl	80001b4 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	; 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e053      	b.n	80017fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 020c 	and.w	r2, r3, #12
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	429a      	cmp	r2, r3
 8001766:	d1eb      	bne.n	8001740 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001768:	4b27      	ldr	r3, [pc, #156]	; (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d210      	bcs.n	8001798 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 0207 	bic.w	r2, r3, #7
 800177e:	4922      	ldr	r1, [pc, #136]	; (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e032      	b.n	80017fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	4916      	ldr	r1, [pc, #88]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d009      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	490e      	ldr	r1, [pc, #56]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017d6:	f000 f821 	bl	800181c <HAL_RCC_GetSysClockFreq>
 80017da:	4601      	mov	r1, r0
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_RCC_ClockConfig+0x1c8>)
 80017e8:	5cd3      	ldrb	r3, [r2, r3]
 80017ea:	fa21 f303 	lsr.w	r3, r1, r3
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <HAL_RCC_ClockConfig+0x1cc>)
 80017f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_RCC_ClockConfig+0x1d0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f005 f826 	bl	8006848 <HAL_InitTick>

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40022000 	.word	0x40022000
 800180c:	40021000 	.word	0x40021000
 8001810:	08007494 	.word	0x08007494
 8001814:	2000011c 	.word	0x2000011c
 8001818:	20000000 	.word	0x20000000

0800181c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800181c:	b490      	push	{r4, r7}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001824:	1d3c      	adds	r4, r7, #4
 8001826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b04      	cmp	r3, #4
 8001854:	d002      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x40>
 8001856:	2b08      	cmp	r3, #8
 8001858:	d003      	beq.n	8001862 <HAL_RCC_GetSysClockFreq+0x46>
 800185a:	e02d      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800185e:	623b      	str	r3, [r7, #32]
      break;
 8001860:	e02d      	b.n	80018be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	0c9b      	lsrs	r3, r3, #18
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800186e:	4413      	add	r3, r2
 8001870:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001874:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	0c5b      	lsrs	r3, r3, #17
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800188e:	4413      	add	r3, r2
 8001890:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001894:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800189a:	fb02 f203 	mul.w	r2, r2, r3
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
 80018a6:	e004      	b.n	80018b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <HAL_RCC_GetSysClockFreq+0xc0>)
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	623b      	str	r3, [r7, #32]
      break;
 80018b6:	e002      	b.n	80018be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018ba:	623b      	str	r3, [r7, #32]
      break;
 80018bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018be:	6a3b      	ldr	r3, [r7, #32]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc90      	pop	{r4, r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	080073cc 	.word	0x080073cc
 80018d0:	080073dc 	.word	0x080073dc
 80018d4:	40021000 	.word	0x40021000
 80018d8:	007a1200 	.word	0x007a1200
 80018dc:	003d0900 	.word	0x003d0900

080018e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	2000011c 	.word	0x2000011c

080018f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018f8:	f7ff fff2 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 80018fc:	4601      	mov	r1, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4a03      	ldr	r2, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	080074a4 	.word	0x080074a4

0800191c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	220f      	movs	r2, #15
 800192a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_RCC_GetClockConfig+0x58>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0203 	and.w	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_RCC_GetClockConfig+0x58>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_GetClockConfig+0x58>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_RCC_GetClockConfig+0x58>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_RCC_GetClockConfig+0x5c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0207 	and.w	r2, r3, #7
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000
 8001978:	40022000 	.word	0x40022000

0800197c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <RCC_Delay+0x34>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <RCC_Delay+0x38>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0a5b      	lsrs	r3, r3, #9
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001998:	bf00      	nop
  }
  while (Delay --);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1e5a      	subs	r2, r3, #1
 800199e:	60fa      	str	r2, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f9      	bne.n	8001998 <RCC_Delay+0x1c>
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	2000011c 	.word	0x2000011c
 80019b4:	10624dd3 	.word	0x10624dd3

080019b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d07d      	beq.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d8:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10d      	bne.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e4:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	4a4b      	ldr	r2, [pc, #300]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ee:	61d3      	str	r3, [r2, #28]
 80019f0:	4b49      	ldr	r3, [pc, #292]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fc:	2301      	movs	r3, #1
 80019fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d118      	bne.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a42      	ldr	r2, [pc, #264]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a18:	f7fe fbcc 	bl	80001b4 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	e008      	b.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a20:	f7fe fbc8 	bl	80001b4 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e06d      	b.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d02e      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d027      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a6c:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a72:	4a29      	ldr	r2, [pc, #164]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d014      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7fe fb97 	bl	80001b4 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7fe fb93 	bl	80001b4 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e036      	b.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0ee      	beq.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4917      	ldr	r1, [pc, #92]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ace:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	490b      	ldr	r1, [pc, #44]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	4904      	ldr	r1, [pc, #16]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	42420440 	.word	0x42420440

08001b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e01d      	b.n	8001b72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f815 	bl	8001b7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	f000 f962 	bl	8001e2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d007      	beq.n	8001bc6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0201 	orr.w	r2, r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d122      	bne.n	8001c2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d11b      	bne.n	8001c2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f06f 0202 	mvn.w	r2, #2
 8001bfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f8ed 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001c1a:	e005      	b.n	8001c28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f8e0 	bl	8001de2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8ef 	bl	8001e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d122      	bne.n	8001c82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d11b      	bne.n	8001c82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f06f 0204 	mvn.w	r2, #4
 8001c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f8c3 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001c6e:	e005      	b.n	8001c7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f8b6 	bl	8001de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8c5 	bl	8001e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d122      	bne.n	8001cd6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d11b      	bne.n	8001cd6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f06f 0208 	mvn.w	r2, #8
 8001ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2204      	movs	r2, #4
 8001cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f899 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001cc2:	e005      	b.n	8001cd0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f88c 	bl	8001de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f89b 	bl	8001e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	2b10      	cmp	r3, #16
 8001ce2:	d122      	bne.n	8001d2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d11b      	bne.n	8001d2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f06f 0210 	mvn.w	r2, #16
 8001cfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2208      	movs	r2, #8
 8001d00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f86f 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001d16:	e005      	b.n	8001d24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f862 	bl	8001de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f871 	bl	8001e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d10e      	bne.n	8001d56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d107      	bne.n	8001d56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f06f 0201 	mvn.w	r2, #1
 8001d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f004 fd29 	bl	80067a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d60:	2b80      	cmp	r3, #128	; 0x80
 8001d62:	d10e      	bne.n	8001d82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6e:	2b80      	cmp	r3, #128	; 0x80
 8001d70:	d107      	bne.n	8001d82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f8c0 	bl	8001f02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8c:	2b40      	cmp	r3, #64	; 0x40
 8001d8e:	d10e      	bne.n	8001dae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9a:	2b40      	cmp	r3, #64	; 0x40
 8001d9c:	d107      	bne.n	8001dae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f835 	bl	8001e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	d10e      	bne.n	8001dda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f003 0320 	and.w	r3, r3, #32
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	d107      	bne.n	8001dda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f06f 0220 	mvn.w	r2, #32
 8001dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f88b 	bl	8001ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
	...

08001e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <TIM_Base_SetConfig+0xb8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d00b      	beq.n	8001e5c <TIM_Base_SetConfig+0x30>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e4a:	d007      	beq.n	8001e5c <TIM_Base_SetConfig+0x30>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a26      	ldr	r2, [pc, #152]	; (8001ee8 <TIM_Base_SetConfig+0xbc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d003      	beq.n	8001e5c <TIM_Base_SetConfig+0x30>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a25      	ldr	r2, [pc, #148]	; (8001eec <TIM_Base_SetConfig+0xc0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d108      	bne.n	8001e6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <TIM_Base_SetConfig+0xb8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00b      	beq.n	8001e8e <TIM_Base_SetConfig+0x62>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7c:	d007      	beq.n	8001e8e <TIM_Base_SetConfig+0x62>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <TIM_Base_SetConfig+0xbc>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d003      	beq.n	8001e8e <TIM_Base_SetConfig+0x62>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a18      	ldr	r2, [pc, #96]	; (8001eec <TIM_Base_SetConfig+0xc0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d108      	bne.n	8001ea0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <TIM_Base_SetConfig+0xb8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d103      	bne.n	8001ed4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	615a      	str	r2, [r3, #20]
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	40012c00 	.word	0x40012c00
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800

08001ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001f14:	b084      	sub	sp, #16
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	f107 0014 	add.w	r0, r7, #20
 8001f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	b004      	add	sp, #16
 8001f32:	4770      	bx	lr

08001f34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8001f3c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8001f40:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	89fb      	ldrh	r3, [r7, #14]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8001f6a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8001f6e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	4013      	ands	r3, r2
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr

08001fb2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	f107 0014 	add.w	r0, r7, #20
 8001fc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ffa5 	bl	8001f34 <USB_EnableGlobalInt>

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ff6:	b004      	add	sp, #16
 8001ff8:	4770      	bx	lr
	...

08001ffc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001ffc:	b490      	push	{r4, r7}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800201c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002020:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	78db      	ldrb	r3, [r3, #3]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d819      	bhi.n	800205e <USB_ActivateEndpoint+0x62>
 800202a:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <USB_ActivateEndpoint+0x34>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	08002041 	.word	0x08002041
 8002034:	08002055 	.word	0x08002055
 8002038:	08002065 	.word	0x08002065
 800203c:	0800204b 	.word	0x0800204b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002040:	89bb      	ldrh	r3, [r7, #12]
 8002042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002046:	81bb      	strh	r3, [r7, #12]
      break;
 8002048:	e00d      	b.n	8002066 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800204a:	89bb      	ldrh	r3, [r7, #12]
 800204c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002050:	81bb      	strh	r3, [r7, #12]
      break;
 8002052:	e008      	b.n	8002066 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002054:	89bb      	ldrh	r3, [r7, #12]
 8002056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800205a:	81bb      	strh	r3, [r7, #12]
      break;
 800205c:	e003      	b.n	8002066 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
      break;
 8002062:	e000      	b.n	8002066 <USB_ActivateEndpoint+0x6a>
      break;
 8002064:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	441a      	add	r2, r3
 8002070:	89bb      	ldrh	r3, [r7, #12]
 8002072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800207a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800207e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002082:	b29b      	uxth	r3, r3
 8002084:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209c:	b29a      	uxth	r2, r3
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	4313      	orrs	r3, r2
 80020a6:	b29c      	uxth	r4, r3
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	441a      	add	r2, r3
 80020b2:	4b8a      	ldr	r3, [pc, #552]	; (80022dc <USB_ActivateEndpoint+0x2e0>)
 80020b4:	4323      	orrs	r3, r4
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	7b1b      	ldrb	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 8112 	bne.w	80022e8 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	785b      	ldrb	r3, [r3, #1]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d067      	beq.n	800219c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80020cc:	687c      	ldr	r4, [r7, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	441c      	add	r4, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4423      	add	r3, r4
 80020e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e4:	461c      	mov	r4, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	88db      	ldrh	r3, [r3, #6]
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	b29c      	uxth	r4, r3
 8002102:	4623      	mov	r3, r4
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d014      	beq.n	8002136 <USB_ActivateEndpoint+0x13a>
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800211e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002122:	b29c      	uxth	r4, r3
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	441a      	add	r2, r3
 800212e:	4b6c      	ldr	r3, [pc, #432]	; (80022e0 <USB_ActivateEndpoint+0x2e4>)
 8002130:	4323      	orrs	r3, r4
 8002132:	b29b      	uxth	r3, r3
 8002134:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	78db      	ldrb	r3, [r3, #3]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d018      	beq.n	8002170 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002154:	b29c      	uxth	r4, r3
 8002156:	f084 0320 	eor.w	r3, r4, #32
 800215a:	b29c      	uxth	r4, r3
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	441a      	add	r2, r3
 8002166:	4b5d      	ldr	r3, [pc, #372]	; (80022dc <USB_ActivateEndpoint+0x2e0>)
 8002168:	4323      	orrs	r3, r4
 800216a:	b29b      	uxth	r3, r3
 800216c:	8013      	strh	r3, [r2, #0]
 800216e:	e22b      	b.n	80025c8 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	b29b      	uxth	r3, r3
 800217e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002186:	b29c      	uxth	r4, r3
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	441a      	add	r2, r3
 8002192:	4b52      	ldr	r3, [pc, #328]	; (80022dc <USB_ActivateEndpoint+0x2e0>)
 8002194:	4323      	orrs	r3, r4
 8002196:	b29b      	uxth	r3, r3
 8002198:	8013      	strh	r3, [r2, #0]
 800219a:	e215      	b.n	80025c8 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800219c:	687c      	ldr	r4, [r7, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	441c      	add	r4, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	4423      	add	r3, r4
 80021b0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80021b4:	461c      	mov	r4, r3
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	88db      	ldrh	r3, [r3, #6]
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	b29b      	uxth	r3, r3
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80021c4:	687c      	ldr	r4, [r7, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	441c      	add	r4, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	4423      	add	r3, r4
 80021d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021dc:	461c      	mov	r4, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10e      	bne.n	8002204 <USB_ActivateEndpoint+0x208>
 80021e6:	8823      	ldrh	r3, [r4, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	8023      	strh	r3, [r4, #0]
 80021f2:	8823      	ldrh	r3, [r4, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021fe:	b29b      	uxth	r3, r3
 8002200:	8023      	strh	r3, [r4, #0]
 8002202:	e02d      	b.n	8002260 <USB_ActivateEndpoint+0x264>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2b3e      	cmp	r3, #62	; 0x3e
 800220a:	d812      	bhi.n	8002232 <USB_ActivateEndpoint+0x236>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	085b      	lsrs	r3, r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <USB_ActivateEndpoint+0x22a>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	3301      	adds	r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	b29b      	uxth	r3, r3
 800222a:	029b      	lsls	r3, r3, #10
 800222c:	b29b      	uxth	r3, r3
 800222e:	8023      	strh	r3, [r4, #0]
 8002230:	e016      	b.n	8002260 <USB_ActivateEndpoint+0x264>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <USB_ActivateEndpoint+0x250>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3b01      	subs	r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	b29b      	uxth	r3, r3
 8002250:	029b      	lsls	r3, r3, #10
 8002252:	b29b      	uxth	r3, r3
 8002254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800225c:	b29b      	uxth	r3, r3
 800225e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b29c      	uxth	r4, r3
 800226e:	4623      	mov	r3, r4
 8002270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d014      	beq.n	80022a2 <USB_ActivateEndpoint+0x2a6>
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800228a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228e:	b29c      	uxth	r4, r3
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	441a      	add	r2, r3
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <USB_ActivateEndpoint+0x2e8>)
 800229c:	4323      	orrs	r3, r4
 800229e:	b29b      	uxth	r3, r3
 80022a0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b8:	b29c      	uxth	r4, r3
 80022ba:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80022be:	b29c      	uxth	r4, r3
 80022c0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80022c4:	b29c      	uxth	r4, r3
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	441a      	add	r2, r3
 80022d0:	4b02      	ldr	r3, [pc, #8]	; (80022dc <USB_ActivateEndpoint+0x2e0>)
 80022d2:	4323      	orrs	r3, r4
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	8013      	strh	r3, [r2, #0]
 80022d8:	e176      	b.n	80025c8 <USB_ActivateEndpoint+0x5cc>
 80022da:	bf00      	nop
 80022dc:	ffff8080 	.word	0xffff8080
 80022e0:	ffff80c0 	.word	0xffff80c0
 80022e4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fe:	b29c      	uxth	r4, r3
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	441a      	add	r2, r3
 800230a:	4b96      	ldr	r3, [pc, #600]	; (8002564 <USB_ActivateEndpoint+0x568>)
 800230c:	4323      	orrs	r3, r4
 800230e:	b29b      	uxth	r3, r3
 8002310:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002312:	687c      	ldr	r4, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800231a:	b29b      	uxth	r3, r3
 800231c:	441c      	add	r4, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	4423      	add	r3, r4
 8002326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800232a:	461c      	mov	r4, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	891b      	ldrh	r3, [r3, #8]
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	b29b      	uxth	r3, r3
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	b29b      	uxth	r3, r3
 8002338:	8023      	strh	r3, [r4, #0]
 800233a:	687c      	ldr	r4, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002342:	b29b      	uxth	r3, r3
 8002344:	441c      	add	r4, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	4423      	add	r3, r4
 800234e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002352:	461c      	mov	r4, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	895b      	ldrh	r3, [r3, #10]
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	b29b      	uxth	r3, r3
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	b29b      	uxth	r3, r3
 8002360:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	785b      	ldrb	r3, [r3, #1]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 8088 	bne.w	800247c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29c      	uxth	r4, r3
 800237a:	4623      	mov	r3, r4
 800237c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d014      	beq.n	80023ae <USB_ActivateEndpoint+0x3b2>
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b29b      	uxth	r3, r3
 8002392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239a:	b29c      	uxth	r4, r3
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	441a      	add	r2, r3
 80023a6:	4b70      	ldr	r3, [pc, #448]	; (8002568 <USB_ActivateEndpoint+0x56c>)
 80023a8:	4323      	orrs	r3, r4
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	b29c      	uxth	r4, r3
 80023bc:	4623      	mov	r3, r4
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d014      	beq.n	80023f0 <USB_ActivateEndpoint+0x3f4>
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023dc:	b29c      	uxth	r4, r3
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	441a      	add	r2, r3
 80023e8:	4b60      	ldr	r3, [pc, #384]	; (800256c <USB_ActivateEndpoint+0x570>)
 80023ea:	4323      	orrs	r3, r4
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002406:	b29c      	uxth	r4, r3
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	441a      	add	r2, r3
 8002412:	4b56      	ldr	r3, [pc, #344]	; (800256c <USB_ActivateEndpoint+0x570>)
 8002414:	4323      	orrs	r3, r4
 8002416:	b29b      	uxth	r3, r3
 8002418:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800242c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002430:	b29c      	uxth	r4, r3
 8002432:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002436:	b29c      	uxth	r4, r3
 8002438:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800243c:	b29c      	uxth	r4, r3
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	441a      	add	r2, r3
 8002448:	4b49      	ldr	r3, [pc, #292]	; (8002570 <USB_ActivateEndpoint+0x574>)
 800244a:	4323      	orrs	r3, r4
 800244c:	b29b      	uxth	r3, r3
 800244e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002466:	b29c      	uxth	r4, r3
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	441a      	add	r2, r3
 8002472:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <USB_ActivateEndpoint+0x574>)
 8002474:	4323      	orrs	r3, r4
 8002476:	b29b      	uxth	r3, r3
 8002478:	8013      	strh	r3, [r2, #0]
 800247a:	e0a5      	b.n	80025c8 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b29c      	uxth	r4, r3
 800248a:	4623      	mov	r3, r4
 800248c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d014      	beq.n	80024be <USB_ActivateEndpoint+0x4c2>
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024aa:	b29c      	uxth	r4, r3
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	441a      	add	r2, r3
 80024b6:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <USB_ActivateEndpoint+0x56c>)
 80024b8:	4323      	orrs	r3, r4
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29c      	uxth	r4, r3
 80024cc:	4623      	mov	r3, r4
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d014      	beq.n	8002500 <USB_ActivateEndpoint+0x504>
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ec:	b29c      	uxth	r4, r3
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	441a      	add	r2, r3
 80024f8:	4b1c      	ldr	r3, [pc, #112]	; (800256c <USB_ActivateEndpoint+0x570>)
 80024fa:	4323      	orrs	r3, r4
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002516:	b29c      	uxth	r4, r3
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	441a      	add	r2, r3
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <USB_ActivateEndpoint+0x56c>)
 8002524:	4323      	orrs	r3, r4
 8002526:	b29b      	uxth	r3, r3
 8002528:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	78db      	ldrb	r3, [r3, #3]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d020      	beq.n	8002574 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002548:	b29c      	uxth	r4, r3
 800254a:	f084 0320 	eor.w	r3, r4, #32
 800254e:	b29c      	uxth	r4, r3
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	441a      	add	r2, r3
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <USB_ActivateEndpoint+0x574>)
 800255c:	4323      	orrs	r3, r4
 800255e:	b29b      	uxth	r3, r3
 8002560:	8013      	strh	r3, [r2, #0]
 8002562:	e01c      	b.n	800259e <USB_ActivateEndpoint+0x5a2>
 8002564:	ffff8180 	.word	0xffff8180
 8002568:	ffffc080 	.word	0xffffc080
 800256c:	ffff80c0 	.word	0xffff80c0
 8002570:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800258a:	b29c      	uxth	r4, r3
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	441a      	add	r2, r3
 8002596:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <USB_ActivateEndpoint+0x5d8>)
 8002598:	4323      	orrs	r3, r4
 800259a:	b29b      	uxth	r3, r3
 800259c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b4:	b29c      	uxth	r4, r3
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	441a      	add	r2, r3
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <USB_ActivateEndpoint+0x5d8>)
 80025c2:	4323      	orrs	r3, r4
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc90      	pop	{r4, r7}
 80025d2:	4770      	bx	lr
 80025d4:	ffff8080 	.word	0xffff8080

080025d8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80025d8:	b490      	push	{r4, r7}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	7b1b      	ldrb	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d171      	bne.n	80026ce <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d036      	beq.n	8002660 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29c      	uxth	r4, r3
 8002600:	4623      	mov	r3, r4
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d014      	beq.n	8002634 <USB_DeactivateEndpoint+0x5c>
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800261c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002620:	b29c      	uxth	r4, r3
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	441a      	add	r2, r3
 800262c:	4b6b      	ldr	r3, [pc, #428]	; (80027dc <USB_DeactivateEndpoint+0x204>)
 800262e:	4323      	orrs	r3, r4
 8002630:	b29b      	uxth	r3, r3
 8002632:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800264a:	b29c      	uxth	r4, r3
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	441a      	add	r2, r3
 8002656:	4b62      	ldr	r3, [pc, #392]	; (80027e0 <USB_DeactivateEndpoint+0x208>)
 8002658:	4323      	orrs	r3, r4
 800265a:	b29b      	uxth	r3, r3
 800265c:	8013      	strh	r3, [r2, #0]
 800265e:	e144      	b.n	80028ea <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b29c      	uxth	r4, r3
 800266e:	4623      	mov	r3, r4
 8002670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d014      	beq.n	80026a2 <USB_DeactivateEndpoint+0xca>
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800268a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268e:	b29c      	uxth	r4, r3
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	441a      	add	r2, r3
 800269a:	4b52      	ldr	r3, [pc, #328]	; (80027e4 <USB_DeactivateEndpoint+0x20c>)
 800269c:	4323      	orrs	r3, r4
 800269e:	b29b      	uxth	r3, r3
 80026a0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b8:	b29c      	uxth	r4, r3
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	441a      	add	r2, r3
 80026c4:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <USB_DeactivateEndpoint+0x208>)
 80026c6:	4323      	orrs	r3, r4
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	8013      	strh	r3, [r2, #0]
 80026cc:	e10d      	b.n	80028ea <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	785b      	ldrb	r3, [r3, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 8088 	bne.w	80027e8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29c      	uxth	r4, r3
 80026e6:	4623      	mov	r3, r4
 80026e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d014      	beq.n	800271a <USB_DeactivateEndpoint+0x142>
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	b29c      	uxth	r4, r3
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	441a      	add	r2, r3
 8002712:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <USB_DeactivateEndpoint+0x20c>)
 8002714:	4323      	orrs	r3, r4
 8002716:	b29b      	uxth	r3, r3
 8002718:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	b29c      	uxth	r4, r3
 8002728:	4623      	mov	r3, r4
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d014      	beq.n	800275c <USB_DeactivateEndpoint+0x184>
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002748:	b29c      	uxth	r4, r3
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	441a      	add	r2, r3
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <USB_DeactivateEndpoint+0x204>)
 8002756:	4323      	orrs	r3, r4
 8002758:	b29b      	uxth	r3, r3
 800275a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800276e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002772:	b29c      	uxth	r4, r3
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	441a      	add	r2, r3
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <USB_DeactivateEndpoint+0x204>)
 8002780:	4323      	orrs	r3, r4
 8002782:	b29b      	uxth	r3, r3
 8002784:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279c:	b29c      	uxth	r4, r3
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	441a      	add	r2, r3
 80027a8:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <USB_DeactivateEndpoint+0x208>)
 80027aa:	4323      	orrs	r3, r4
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027c6:	b29c      	uxth	r4, r3
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	441a      	add	r2, r3
 80027d2:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <USB_DeactivateEndpoint+0x208>)
 80027d4:	4323      	orrs	r3, r4
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	8013      	strh	r3, [r2, #0]
 80027da:	e086      	b.n	80028ea <USB_DeactivateEndpoint+0x312>
 80027dc:	ffff80c0 	.word	0xffff80c0
 80027e0:	ffff8080 	.word	0xffff8080
 80027e4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29c      	uxth	r4, r3
 80027f6:	4623      	mov	r3, r4
 80027f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d014      	beq.n	800282a <USB_DeactivateEndpoint+0x252>
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002816:	b29c      	uxth	r4, r3
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	441a      	add	r2, r3
 8002822:	4b35      	ldr	r3, [pc, #212]	; (80028f8 <USB_DeactivateEndpoint+0x320>)
 8002824:	4323      	orrs	r3, r4
 8002826:	b29b      	uxth	r3, r3
 8002828:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29c      	uxth	r4, r3
 8002838:	4623      	mov	r3, r4
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d014      	beq.n	800286c <USB_DeactivateEndpoint+0x294>
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002858:	b29c      	uxth	r4, r3
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	441a      	add	r2, r3
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <USB_DeactivateEndpoint+0x324>)
 8002866:	4323      	orrs	r3, r4
 8002868:	b29b      	uxth	r3, r3
 800286a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800287e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002882:	b29c      	uxth	r4, r3
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	441a      	add	r2, r3
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <USB_DeactivateEndpoint+0x320>)
 8002890:	4323      	orrs	r3, r4
 8002892:	b29b      	uxth	r3, r3
 8002894:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ac:	b29c      	uxth	r4, r3
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	441a      	add	r2, r3
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <USB_DeactivateEndpoint+0x328>)
 80028ba:	4323      	orrs	r3, r4
 80028bc:	b29b      	uxth	r3, r3
 80028be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d6:	b29c      	uxth	r4, r3
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	441a      	add	r2, r3
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <USB_DeactivateEndpoint+0x328>)
 80028e4:	4323      	orrs	r3, r4
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc90      	pop	{r4, r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	ffffc080 	.word	0xffffc080
 80028fc:	ffff80c0 	.word	0xffff80c0
 8002900:	ffff8080 	.word	0xffff8080

08002904 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b08d      	sub	sp, #52	; 0x34
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	785b      	ldrb	r3, [r3, #1]
 8002912:	2b01      	cmp	r3, #1
 8002914:	f040 8160 	bne.w	8002bd8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	429a      	cmp	r2, r3
 8002922:	d909      	bls.n	8002938 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002930:	1ad2      	subs	r2, r2, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	619a      	str	r2, [r3, #24]
 8002936:	e005      	b.n	8002944 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	7b1b      	ldrb	r3, [r3, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d119      	bne.n	8002980 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6959      	ldr	r1, [r3, #20]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	88da      	ldrh	r2, [r3, #6]
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	b29b      	uxth	r3, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fba2 	bl	80030a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800295e:	687c      	ldr	r4, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	441c      	add	r4, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	4423      	add	r3, r4
 8002972:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002976:	461c      	mov	r4, r3
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	b29b      	uxth	r3, r3
 800297c:	8023      	strh	r3, [r4, #0]
 800297e:	e10f      	b.n	8002ba0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d065      	beq.n	8002a62 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002996:	687c      	ldr	r4, [r7, #4]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	785b      	ldrb	r3, [r3, #1]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d148      	bne.n	8002a32 <USB_EPStartXfer+0x12e>
 80029a0:	687c      	ldr	r4, [r7, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	441c      	add	r4, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	4423      	add	r3, r4
 80029b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029b8:	461c      	mov	r4, r3
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10e      	bne.n	80029de <USB_EPStartXfer+0xda>
 80029c0:	8823      	ldrh	r3, [r4, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	8023      	strh	r3, [r4, #0]
 80029cc:	8823      	ldrh	r3, [r4, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d8:	b29b      	uxth	r3, r3
 80029da:	8023      	strh	r3, [r4, #0]
 80029dc:	e03d      	b.n	8002a5a <USB_EPStartXfer+0x156>
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	2b3e      	cmp	r3, #62	; 0x3e
 80029e2:	d810      	bhi.n	8002a06 <USB_EPStartXfer+0x102>
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e6:	085b      	lsrs	r3, r3, #1
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <USB_EPStartXfer+0xf6>
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	3301      	adds	r3, #1
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	029b      	lsls	r3, r3, #10
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	8023      	strh	r3, [r4, #0]
 8002a04:	e029      	b.n	8002a5a <USB_EPStartXfer+0x156>
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <USB_EPStartXfer+0x118>
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	029b      	lsls	r3, r3, #10
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	8023      	strh	r3, [r4, #0]
 8002a30:	e013      	b.n	8002a5a <USB_EPStartXfer+0x156>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	785b      	ldrb	r3, [r3, #1]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d10f      	bne.n	8002a5a <USB_EPStartXfer+0x156>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	441c      	add	r4, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	4423      	add	r3, r4
 8002a4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	895b      	ldrh	r3, [r3, #10]
 8002a5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002a60:	e063      	b.n	8002b2a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	785b      	ldrb	r3, [r3, #1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d148      	bne.n	8002afc <USB_EPStartXfer+0x1f8>
 8002a6a:	687c      	ldr	r4, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	441c      	add	r4, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	4423      	add	r3, r4
 8002a7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a82:	461c      	mov	r4, r3
 8002a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10e      	bne.n	8002aa8 <USB_EPStartXfer+0x1a4>
 8002a8a:	8823      	ldrh	r3, [r4, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	8023      	strh	r3, [r4, #0]
 8002a96:	8823      	ldrh	r3, [r4, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	8023      	strh	r3, [r4, #0]
 8002aa6:	e03d      	b.n	8002b24 <USB_EPStartXfer+0x220>
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	2b3e      	cmp	r3, #62	; 0x3e
 8002aac:	d810      	bhi.n	8002ad0 <USB_EPStartXfer+0x1cc>
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	623b      	str	r3, [r7, #32]
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <USB_EPStartXfer+0x1c0>
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	623b      	str	r3, [r7, #32]
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	029b      	lsls	r3, r3, #10
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	8023      	strh	r3, [r4, #0]
 8002ace:	e029      	b.n	8002b24 <USB_EPStartXfer+0x220>
 8002ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	623b      	str	r3, [r7, #32]
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <USB_EPStartXfer+0x1e2>
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	623b      	str	r3, [r7, #32]
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	029b      	lsls	r3, r3, #10
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	8023      	strh	r3, [r4, #0]
 8002afa:	e013      	b.n	8002b24 <USB_EPStartXfer+0x220>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	785b      	ldrb	r3, [r3, #1]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d10f      	bne.n	8002b24 <USB_EPStartXfer+0x220>
 8002b04:	687c      	ldr	r4, [r7, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	441c      	add	r4, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	4423      	add	r3, r4
 8002b18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b1c:	461c      	mov	r4, r3
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	891b      	ldrh	r3, [r3, #8]
 8002b28:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6959      	ldr	r1, [r3, #20]
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fab4 	bl	80030a2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	785b      	ldrb	r3, [r3, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d115      	bne.n	8002b6e <USB_EPStartXfer+0x26a>
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b58:	b29c      	uxth	r4, r3
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	441a      	add	r2, r3
 8002b64:	4b9a      	ldr	r3, [pc, #616]	; (8002dd0 <USB_EPStartXfer+0x4cc>)
 8002b66:	4323      	orrs	r3, r4
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	8013      	strh	r3, [r2, #0]
 8002b6c:	e018      	b.n	8002ba0 <USB_EPStartXfer+0x29c>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	785b      	ldrb	r3, [r3, #1]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d114      	bne.n	8002ba0 <USB_EPStartXfer+0x29c>
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8c:	b29c      	uxth	r4, r3
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	441a      	add	r2, r3
 8002b98:	4b8e      	ldr	r3, [pc, #568]	; (8002dd4 <USB_EPStartXfer+0x4d0>)
 8002b9a:	4323      	orrs	r3, r4
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb6:	b29c      	uxth	r4, r3
 8002bb8:	f084 0310 	eor.w	r3, r4, #16
 8002bbc:	b29c      	uxth	r4, r3
 8002bbe:	f084 0320 	eor.w	r3, r4, #32
 8002bc2:	b29c      	uxth	r4, r3
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	441a      	add	r2, r3
 8002bce:	4b82      	ldr	r3, [pc, #520]	; (8002dd8 <USB_EPStartXfer+0x4d4>)
 8002bd0:	4323      	orrs	r3, r4
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	8013      	strh	r3, [r2, #0]
 8002bd6:	e146      	b.n	8002e66 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	699a      	ldr	r2, [r3, #24]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d909      	bls.n	8002bf8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	1ad2      	subs	r2, r2, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	619a      	str	r2, [r3, #24]
 8002bf6:	e005      	b.n	8002c04 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	7b1b      	ldrb	r3, [r3, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d148      	bne.n	8002c9e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002c0c:	687c      	ldr	r4, [r7, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	441c      	add	r4, r3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	4423      	add	r3, r4
 8002c20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c24:	461c      	mov	r4, r3
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10e      	bne.n	8002c4a <USB_EPStartXfer+0x346>
 8002c2c:	8823      	ldrh	r3, [r4, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	8023      	strh	r3, [r4, #0]
 8002c38:	8823      	ldrh	r3, [r4, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	8023      	strh	r3, [r4, #0]
 8002c48:	e0f2      	b.n	8002e30 <USB_EPStartXfer+0x52c>
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	2b3e      	cmp	r3, #62	; 0x3e
 8002c4e:	d810      	bhi.n	8002c72 <USB_EPStartXfer+0x36e>
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	085b      	lsrs	r3, r3, #1
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <USB_EPStartXfer+0x362>
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	3301      	adds	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	029b      	lsls	r3, r3, #10
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	8023      	strh	r3, [r4, #0]
 8002c70:	e0de      	b.n	8002e30 <USB_EPStartXfer+0x52c>
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d102      	bne.n	8002c88 <USB_EPStartXfer+0x384>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	029b      	lsls	r3, r3, #10
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	8023      	strh	r3, [r4, #0]
 8002c9c:	e0c8      	b.n	8002e30 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	785b      	ldrb	r3, [r3, #1]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d148      	bne.n	8002d38 <USB_EPStartXfer+0x434>
 8002ca6:	687c      	ldr	r4, [r7, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	441c      	add	r4, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	4423      	add	r3, r4
 8002cba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cbe:	461c      	mov	r4, r3
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10e      	bne.n	8002ce4 <USB_EPStartXfer+0x3e0>
 8002cc6:	8823      	ldrh	r3, [r4, #0]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	8023      	strh	r3, [r4, #0]
 8002cd2:	8823      	ldrh	r3, [r4, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	8023      	strh	r3, [r4, #0]
 8002ce2:	e03d      	b.n	8002d60 <USB_EPStartXfer+0x45c>
 8002ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8002ce8:	d810      	bhi.n	8002d0c <USB_EPStartXfer+0x408>
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	085b      	lsrs	r3, r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <USB_EPStartXfer+0x3fc>
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	029b      	lsls	r3, r3, #10
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	8023      	strh	r3, [r4, #0]
 8002d0a:	e029      	b.n	8002d60 <USB_EPStartXfer+0x45c>
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d102      	bne.n	8002d22 <USB_EPStartXfer+0x41e>
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	029b      	lsls	r3, r3, #10
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	8023      	strh	r3, [r4, #0]
 8002d36:	e013      	b.n	8002d60 <USB_EPStartXfer+0x45c>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	785b      	ldrb	r3, [r3, #1]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d10f      	bne.n	8002d60 <USB_EPStartXfer+0x45c>
 8002d40:	687c      	ldr	r4, [r7, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	441c      	add	r4, r3
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	4423      	add	r3, r4
 8002d54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d58:	461c      	mov	r4, r3
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	8023      	strh	r3, [r4, #0]
 8002d60:	687c      	ldr	r4, [r7, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	785b      	ldrb	r3, [r3, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d14e      	bne.n	8002e08 <USB_EPStartXfer+0x504>
 8002d6a:	687c      	ldr	r4, [r7, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	441c      	add	r4, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	4423      	add	r3, r4
 8002d7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d82:	461c      	mov	r4, r3
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10e      	bne.n	8002da8 <USB_EPStartXfer+0x4a4>
 8002d8a:	8823      	ldrh	r3, [r4, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	8023      	strh	r3, [r4, #0]
 8002d96:	8823      	ldrh	r3, [r4, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	8023      	strh	r3, [r4, #0]
 8002da6:	e043      	b.n	8002e30 <USB_EPStartXfer+0x52c>
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	2b3e      	cmp	r3, #62	; 0x3e
 8002dac:	d816      	bhi.n	8002ddc <USB_EPStartXfer+0x4d8>
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <USB_EPStartXfer+0x4c0>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	029b      	lsls	r3, r3, #10
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	8023      	strh	r3, [r4, #0]
 8002dce:	e02f      	b.n	8002e30 <USB_EPStartXfer+0x52c>
 8002dd0:	ffff80c0 	.word	0xffff80c0
 8002dd4:	ffffc080 	.word	0xffffc080
 8002dd8:	ffff8080 	.word	0xffff8080
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <USB_EPStartXfer+0x4ee>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	029b      	lsls	r3, r3, #10
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	8023      	strh	r3, [r4, #0]
 8002e06:	e013      	b.n	8002e30 <USB_EPStartXfer+0x52c>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	785b      	ldrb	r3, [r3, #1]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d10f      	bne.n	8002e30 <USB_EPStartXfer+0x52c>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	441c      	add	r4, r3
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	4423      	add	r3, r4
 8002e22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e46:	b29c      	uxth	r4, r3
 8002e48:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002e4c:	b29c      	uxth	r4, r3
 8002e4e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002e52:	b29c      	uxth	r4, r3
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	441a      	add	r2, r3
 8002e5e:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <USB_EPStartXfer+0x56c>)
 8002e60:	4323      	orrs	r3, r4
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3734      	adds	r7, #52	; 0x34
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}
 8002e70:	ffff8080 	.word	0xffff8080

08002e74 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e74:	b490      	push	{r4, r7}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	785b      	ldrb	r3, [r3, #1]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d018      	beq.n	8002eb8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e9c:	b29c      	uxth	r4, r3
 8002e9e:	f084 0310 	eor.w	r3, r4, #16
 8002ea2:	b29c      	uxth	r4, r3
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	441a      	add	r2, r3
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <USB_EPSetStall+0x80>)
 8002eb0:	4323      	orrs	r3, r4
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	8013      	strh	r3, [r2, #0]
 8002eb6:	e017      	b.n	8002ee8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ece:	b29c      	uxth	r4, r3
 8002ed0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002ed4:	b29c      	uxth	r4, r3
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	441a      	add	r2, r3
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <USB_EPSetStall+0x80>)
 8002ee2:	4323      	orrs	r3, r4
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc90      	pop	{r4, r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	ffff8080 	.word	0xffff8080

08002ef8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ef8:	b490      	push	{r4, r7}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	7b1b      	ldrb	r3, [r3, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d17d      	bne.n	8003006 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	785b      	ldrb	r3, [r3, #1]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d03d      	beq.n	8002f8e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	b29c      	uxth	r4, r3
 8002f20:	4623      	mov	r3, r4
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d014      	beq.n	8002f54 <USB_EPClearStall+0x5c>
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f40:	b29c      	uxth	r4, r3
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	441a      	add	r2, r3
 8002f4c:	4b31      	ldr	r3, [pc, #196]	; (8003014 <USB_EPClearStall+0x11c>)
 8002f4e:	4323      	orrs	r3, r4
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	78db      	ldrb	r3, [r3, #3]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d054      	beq.n	8003006 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f72:	b29c      	uxth	r4, r3
 8002f74:	f084 0320 	eor.w	r3, r4, #32
 8002f78:	b29c      	uxth	r4, r3
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	441a      	add	r2, r3
 8002f84:	4b24      	ldr	r3, [pc, #144]	; (8003018 <USB_EPClearStall+0x120>)
 8002f86:	4323      	orrs	r3, r4
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	8013      	strh	r3, [r2, #0]
 8002f8c:	e03b      	b.n	8003006 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29c      	uxth	r4, r3
 8002f9c:	4623      	mov	r3, r4
 8002f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d014      	beq.n	8002fd0 <USB_EPClearStall+0xd8>
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbc:	b29c      	uxth	r4, r3
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	441a      	add	r2, r3
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <USB_EPClearStall+0x124>)
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	b29c      	uxth	r4, r3
 8002fe8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002fec:	b29c      	uxth	r4, r3
 8002fee:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002ff2:	b29c      	uxth	r4, r3
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	441a      	add	r2, r3
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <USB_EPClearStall+0x120>)
 8003000:	4323      	orrs	r3, r4
 8003002:	b29b      	uxth	r3, r3
 8003004:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bc90      	pop	{r4, r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	ffff80c0 	.word	0xffff80c0
 8003018:	ffff8080 	.word	0xffff8080
 800301c:	ffffc080 	.word	0xffffc080

08003020 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d103      	bne.n	800303a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2280      	movs	r2, #128	; 0x80
 8003036:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800306e:	b480      	push	{r7}
 8003070:	b085      	sub	sp, #20
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800307c:	b29b      	uxth	r3, r3
 800307e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003080:	68fb      	ldr	r3, [r7, #12]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b08d      	sub	sp, #52	; 0x34
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	4611      	mov	r1, r2
 80030ae:	461a      	mov	r2, r3
 80030b0:	460b      	mov	r3, r1
 80030b2:	80fb      	strh	r3, [r7, #6]
 80030b4:	4613      	mov	r3, r2
 80030b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80030b8:	88bb      	ldrh	r3, [r7, #4]
 80030ba:	3301      	adds	r3, #1
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	005a      	lsls	r2, r3, #1
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030da:	e01e      	b.n	800311a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	3301      	adds	r3, #1
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	3302      	adds	r3, #2
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310a:	3302      	adds	r3, #2
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	3301      	adds	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003116:	3b01      	subs	r3, #1
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1dd      	bne.n	80030dc <USB_WritePMA+0x3a>
  }
}
 8003120:	bf00      	nop
 8003122:	3734      	adds	r7, #52	; 0x34
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800312a:	b480      	push	{r7}
 800312c:	b08b      	sub	sp, #44	; 0x2c
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	4611      	mov	r1, r2
 8003136:	461a      	mov	r2, r3
 8003138:	460b      	mov	r3, r1
 800313a:	80fb      	strh	r3, [r7, #6]
 800313c:	4613      	mov	r3, r2
 800313e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003140:	88bb      	ldrh	r3, [r7, #4]
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	b29b      	uxth	r3, r3
 8003146:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	005a      	lsls	r2, r3, #1
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800315c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
 8003162:	e01b      	b.n	800319c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	3302      	adds	r3, #2
 8003170:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3301      	adds	r3, #1
 800317e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	b2da      	uxtb	r2, r3
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3301      	adds	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	3302      	adds	r3, #2
 8003194:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	3b01      	subs	r3, #1
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e0      	bne.n	8003164 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80031a2:	88bb      	ldrh	r3, [r7, #4]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	701a      	strb	r2, [r3, #0]
  }
}
 80031be:	bf00      	nop
 80031c0:	372c      	adds	r7, #44	; 0x2c
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7c1b      	ldrb	r3, [r3, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d115      	bne.n	800320c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80031e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031e4:	2202      	movs	r2, #2
 80031e6:	2181      	movs	r1, #129	; 0x81
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f003 fe0a 	bl	8006e02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80031f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031f8:	2202      	movs	r2, #2
 80031fa:	2101      	movs	r1, #1
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f003 fe00 	bl	8006e02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800320a:	e012      	b.n	8003232 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800320c:	2340      	movs	r3, #64	; 0x40
 800320e:	2202      	movs	r2, #2
 8003210:	2181      	movs	r1, #129	; 0x81
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f003 fdf5 	bl	8006e02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800321e:	2340      	movs	r3, #64	; 0x40
 8003220:	2202      	movs	r2, #2
 8003222:	2101      	movs	r1, #1
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f003 fdec 	bl	8006e02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003232:	2308      	movs	r3, #8
 8003234:	2203      	movs	r2, #3
 8003236:	2182      	movs	r1, #130	; 0x82
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f003 fde2 	bl	8006e02 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003244:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003248:	f003 fefc 	bl	8007044 <USBD_static_malloc>
 800324c:	4602      	mov	r2, r0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
 8003262:	e026      	b.n	80032b2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800326a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2200      	movs	r2, #0
 800327a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2200      	movs	r2, #0
 8003282:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7c1b      	ldrb	r3, [r3, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003298:	2101      	movs	r1, #1
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f003 fe9b 	bl	8006fd6 <USBD_LL_PrepareReceive>
 80032a0:	e007      	b.n	80032b2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032a8:	2340      	movs	r3, #64	; 0x40
 80032aa:	2101      	movs	r1, #1
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f003 fe92 	bl	8006fd6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80032cc:	2181      	movs	r1, #129	; 0x81
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f003 fdbd 	bl	8006e4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80032da:	2101      	movs	r1, #1
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f003 fdb6 	bl	8006e4e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80032ea:	2182      	movs	r1, #130	; 0x82
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f003 fdae 	bl	8006e4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00e      	beq.n	8003320 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003312:	4618      	mov	r0, r3
 8003314:	f003 fea2 	bl	800705c <USBD_static_free>
    pdev->pClassData = NULL;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800333a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003350:	2b00      	cmp	r3, #0
 8003352:	d039      	beq.n	80033c8 <USBD_CDC_Setup+0x9e>
 8003354:	2b20      	cmp	r3, #32
 8003356:	d17c      	bne.n	8003452 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	88db      	ldrh	r3, [r3, #6]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d029      	beq.n	80033b4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b25b      	sxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	da11      	bge.n	800338e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8003376:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	88d2      	ldrh	r2, [r2, #6]
 800337c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800337e:	6939      	ldr	r1, [r7, #16]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	88db      	ldrh	r3, [r3, #6]
 8003384:	461a      	mov	r2, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f001 f9f6 	bl	8004778 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800338c:	e068      	b.n	8003460 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	785a      	ldrb	r2, [r3, #1]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	88db      	ldrh	r3, [r3, #6]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80033a4:	6939      	ldr	r1, [r7, #16]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	88db      	ldrh	r3, [r3, #6]
 80033aa:	461a      	mov	r2, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f001 fa11 	bl	80047d4 <USBD_CtlPrepareRx>
      break;
 80033b2:	e055      	b.n	8003460 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	7850      	ldrb	r0, [r2, #1]
 80033c0:	2200      	movs	r2, #0
 80033c2:	6839      	ldr	r1, [r7, #0]
 80033c4:	4798      	blx	r3
      break;
 80033c6:	e04b      	b.n	8003460 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	785b      	ldrb	r3, [r3, #1]
 80033cc:	2b0a      	cmp	r3, #10
 80033ce:	d017      	beq.n	8003400 <USBD_CDC_Setup+0xd6>
 80033d0:	2b0b      	cmp	r3, #11
 80033d2:	d029      	beq.n	8003428 <USBD_CDC_Setup+0xfe>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d133      	bne.n	8003440 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d107      	bne.n	80033f2 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80033e2:	f107 030c 	add.w	r3, r7, #12
 80033e6:	2202      	movs	r2, #2
 80033e8:	4619      	mov	r1, r3
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f001 f9c4 	bl	8004778 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80033f0:	e02e      	b.n	8003450 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80033f2:	6839      	ldr	r1, [r7, #0]
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f001 f955 	bl	80046a4 <USBD_CtlError>
            ret = USBD_FAIL;
 80033fa:	2302      	movs	r3, #2
 80033fc:	75fb      	strb	r3, [r7, #23]
          break;
 80033fe:	e027      	b.n	8003450 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003406:	2b03      	cmp	r3, #3
 8003408:	d107      	bne.n	800341a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800340a:	f107 030f 	add.w	r3, r7, #15
 800340e:	2201      	movs	r2, #1
 8003410:	4619      	mov	r1, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f001 f9b0 	bl	8004778 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003418:	e01a      	b.n	8003450 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800341a:	6839      	ldr	r1, [r7, #0]
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f001 f941 	bl	80046a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8003422:	2302      	movs	r3, #2
 8003424:	75fb      	strb	r3, [r7, #23]
          break;
 8003426:	e013      	b.n	8003450 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800342e:	2b03      	cmp	r3, #3
 8003430:	d00d      	beq.n	800344e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8003432:	6839      	ldr	r1, [r7, #0]
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f001 f935 	bl	80046a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800343a:	2302      	movs	r3, #2
 800343c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800343e:	e006      	b.n	800344e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8003440:	6839      	ldr	r1, [r7, #0]
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f001 f92e 	bl	80046a4 <USBD_CtlError>
          ret = USBD_FAIL;
 8003448:	2302      	movs	r3, #2
 800344a:	75fb      	strb	r3, [r7, #23]
          break;
 800344c:	e000      	b.n	8003450 <USBD_CDC_Setup+0x126>
          break;
 800344e:	bf00      	nop
      }
      break;
 8003450:	e006      	b.n	8003460 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8003452:	6839      	ldr	r1, [r7, #0]
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f001 f925 	bl	80046a4 <USBD_CtlError>
      ret = USBD_FAIL;
 800345a:	2302      	movs	r3, #2
 800345c:	75fb      	strb	r3, [r7, #23]
      break;
 800345e:	bf00      	nop
  }

  return ret;
 8003460:	7dfb      	ldrb	r3, [r7, #23]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800347c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003484:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d037      	beq.n	8003500 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	331c      	adds	r3, #28
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d026      	beq.n	80034f4 <USBD_CDC_DataIn+0x8a>
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	331c      	adds	r3, #28
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	0152      	lsls	r2, r2, #5
 80034be:	440a      	add	r2, r1
 80034c0:	3238      	adds	r2, #56	; 0x38
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80034c8:	fb02 f201 	mul.w	r2, r2, r1
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d110      	bne.n	80034f4 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	331c      	adds	r3, #28
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80034e6:	78f9      	ldrb	r1, [r7, #3]
 80034e8:	2300      	movs	r3, #0
 80034ea:	2200      	movs	r2, #0
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f003 fd4f 	bl	8006f90 <USBD_LL_Transmit>
 80034f2:	e003      	b.n	80034fc <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e000      	b.n	8003502 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8003500:	2302      	movs	r3, #2
  }
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800351c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f003 fd7a 	bl	800701c <USBD_LL_GetRxDataSize>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800354e:	4611      	mov	r1, r2
 8003550:	4798      	blx	r3

    return USBD_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e000      	b.n	8003558 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8003556:	2302      	movs	r3, #2
  }
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800356e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003576:	2b00      	cmp	r3, #0
 8003578:	d015      	beq.n	80035a6 <USBD_CDC_EP0_RxReady+0x46>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003580:	2bff      	cmp	r3, #255	; 0xff
 8003582:	d010      	beq.n	80035a6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8003592:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800359a:	b292      	uxth	r2, r2
 800359c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	22ff      	movs	r2, #255	; 0xff
 80035a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2243      	movs	r2, #67	; 0x43
 80035bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80035be:	4b03      	ldr	r3, [pc, #12]	; (80035cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000090 	.word	0x20000090

080035d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2243      	movs	r2, #67	; 0x43
 80035dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80035de:	4b03      	ldr	r3, [pc, #12]	; (80035ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	2000004c 	.word	0x2000004c

080035f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2243      	movs	r2, #67	; 0x43
 80035fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80035fe:	4b03      	ldr	r3, [pc, #12]	; (800360c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	200000d4 	.word	0x200000d4

08003610 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	220a      	movs	r2, #10
 800361c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800361e:	4b03      	ldr	r3, [pc, #12]	; (800362c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000008 	.word	0x20000008

08003630 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800363a:	2302      	movs	r3, #2
 800363c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003670:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800369e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80036c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01c      	beq.n	8003708 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d115      	bne.n	8003704 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2201      	movs	r2, #1
 80036dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2181      	movs	r1, #129	; 0x81
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f003 fc48 	bl	8006f90 <USBD_LL_Transmit>

      return USBD_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e002      	b.n	800370a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003720:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d017      	beq.n	800375c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7c1b      	ldrb	r3, [r3, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800373a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800373e:	2101      	movs	r1, #1
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f003 fc48 	bl	8006fd6 <USBD_LL_PrepareReceive>
 8003746:	e007      	b.n	8003758 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800374e:	2340      	movs	r3, #64	; 0x40
 8003750:	2101      	movs	r1, #1
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f003 fc3f 	bl	8006fd6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	4613      	mov	r3, r2
 8003772:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800377a:	2302      	movs	r3, #2
 800377c:	e01a      	b.n	80037b4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	79fa      	ldrb	r2, [r7, #7]
 80037aa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f003 fab3 	bl	8006d18 <USBD_LL_Init>

  return USBD_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d006      	beq.n	80037de <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	73fb      	strb	r3, [r7, #15]
 80037dc:	e001      	b.n	80037e2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80037de:	2302      	movs	r3, #2
 80037e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f003 fae8 	bl	8006dcc <USBD_LL_Start>

  return USBD_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	460b      	mov	r3, r1
 8003824:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003826:	2302      	movs	r3, #2
 8003828:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00c      	beq.n	800384e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	4611      	mov	r1, r2
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	4611      	mov	r1, r2
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3

  return USBD_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800388e:	6839      	ldr	r1, [r7, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fecb 	bl	800462c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80038a4:	461a      	mov	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d00c      	beq.n	80038d4 <USBD_LL_SetupStage+0x56>
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d302      	bcc.n	80038c4 <USBD_LL_SetupStage+0x46>
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d010      	beq.n	80038e4 <USBD_LL_SetupStage+0x66>
 80038c2:	e017      	b.n	80038f4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80038ca:	4619      	mov	r1, r3
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f9cb 	bl	8003c68 <USBD_StdDevReq>
      break;
 80038d2:	e01a      	b.n	800390a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80038da:	4619      	mov	r1, r3
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fa2d 	bl	8003d3c <USBD_StdItfReq>
      break;
 80038e2:	e012      	b.n	800390a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fa6b 	bl	8003dc8 <USBD_StdEPReq>
      break;
 80038f2:	e00a      	b.n	800390a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	4619      	mov	r1, r3
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f003 fac2 	bl	8006e8c <USBD_LL_StallEP>
      break;
 8003908:	bf00      	nop
  }

  return USBD_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	460b      	mov	r3, r1
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003922:	7afb      	ldrb	r3, [r7, #11]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d14b      	bne.n	80039c0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800392e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003936:	2b03      	cmp	r3, #3
 8003938:	d134      	bne.n	80039a4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	429a      	cmp	r2, r3
 8003944:	d919      	bls.n	800397a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	1ad2      	subs	r2, r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800395c:	429a      	cmp	r2, r3
 800395e:	d203      	bcs.n	8003968 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8003964:	b29b      	uxth	r3, r3
 8003966:	e002      	b.n	800396e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800396c:	b29b      	uxth	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 ff4c 	bl	8004810 <USBD_CtlContinueRx>
 8003978:	e038      	b.n	80039ec <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800398c:	2b03      	cmp	r3, #3
 800398e:	d105      	bne.n	800399c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 ff49 	bl	8004834 <USBD_CtlSendStatus>
 80039a2:	e023      	b.n	80039ec <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80039aa:	2b05      	cmp	r3, #5
 80039ac:	d11e      	bne.n	80039ec <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80039b6:	2100      	movs	r1, #0
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f003 fa67 	bl	8006e8c <USBD_LL_StallEP>
 80039be:	e015      	b.n	80039ec <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00d      	beq.n	80039e8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d108      	bne.n	80039e8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	7afa      	ldrb	r2, [r7, #11]
 80039e0:	4611      	mov	r1, r2
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	4798      	blx	r3
 80039e6:	e001      	b.n	80039ec <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80039e8:	2302      	movs	r3, #2
 80039ea:	e000      	b.n	80039ee <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b086      	sub	sp, #24
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	460b      	mov	r3, r1
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003a04:	7afb      	ldrb	r3, [r7, #11]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d17f      	bne.n	8003b0a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3314      	adds	r3, #20
 8003a0e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d15c      	bne.n	8003ad4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d915      	bls.n	8003a52 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	1ad2      	subs	r2, r2, r3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 feb6 	bl	80047b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003a44:	2300      	movs	r3, #0
 8003a46:	2200      	movs	r2, #0
 8003a48:	2100      	movs	r1, #0
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f003 fac3 	bl	8006fd6 <USBD_LL_PrepareReceive>
 8003a50:	e04e      	b.n	8003af0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	6912      	ldr	r2, [r2, #16]
 8003a5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a5e:	fb02 f201 	mul.w	r2, r2, r1
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d11c      	bne.n	8003aa2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d316      	bcc.n	8003aa2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d20f      	bcs.n	8003aa2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2100      	movs	r1, #0
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fe92 	bl	80047b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003a94:	2300      	movs	r3, #0
 8003a96:	2200      	movs	r2, #0
 8003a98:	2100      	movs	r1, #0
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f003 fa9b 	bl	8006fd6 <USBD_LL_PrepareReceive>
 8003aa0:	e026      	b.n	8003af0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d105      	bne.n	8003ac4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8003ac4:	2180      	movs	r1, #128	; 0x80
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f003 f9e0 	bl	8006e8c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fec4 	bl	800485a <USBD_CtlReceiveStatus>
 8003ad2:	e00d      	b.n	8003af0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d004      	beq.n	8003ae8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003ae8:	2180      	movs	r1, #128	; 0x80
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f003 f9ce 	bl	8006e8c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d11d      	bne.n	8003b36 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7ff fe83 	bl	8003806 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8003b08:	e015      	b.n	8003b36 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00d      	beq.n	8003b32 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d108      	bne.n	8003b32 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	7afa      	ldrb	r2, [r7, #11]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	4798      	blx	r3
 8003b30:	e001      	b.n	8003b36 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003b32:	2302      	movs	r3, #2
 8003b34:	e000      	b.n	8003b38 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003b48:	2340      	movs	r3, #64	; 0x40
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f003 f957 	bl	8006e02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2240      	movs	r2, #64	; 0x40
 8003b60:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003b64:	2340      	movs	r3, #64	; 0x40
 8003b66:	2200      	movs	r2, #0
 8003b68:	2180      	movs	r1, #128	; 0x80
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f003 f949 	bl	8006e02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2240      	movs	r2, #64	; 0x40
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d009      	beq.n	8003bb8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6852      	ldr	r2, [r2, #4]
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	4798      	blx	r3
  }

  return USBD_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d105      	bne.n	8003c26 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d10b      	bne.n	8003c5c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d004      	beq.n	8003c8c <USBD_StdDevReq+0x24>
 8003c82:	2b40      	cmp	r3, #64	; 0x40
 8003c84:	d002      	beq.n	8003c8c <USBD_StdDevReq+0x24>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <USBD_StdDevReq+0x34>
 8003c8a:	e04c      	b.n	8003d26 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	4798      	blx	r3
      break;
 8003c9a:	e049      	b.n	8003d30 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	2b09      	cmp	r3, #9
 8003ca2:	d83a      	bhi.n	8003d1a <USBD_StdDevReq+0xb2>
 8003ca4:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <USBD_StdDevReq+0x44>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003cfd 	.word	0x08003cfd
 8003cb0:	08003d11 	.word	0x08003d11
 8003cb4:	08003d1b 	.word	0x08003d1b
 8003cb8:	08003d07 	.word	0x08003d07
 8003cbc:	08003d1b 	.word	0x08003d1b
 8003cc0:	08003cdf 	.word	0x08003cdf
 8003cc4:	08003cd5 	.word	0x08003cd5
 8003cc8:	08003d1b 	.word	0x08003d1b
 8003ccc:	08003cf3 	.word	0x08003cf3
 8003cd0:	08003ce9 	.word	0x08003ce9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8003cd4:	6839      	ldr	r1, [r7, #0]
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f9d4 	bl	8004084 <USBD_GetDescriptor>
          break;
 8003cdc:	e022      	b.n	8003d24 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fb37 	bl	8004354 <USBD_SetAddress>
          break;
 8003ce6:	e01d      	b.n	8003d24 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8003ce8:	6839      	ldr	r1, [r7, #0]
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fb74 	bl	80043d8 <USBD_SetConfig>
          break;
 8003cf0:	e018      	b.n	8003d24 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8003cf2:	6839      	ldr	r1, [r7, #0]
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fbfd 	bl	80044f4 <USBD_GetConfig>
          break;
 8003cfa:	e013      	b.n	8003d24 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8003cfc:	6839      	ldr	r1, [r7, #0]
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fc2c 	bl	800455c <USBD_GetStatus>
          break;
 8003d04:	e00e      	b.n	8003d24 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8003d06:	6839      	ldr	r1, [r7, #0]
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fc5a 	bl	80045c2 <USBD_SetFeature>
          break;
 8003d0e:	e009      	b.n	8003d24 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fc69 	bl	80045ea <USBD_ClrFeature>
          break;
 8003d18:	e004      	b.n	8003d24 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8003d1a:	6839      	ldr	r1, [r7, #0]
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fcc1 	bl	80046a4 <USBD_CtlError>
          break;
 8003d22:	bf00      	nop
      }
      break;
 8003d24:	e004      	b.n	8003d30 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8003d26:	6839      	ldr	r1, [r7, #0]
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fcbb 	bl	80046a4 <USBD_CtlError>
      break;
 8003d2e:	bf00      	nop
  }

  return ret;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop

08003d3c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d003      	beq.n	8003d5e <USBD_StdItfReq+0x22>
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d001      	beq.n	8003d5e <USBD_StdItfReq+0x22>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d12a      	bne.n	8003db4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003d64:	3b01      	subs	r3, #1
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d81d      	bhi.n	8003da6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	889b      	ldrh	r3, [r3, #4]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d813      	bhi.n	8003d9c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	6839      	ldr	r1, [r7, #0]
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4798      	blx	r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	88db      	ldrh	r3, [r3, #6]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d110      	bne.n	8003db0 <USBD_StdItfReq+0x74>
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10d      	bne.n	8003db0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fd4d 	bl	8004834 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8003d9a:	e009      	b.n	8003db0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8003d9c:	6839      	ldr	r1, [r7, #0]
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fc80 	bl	80046a4 <USBD_CtlError>
          break;
 8003da4:	e004      	b.n	8003db0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8003da6:	6839      	ldr	r1, [r7, #0]
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fc7b 	bl	80046a4 <USBD_CtlError>
          break;
 8003dae:	e000      	b.n	8003db2 <USBD_StdItfReq+0x76>
          break;
 8003db0:	bf00      	nop
      }
      break;
 8003db2:	e004      	b.n	8003dbe <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8003db4:	6839      	ldr	r1, [r7, #0]
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fc74 	bl	80046a4 <USBD_CtlError>
      break;
 8003dbc:	bf00      	nop
  }

  return USBD_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	889b      	ldrh	r3, [r3, #4]
 8003dda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d004      	beq.n	8003df2 <USBD_StdEPReq+0x2a>
 8003de8:	2b40      	cmp	r3, #64	; 0x40
 8003dea:	d002      	beq.n	8003df2 <USBD_StdEPReq+0x2a>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <USBD_StdEPReq+0x3a>
 8003df0:	e13d      	b.n	800406e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	6839      	ldr	r1, [r7, #0]
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
      break;
 8003e00:	e13a      	b.n	8004078 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d10a      	bne.n	8003e24 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	6839      	ldr	r1, [r7, #0]
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	4798      	blx	r3
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	e12a      	b.n	800407a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	785b      	ldrb	r3, [r3, #1]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d03e      	beq.n	8003eaa <USBD_StdEPReq+0xe2>
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d002      	beq.n	8003e36 <USBD_StdEPReq+0x6e>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d070      	beq.n	8003f16 <USBD_StdEPReq+0x14e>
 8003e34:	e115      	b.n	8004062 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d002      	beq.n	8003e46 <USBD_StdEPReq+0x7e>
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d015      	beq.n	8003e70 <USBD_StdEPReq+0xa8>
 8003e44:	e02b      	b.n	8003e9e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003e46:	7bbb      	ldrb	r3, [r7, #14]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00c      	beq.n	8003e66 <USBD_StdEPReq+0x9e>
 8003e4c:	7bbb      	ldrb	r3, [r7, #14]
 8003e4e:	2b80      	cmp	r3, #128	; 0x80
 8003e50:	d009      	beq.n	8003e66 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8003e52:	7bbb      	ldrb	r3, [r7, #14]
 8003e54:	4619      	mov	r1, r3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f003 f818 	bl	8006e8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003e5c:	2180      	movs	r1, #128	; 0x80
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f003 f814 	bl	8006e8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8003e64:	e020      	b.n	8003ea8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fc1b 	bl	80046a4 <USBD_CtlError>
              break;
 8003e6e:	e01b      	b.n	8003ea8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	885b      	ldrh	r3, [r3, #2]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10e      	bne.n	8003e96 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8003e78:	7bbb      	ldrb	r3, [r7, #14]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <USBD_StdEPReq+0xce>
 8003e7e:	7bbb      	ldrb	r3, [r7, #14]
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d008      	beq.n	8003e96 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	88db      	ldrh	r3, [r3, #6]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8003e8c:	7bbb      	ldrb	r3, [r7, #14]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f002 fffb 	bl	8006e8c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fccc 	bl	8004834 <USBD_CtlSendStatus>

              break;
 8003e9c:	e004      	b.n	8003ea8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8003e9e:	6839      	ldr	r1, [r7, #0]
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fbff 	bl	80046a4 <USBD_CtlError>
              break;
 8003ea6:	bf00      	nop
          }
          break;
 8003ea8:	e0e0      	b.n	800406c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d002      	beq.n	8003eba <USBD_StdEPReq+0xf2>
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d015      	beq.n	8003ee4 <USBD_StdEPReq+0x11c>
 8003eb8:	e026      	b.n	8003f08 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003eba:	7bbb      	ldrb	r3, [r7, #14]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00c      	beq.n	8003eda <USBD_StdEPReq+0x112>
 8003ec0:	7bbb      	ldrb	r3, [r7, #14]
 8003ec2:	2b80      	cmp	r3, #128	; 0x80
 8003ec4:	d009      	beq.n	8003eda <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8003ec6:	7bbb      	ldrb	r3, [r7, #14]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f002 ffde 	bl	8006e8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003ed0:	2180      	movs	r1, #128	; 0x80
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f002 ffda 	bl	8006e8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8003ed8:	e01c      	b.n	8003f14 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fbe1 	bl	80046a4 <USBD_CtlError>
              break;
 8003ee2:	e017      	b.n	8003f14 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	885b      	ldrh	r3, [r3, #2]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d112      	bne.n	8003f12 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8003eec:	7bbb      	ldrb	r3, [r7, #14]
 8003eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d004      	beq.n	8003f00 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003ef6:	7bbb      	ldrb	r3, [r7, #14]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f002 ffe5 	bl	8006eca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fc97 	bl	8004834 <USBD_CtlSendStatus>
              }
              break;
 8003f06:	e004      	b.n	8003f12 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8003f08:	6839      	ldr	r1, [r7, #0]
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fbca 	bl	80046a4 <USBD_CtlError>
              break;
 8003f10:	e000      	b.n	8003f14 <USBD_StdEPReq+0x14c>
              break;
 8003f12:	bf00      	nop
          }
          break;
 8003f14:	e0aa      	b.n	800406c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d002      	beq.n	8003f26 <USBD_StdEPReq+0x15e>
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d032      	beq.n	8003f8a <USBD_StdEPReq+0x1c2>
 8003f24:	e097      	b.n	8004056 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003f26:	7bbb      	ldrb	r3, [r7, #14]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <USBD_StdEPReq+0x174>
 8003f2c:	7bbb      	ldrb	r3, [r7, #14]
 8003f2e:	2b80      	cmp	r3, #128	; 0x80
 8003f30:	d004      	beq.n	8003f3c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8003f32:	6839      	ldr	r1, [r7, #0]
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fbb5 	bl	80046a4 <USBD_CtlError>
                break;
 8003f3a:	e091      	b.n	8004060 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	da0b      	bge.n	8003f5c <USBD_StdEPReq+0x194>
 8003f44:	7bbb      	ldrb	r3, [r7, #14]
 8003f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	3310      	adds	r3, #16
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	4413      	add	r3, r2
 8003f58:	3304      	adds	r3, #4
 8003f5a:	e00b      	b.n	8003f74 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003f5c:	7bbb      	ldrb	r3, [r7, #14]
 8003f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	4413      	add	r3, r2
 8003f72:	3304      	adds	r3, #4
 8003f74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	4619      	mov	r1, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fbf8 	bl	8004778 <USBD_CtlSendData>
              break;
 8003f88:	e06a      	b.n	8004060 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8003f8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	da11      	bge.n	8003fb6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003f92:	7bbb      	ldrb	r3, [r7, #14]
 8003f94:	f003 020f 	and.w	r2, r3, #15
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3318      	adds	r3, #24
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d117      	bne.n	8003fdc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8003fac:	6839      	ldr	r1, [r7, #0]
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fb78 	bl	80046a4 <USBD_CtlError>
                  break;
 8003fb4:	e054      	b.n	8004060 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003fb6:	7bbb      	ldrb	r3, [r7, #14]
 8003fb8:	f003 020f 	and.w	r2, r3, #15
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d104      	bne.n	8003fdc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8003fd2:	6839      	ldr	r1, [r7, #0]
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fb65 	bl	80046a4 <USBD_CtlError>
                  break;
 8003fda:	e041      	b.n	8004060 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003fdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	da0b      	bge.n	8003ffc <USBD_StdEPReq+0x234>
 8003fe4:	7bbb      	ldrb	r3, [r7, #14]
 8003fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	3310      	adds	r3, #16
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	e00b      	b.n	8004014 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8003ffc:	7bbb      	ldrb	r3, [r7, #14]
 8003ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	3304      	adds	r3, #4
 8004014:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004016:	7bbb      	ldrb	r3, [r7, #14]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <USBD_StdEPReq+0x25a>
 800401c:	7bbb      	ldrb	r3, [r7, #14]
 800401e:	2b80      	cmp	r3, #128	; 0x80
 8004020:	d103      	bne.n	800402a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	e00e      	b.n	8004048 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800402a:	7bbb      	ldrb	r3, [r7, #14]
 800402c:	4619      	mov	r1, r3
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f002 ff6a 	bl	8006f08 <USBD_LL_IsStallEP>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2201      	movs	r2, #1
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	e002      	b.n	8004048 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2202      	movs	r2, #2
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fb92 	bl	8004778 <USBD_CtlSendData>
              break;
 8004054:	e004      	b.n	8004060 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004056:	6839      	ldr	r1, [r7, #0]
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fb23 	bl	80046a4 <USBD_CtlError>
              break;
 800405e:	bf00      	nop
          }
          break;
 8004060:	e004      	b.n	800406c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004062:	6839      	ldr	r1, [r7, #0]
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fb1d 	bl	80046a4 <USBD_CtlError>
          break;
 800406a:	bf00      	nop
      }
      break;
 800406c:	e004      	b.n	8004078 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800406e:	6839      	ldr	r1, [r7, #0]
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fb17 	bl	80046a4 <USBD_CtlError>
      break;
 8004076:	bf00      	nop
  }

  return ret;
 8004078:	7bfb      	ldrb	r3, [r7, #15]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	885b      	ldrh	r3, [r3, #2]
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	2b06      	cmp	r3, #6
 80040a6:	f200 8128 	bhi.w	80042fa <USBD_GetDescriptor+0x276>
 80040aa:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <USBD_GetDescriptor+0x2c>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040cd 	.word	0x080040cd
 80040b4:	080040e5 	.word	0x080040e5
 80040b8:	08004125 	.word	0x08004125
 80040bc:	080042fb 	.word	0x080042fb
 80040c0:	080042fb 	.word	0x080042fb
 80040c4:	0800429b 	.word	0x0800429b
 80040c8:	080042c7 	.word	0x080042c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	7c12      	ldrb	r2, [r2, #16]
 80040d8:	f107 0108 	add.w	r1, r7, #8
 80040dc:	4610      	mov	r0, r2
 80040de:	4798      	blx	r3
 80040e0:	60f8      	str	r0, [r7, #12]
      break;
 80040e2:	e112      	b.n	800430a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	7c1b      	ldrb	r3, [r3, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10d      	bne.n	8004108 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	f107 0208 	add.w	r2, r7, #8
 80040f8:	4610      	mov	r0, r2
 80040fa:	4798      	blx	r3
 80040fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3301      	adds	r3, #1
 8004102:	2202      	movs	r2, #2
 8004104:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004106:	e100      	b.n	800430a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	f107 0208 	add.w	r2, r7, #8
 8004114:	4610      	mov	r0, r2
 8004116:	4798      	blx	r3
 8004118:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3301      	adds	r3, #1
 800411e:	2202      	movs	r2, #2
 8004120:	701a      	strb	r2, [r3, #0]
      break;
 8004122:	e0f2      	b.n	800430a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	885b      	ldrh	r3, [r3, #2]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b05      	cmp	r3, #5
 800412c:	f200 80ac 	bhi.w	8004288 <USBD_GetDescriptor+0x204>
 8004130:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <USBD_GetDescriptor+0xb4>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	08004151 	.word	0x08004151
 800413c:	08004185 	.word	0x08004185
 8004140:	080041b9 	.word	0x080041b9
 8004144:	080041ed 	.word	0x080041ed
 8004148:	08004221 	.word	0x08004221
 800414c:	08004255 	.word	0x08004255
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00b      	beq.n	8004174 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	7c12      	ldrb	r2, [r2, #16]
 8004168:	f107 0108 	add.w	r1, r7, #8
 800416c:	4610      	mov	r0, r2
 800416e:	4798      	blx	r3
 8004170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004172:	e091      	b.n	8004298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004174:	6839      	ldr	r1, [r7, #0]
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fa94 	bl	80046a4 <USBD_CtlError>
            err++;
 800417c:	7afb      	ldrb	r3, [r7, #11]
 800417e:	3301      	adds	r3, #1
 8004180:	72fb      	strb	r3, [r7, #11]
          break;
 8004182:	e089      	b.n	8004298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00b      	beq.n	80041a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	7c12      	ldrb	r2, [r2, #16]
 800419c:	f107 0108 	add.w	r1, r7, #8
 80041a0:	4610      	mov	r0, r2
 80041a2:	4798      	blx	r3
 80041a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80041a6:	e077      	b.n	8004298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fa7a 	bl	80046a4 <USBD_CtlError>
            err++;
 80041b0:	7afb      	ldrb	r3, [r7, #11]
 80041b2:	3301      	adds	r3, #1
 80041b4:	72fb      	strb	r3, [r7, #11]
          break;
 80041b6:	e06f      	b.n	8004298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	7c12      	ldrb	r2, [r2, #16]
 80041d0:	f107 0108 	add.w	r1, r7, #8
 80041d4:	4610      	mov	r0, r2
 80041d6:	4798      	blx	r3
 80041d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80041da:	e05d      	b.n	8004298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80041dc:	6839      	ldr	r1, [r7, #0]
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fa60 	bl	80046a4 <USBD_CtlError>
            err++;
 80041e4:	7afb      	ldrb	r3, [r7, #11]
 80041e6:	3301      	adds	r3, #1
 80041e8:	72fb      	strb	r3, [r7, #11]
          break;
 80041ea:	e055      	b.n	8004298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00b      	beq.n	8004210 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	7c12      	ldrb	r2, [r2, #16]
 8004204:	f107 0108 	add.w	r1, r7, #8
 8004208:	4610      	mov	r0, r2
 800420a:	4798      	blx	r3
 800420c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800420e:	e043      	b.n	8004298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004210:	6839      	ldr	r1, [r7, #0]
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa46 	bl	80046a4 <USBD_CtlError>
            err++;
 8004218:	7afb      	ldrb	r3, [r7, #11]
 800421a:	3301      	adds	r3, #1
 800421c:	72fb      	strb	r3, [r7, #11]
          break;
 800421e:	e03b      	b.n	8004298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	7c12      	ldrb	r2, [r2, #16]
 8004238:	f107 0108 	add.w	r1, r7, #8
 800423c:	4610      	mov	r0, r2
 800423e:	4798      	blx	r3
 8004240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004242:	e029      	b.n	8004298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004244:	6839      	ldr	r1, [r7, #0]
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa2c 	bl	80046a4 <USBD_CtlError>
            err++;
 800424c:	7afb      	ldrb	r3, [r7, #11]
 800424e:	3301      	adds	r3, #1
 8004250:	72fb      	strb	r3, [r7, #11]
          break;
 8004252:	e021      	b.n	8004298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	7c12      	ldrb	r2, [r2, #16]
 800426c:	f107 0108 	add.w	r1, r7, #8
 8004270:	4610      	mov	r0, r2
 8004272:	4798      	blx	r3
 8004274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004276:	e00f      	b.n	8004298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa12 	bl	80046a4 <USBD_CtlError>
            err++;
 8004280:	7afb      	ldrb	r3, [r7, #11]
 8004282:	3301      	adds	r3, #1
 8004284:	72fb      	strb	r3, [r7, #11]
          break;
 8004286:	e007      	b.n	8004298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004288:	6839      	ldr	r1, [r7, #0]
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fa0a 	bl	80046a4 <USBD_CtlError>
          err++;
 8004290:	7afb      	ldrb	r3, [r7, #11]
 8004292:	3301      	adds	r3, #1
 8004294:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004296:	e038      	b.n	800430a <USBD_GetDescriptor+0x286>
 8004298:	e037      	b.n	800430a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7c1b      	ldrb	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	f107 0208 	add.w	r2, r7, #8
 80042ae:	4610      	mov	r0, r2
 80042b0:	4798      	blx	r3
 80042b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80042b4:	e029      	b.n	800430a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80042b6:	6839      	ldr	r1, [r7, #0]
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f9f3 	bl	80046a4 <USBD_CtlError>
        err++;
 80042be:	7afb      	ldrb	r3, [r7, #11]
 80042c0:	3301      	adds	r3, #1
 80042c2:	72fb      	strb	r3, [r7, #11]
      break;
 80042c4:	e021      	b.n	800430a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	7c1b      	ldrb	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10d      	bne.n	80042ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	f107 0208 	add.w	r2, r7, #8
 80042da:	4610      	mov	r0, r2
 80042dc:	4798      	blx	r3
 80042de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3301      	adds	r3, #1
 80042e4:	2207      	movs	r2, #7
 80042e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80042e8:	e00f      	b.n	800430a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80042ea:	6839      	ldr	r1, [r7, #0]
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f9d9 	bl	80046a4 <USBD_CtlError>
        err++;
 80042f2:	7afb      	ldrb	r3, [r7, #11]
 80042f4:	3301      	adds	r3, #1
 80042f6:	72fb      	strb	r3, [r7, #11]
      break;
 80042f8:	e007      	b.n	800430a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80042fa:	6839      	ldr	r1, [r7, #0]
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f9d1 	bl	80046a4 <USBD_CtlError>
      err++;
 8004302:	7afb      	ldrb	r3, [r7, #11]
 8004304:	3301      	adds	r3, #1
 8004306:	72fb      	strb	r3, [r7, #11]
      break;
 8004308:	bf00      	nop
  }

  if (err != 0U)
 800430a:	7afb      	ldrb	r3, [r7, #11]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d11c      	bne.n	800434a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004310:	893b      	ldrh	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d011      	beq.n	800433a <USBD_GetDescriptor+0x2b6>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	88db      	ldrh	r3, [r3, #6]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00d      	beq.n	800433a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	88da      	ldrh	r2, [r3, #6]
 8004322:	893b      	ldrh	r3, [r7, #8]
 8004324:	4293      	cmp	r3, r2
 8004326:	bf28      	it	cs
 8004328:	4613      	movcs	r3, r2
 800432a:	b29b      	uxth	r3, r3
 800432c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800432e:	893b      	ldrh	r3, [r7, #8]
 8004330:	461a      	mov	r2, r3
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fa1f 	bl	8004778 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	88db      	ldrh	r3, [r3, #6]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fa76 	bl	8004834 <USBD_CtlSendStatus>
 8004348:	e000      	b.n	800434c <USBD_GetDescriptor+0x2c8>
    return;
 800434a:	bf00      	nop
    }
  }
}
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop

08004354 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	889b      	ldrh	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d130      	bne.n	80043c8 <USBD_SetAddress+0x74>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	88db      	ldrh	r3, [r3, #6]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d12c      	bne.n	80043c8 <USBD_SetAddress+0x74>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	885b      	ldrh	r3, [r3, #2]
 8004372:	2b7f      	cmp	r3, #127	; 0x7f
 8004374:	d828      	bhi.n	80043c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	885b      	ldrh	r3, [r3, #2]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004380:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004388:	2b03      	cmp	r3, #3
 800438a:	d104      	bne.n	8004396 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f988 	bl	80046a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004394:	e01c      	b.n	80043d0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	7bfa      	ldrb	r2, [r7, #15]
 800439a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	4619      	mov	r1, r3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f002 fdd5 	bl	8006f52 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fa43 	bl	8004834 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043bc:	e008      	b.n	80043d0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043c6:	e003      	b.n	80043d0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80043c8:	6839      	ldr	r1, [r7, #0]
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f96a 	bl	80046a4 <USBD_CtlError>
  }
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	885b      	ldrh	r3, [r3, #2]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	4b41      	ldr	r3, [pc, #260]	; (80044f0 <USBD_SetConfig+0x118>)
 80043ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80043ec:	4b40      	ldr	r3, [pc, #256]	; (80044f0 <USBD_SetConfig+0x118>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d904      	bls.n	80043fe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80043f4:	6839      	ldr	r1, [r7, #0]
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f954 	bl	80046a4 <USBD_CtlError>
 80043fc:	e075      	b.n	80044ea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004404:	2b02      	cmp	r3, #2
 8004406:	d002      	beq.n	800440e <USBD_SetConfig+0x36>
 8004408:	2b03      	cmp	r3, #3
 800440a:	d023      	beq.n	8004454 <USBD_SetConfig+0x7c>
 800440c:	e062      	b.n	80044d4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800440e:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <USBD_SetConfig+0x118>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01a      	beq.n	800444c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004416:	4b36      	ldr	r3, [pc, #216]	; (80044f0 <USBD_SetConfig+0x118>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2203      	movs	r2, #3
 8004424:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004428:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <USBD_SetConfig+0x118>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff f9f3 	bl	800381a <USBD_SetClassConfig>
 8004434:	4603      	mov	r3, r0
 8004436:	2b02      	cmp	r3, #2
 8004438:	d104      	bne.n	8004444 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800443a:	6839      	ldr	r1, [r7, #0]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f931 	bl	80046a4 <USBD_CtlError>
            return;
 8004442:	e052      	b.n	80044ea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f9f5 	bl	8004834 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800444a:	e04e      	b.n	80044ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f9f1 	bl	8004834 <USBD_CtlSendStatus>
        break;
 8004452:	e04a      	b.n	80044ea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <USBD_SetConfig+0x118>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d112      	bne.n	8004482 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004464:	4b22      	ldr	r3, [pc, #136]	; (80044f0 <USBD_SetConfig+0x118>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800446e:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <USBD_SetConfig+0x118>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	4619      	mov	r1, r3
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff f9ef 	bl	8003858 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f9da 	bl	8004834 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004480:	e033      	b.n	80044ea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004482:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <USBD_SetConfig+0x118>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	429a      	cmp	r2, r3
 800448e:	d01d      	beq.n	80044cc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff f9dd 	bl	8003858 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800449e:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <USBD_SetConfig+0x118>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80044a8:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <USBD_SetConfig+0x118>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	4619      	mov	r1, r3
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff f9b3 	bl	800381a <USBD_SetClassConfig>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d104      	bne.n	80044c4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80044ba:	6839      	ldr	r1, [r7, #0]
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f8f1 	bl	80046a4 <USBD_CtlError>
            return;
 80044c2:	e012      	b.n	80044ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f9b5 	bl	8004834 <USBD_CtlSendStatus>
        break;
 80044ca:	e00e      	b.n	80044ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f9b1 	bl	8004834 <USBD_CtlSendStatus>
        break;
 80044d2:	e00a      	b.n	80044ea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80044d4:	6839      	ldr	r1, [r7, #0]
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f8e4 	bl	80046a4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <USBD_SetConfig+0x118>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	4619      	mov	r1, r3
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff f9b8 	bl	8003858 <USBD_ClrClassConfig>
        break;
 80044e8:	bf00      	nop
    }
  }
}
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	2000019c 	.word	0x2000019c

080044f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	88db      	ldrh	r3, [r3, #6]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d004      	beq.n	8004510 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004506:	6839      	ldr	r1, [r7, #0]
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f8cb 	bl	80046a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800450e:	e021      	b.n	8004554 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004516:	2b01      	cmp	r3, #1
 8004518:	db17      	blt.n	800454a <USBD_GetConfig+0x56>
 800451a:	2b02      	cmp	r3, #2
 800451c:	dd02      	ble.n	8004524 <USBD_GetConfig+0x30>
 800451e:	2b03      	cmp	r3, #3
 8004520:	d00b      	beq.n	800453a <USBD_GetConfig+0x46>
 8004522:	e012      	b.n	800454a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3308      	adds	r3, #8
 800452e:	2201      	movs	r2, #1
 8004530:	4619      	mov	r1, r3
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f920 	bl	8004778 <USBD_CtlSendData>
        break;
 8004538:	e00c      	b.n	8004554 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3304      	adds	r3, #4
 800453e:	2201      	movs	r2, #1
 8004540:	4619      	mov	r1, r3
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f918 	bl	8004778 <USBD_CtlSendData>
        break;
 8004548:	e004      	b.n	8004554 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800454a:	6839      	ldr	r1, [r7, #0]
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f8a9 	bl	80046a4 <USBD_CtlError>
        break;
 8004552:	bf00      	nop
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800456c:	3b01      	subs	r3, #1
 800456e:	2b02      	cmp	r3, #2
 8004570:	d81e      	bhi.n	80045b0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	88db      	ldrh	r3, [r3, #6]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d004      	beq.n	8004584 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800457a:	6839      	ldr	r1, [r7, #0]
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f891 	bl	80046a4 <USBD_CtlError>
        break;
 8004582:	e01a      	b.n	80045ba <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f043 0202 	orr.w	r2, r3, #2
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	330c      	adds	r3, #12
 80045a4:	2202      	movs	r2, #2
 80045a6:	4619      	mov	r1, r3
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f8e5 	bl	8004778 <USBD_CtlSendData>
      break;
 80045ae:	e004      	b.n	80045ba <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80045b0:	6839      	ldr	r1, [r7, #0]
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f876 	bl	80046a4 <USBD_CtlError>
      break;
 80045b8:	bf00      	nop
  }
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	885b      	ldrh	r3, [r3, #2]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d106      	bne.n	80045e2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f929 	bl	8004834 <USBD_CtlSendStatus>
  }
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045fa:	3b01      	subs	r3, #1
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d80b      	bhi.n	8004618 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	885b      	ldrh	r3, [r3, #2]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d10c      	bne.n	8004622 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f90f 	bl	8004834 <USBD_CtlSendStatus>
      }
      break;
 8004616:	e004      	b.n	8004622 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8004618:	6839      	ldr	r1, [r7, #0]
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f842 	bl	80046a4 <USBD_CtlError>
      break;
 8004620:	e000      	b.n	8004624 <USBD_ClrFeature+0x3a>
      break;
 8004622:	bf00      	nop
  }
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	785a      	ldrb	r2, [r3, #1]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	3302      	adds	r3, #2
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	b29a      	uxth	r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	3303      	adds	r3, #3
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	b29b      	uxth	r3, r3
 800465a:	4413      	add	r3, r2
 800465c:	b29a      	uxth	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	3304      	adds	r3, #4
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	b29a      	uxth	r2, r3
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	3305      	adds	r3, #5
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b29b      	uxth	r3, r3
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	b29b      	uxth	r3, r3
 8004676:	4413      	add	r3, r2
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	3306      	adds	r3, #6
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	b29a      	uxth	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	3307      	adds	r3, #7
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	b29b      	uxth	r3, r3
 8004692:	4413      	add	r3, r2
 8004694:	b29a      	uxth	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	80da      	strh	r2, [r3, #6]

}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80046ae:	2180      	movs	r1, #128	; 0x80
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f002 fbeb 	bl	8006e8c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80046b6:	2100      	movs	r1, #0
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f002 fbe7 	bl	8006e8c <USBD_LL_StallEP>
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b086      	sub	sp, #24
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d032      	beq.n	8004742 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f834 	bl	800474a <USBD_GetLen>
 80046e2:	4603      	mov	r3, r0
 80046e4:	3301      	adds	r3, #1
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	75fa      	strb	r2, [r7, #23]
 80046f6:	461a      	mov	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4413      	add	r3, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	7812      	ldrb	r2, [r2, #0]
 8004700:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	75fa      	strb	r2, [r7, #23]
 8004708:	461a      	mov	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	2203      	movs	r2, #3
 8004710:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8004712:	e012      	b.n	800473a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	60fa      	str	r2, [r7, #12]
 800471a:	7dfa      	ldrb	r2, [r7, #23]
 800471c:	1c51      	adds	r1, r2, #1
 800471e:	75f9      	strb	r1, [r7, #23]
 8004720:	4611      	mov	r1, r2
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	440a      	add	r2, r1
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	75fa      	strb	r2, [r7, #23]
 8004730:	461a      	mov	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4413      	add	r3, r2
 8004736:	2200      	movs	r2, #0
 8004738:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e8      	bne.n	8004714 <USBD_GetString+0x4e>
    }
  }
}
 8004742:	bf00      	nop
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8004756:	e005      	b.n	8004764 <USBD_GetLen+0x1a>
  {
    len++;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	3301      	adds	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3301      	adds	r3, #1
 8004762:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f5      	bne.n	8004758 <USBD_GetLen+0xe>
  }

  return len;
 800476c:	7bfb      	ldrb	r3, [r7, #15]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr

08004778 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	4613      	mov	r3, r2
 8004784:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2202      	movs	r2, #2
 800478a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8004794:	88fa      	ldrh	r2, [r7, #6]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	2100      	movs	r1, #0
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f002 fbf5 	bl	8006f90 <USBD_LL_Transmit>

  return USBD_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	4613      	mov	r3, r2
 80047bc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	2100      	movs	r1, #0
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f002 fbe3 	bl	8006f90 <USBD_LL_Transmit>

  return USBD_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2203      	movs	r2, #3
 80047e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80047ea:	88fa      	ldrh	r2, [r7, #6]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80047f2:	88fa      	ldrh	r2, [r7, #6]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	2100      	movs	r1, #0
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f002 fbe8 	bl	8006fd6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	4613      	mov	r3, r2
 800481c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	2100      	movs	r1, #0
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f002 fbd6 	bl	8006fd6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2204      	movs	r2, #4
 8004840:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004844:	2300      	movs	r3, #0
 8004846:	2200      	movs	r2, #0
 8004848:	2100      	movs	r1, #0
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f002 fba0 	bl	8006f90 <USBD_LL_Transmit>

  return USBD_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2205      	movs	r2, #5
 8004866:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800486a:	2300      	movs	r3, #0
 800486c:	2200      	movs	r2, #0
 800486e:	2100      	movs	r1, #0
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f002 fbb0 	bl	8006fd6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800488e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004892:	2b84      	cmp	r3, #132	; 0x84
 8004894:	d005      	beq.n	80048a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004896:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	3303      	adds	r3, #3
 80048a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80048a2:	68fb      	ldr	r3, [r7, #12]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr

080048ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80048b2:	f000 fd1b 	bl	80052ec <vTaskStartScheduler>
  
  return osOK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}

080048bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80048bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048be:	b087      	sub	sp, #28
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685c      	ldr	r4, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048d2:	b29e      	uxth	r6, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff ffd0 	bl	8004880 <makeFreeRtosPriority>
 80048e0:	4602      	mov	r2, r0
 80048e2:	f107 030c 	add.w	r3, r7, #12
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	9200      	str	r2, [sp, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	4632      	mov	r2, r6
 80048ee:	4629      	mov	r1, r5
 80048f0:	4620      	mov	r0, r4
 80048f2:	f000 fb9e 	bl	8005032 <xTaskCreate>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d001      	beq.n	8004900 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80048fc:	2300      	movs	r3, #0
 80048fe:	e000      	b.n	8004902 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8004900:	68fb      	ldr	r3, [r7, #12]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800490a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <osDelay+0x16>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	e000      	b.n	8004922 <osDelay+0x18>
 8004920:	2301      	movs	r3, #1
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fcae 	bl	8005284 <vTaskDelay>
  
  return osOK;
 8004928:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f103 0208 	add.w	r2, r3, #8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f04f 32ff 	mov.w	r2, #4294967295
 800494a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f103 0208 	add.w	r2, r3, #8
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f103 0208 	add.w	r2, r3, #8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr

08004970 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	601a      	str	r2, [r3, #0]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d103      	bne.n	80049ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e00c      	b.n	8004a08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3308      	adds	r3, #8
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e002      	b.n	80049fc <vListInsert+0x2e>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d2f6      	bcs.n	80049f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6892      	ldr	r2, [r2, #8]
 8004a54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6852      	ldr	r2, [r2, #4]
 8004a5e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d103      	bne.n	8004a72 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	1e5a      	subs	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	e7fe      	b.n	8004ab6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004ab8:	f001 fa86 	bl	8005fc8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	68f9      	ldr	r1, [r7, #12]
 8004ac6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	441a      	add	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	68f9      	ldr	r1, [r7, #12]
 8004aec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	441a      	add	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	22ff      	movs	r2, #255	; 0xff
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	22ff      	movs	r2, #255	; 0xff
 8004b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d114      	bne.n	8004b38 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01a      	beq.n	8004b4c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3310      	adds	r3, #16
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fe10 	bl	8005740 <xTaskRemoveFromEventList>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d012      	beq.n	8004b4c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b26:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <xQueueGenericReset+0xcc>)
 8004b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	e009      	b.n	8004b4c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3310      	adds	r3, #16
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fef8 	bl	8004932 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3324      	adds	r3, #36	; 0x24
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff fef3 	bl	8004932 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b4c:	f001 fa6a 	bl	8006024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b50:	2301      	movs	r3, #1
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	e000ed04 	.word	0xe000ed04

08004b60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	; 0x28
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <xQueueGenericCreate+0x28>
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	e7fe      	b.n	8004b86 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	e004      	b.n	8004b9e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	3348      	adds	r3, #72	; 0x48
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 fb06 	bl	80061b4 <pvPortMalloc>
 8004ba8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00b      	beq.n	8004bc8 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	3348      	adds	r3, #72	; 0x48
 8004bb4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bb6:	79fa      	ldrb	r2, [r7, #7]
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f805 	bl	8004bd2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
	}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	e002      	b.n	8004bf4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c00:	2101      	movs	r1, #1
 8004c02:	69b8      	ldr	r0, [r7, #24]
 8004c04:	f7ff ff44 	bl	8004a90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08e      	sub	sp, #56	; 0x38
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <xQueueGiveFromISR+0x28>
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	623b      	str	r3, [r7, #32]
 8004c36:	e7fe      	b.n	8004c36 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d009      	beq.n	8004c54 <xQueueGiveFromISR+0x44>
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	e7fe      	b.n	8004c52 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d103      	bne.n	8004c64 <xQueueGiveFromISR+0x54>
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <xQueueGiveFromISR+0x58>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <xQueueGiveFromISR+0x5a>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <xQueueGiveFromISR+0x72>
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	61bb      	str	r3, [r7, #24]
 8004c80:	e7fe      	b.n	8004c80 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c82:	f001 fa5b 	bl	800613c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c86:	f3ef 8211 	mrs	r2, BASEPRI
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	617a      	str	r2, [r7, #20]
 8004c9c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d22b      	bcs.n	8004d0a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d112      	bne.n	8004cf4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d016      	beq.n	8004d04 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	3324      	adds	r3, #36	; 0x24
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fd30 	bl	8005740 <xTaskRemoveFromEventList>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00e      	beq.n	8004d04 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00b      	beq.n	8004d04 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e007      	b.n	8004d04 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	b25a      	sxtb	r2, r3
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d04:	2301      	movs	r3, #1
 8004d06:	637b      	str	r3, [r7, #52]	; 0x34
 8004d08:	e001      	b.n	8004d0e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d10:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3738      	adds	r7, #56	; 0x38
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08e      	sub	sp, #56	; 0x38
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004d36:	2300      	movs	r3, #0
 8004d38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d109      	bne.n	8004d54 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	e7fe      	b.n	8004d52 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d009      	beq.n	8004d70 <xQueueSemaphoreTake+0x4c>
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	e7fe      	b.n	8004d6e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d70:	f000 fe82 	bl	8005a78 <xTaskGetSchedulerState>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <xQueueSemaphoreTake+0x5c>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <xQueueSemaphoreTake+0x60>
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <xQueueSemaphoreTake+0x62>
 8004d84:	2300      	movs	r3, #0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <xQueueSemaphoreTake+0x7a>
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	e7fe      	b.n	8004d9c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d9e:	f001 f913 	bl	8005fc8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d024      	beq.n	8004df8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	1e5a      	subs	r2, r3, #1
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004dbe:	f000 ff9d 	bl	8005cfc <pvTaskIncrementMutexHeldCount>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00f      	beq.n	8004df0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd2:	3310      	adds	r3, #16
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fcb3 	bl	8005740 <xTaskRemoveFromEventList>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004de0:	4b53      	ldr	r3, [pc, #332]	; (8004f30 <xQueueSemaphoreTake+0x20c>)
 8004de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004df0:	f001 f918 	bl	8006024 <vPortExitCritical>
				return pdPASS;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e096      	b.n	8004f26 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d110      	bne.n	8004e20 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d009      	beq.n	8004e18 <xQueueSemaphoreTake+0xf4>
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e7fe      	b.n	8004e16 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004e18:	f001 f904 	bl	8006024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e082      	b.n	8004f26 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e26:	f107 030c 	add.w	r3, r7, #12
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fcea 	bl	8005804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e34:	f001 f8f6 	bl	8006024 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e38:	f000 fa9e 	bl	8005378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e3c:	f001 f8c4 	bl	8005fc8 <vPortEnterCritical>
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e46:	b25b      	sxtb	r3, r3
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4c:	d103      	bne.n	8004e56 <xQueueSemaphoreTake+0x132>
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e5c:	b25b      	sxtb	r3, r3
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d103      	bne.n	8004e6c <xQueueSemaphoreTake+0x148>
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e6c:	f001 f8da 	bl	8006024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e70:	463a      	mov	r2, r7
 8004e72:	f107 030c 	add.w	r3, r7, #12
 8004e76:	4611      	mov	r1, r2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fcd9 	bl	8005830 <xTaskCheckForTimeOut>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d132      	bne.n	8004eea <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e86:	f000 f8be 	bl	8005006 <prvIsQueueEmpty>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d026      	beq.n	8004ede <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d109      	bne.n	8004eac <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004e98:	f001 f896 	bl	8005fc8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fe07 	bl	8005ab4 <xTaskPriorityInherit>
 8004ea6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004ea8:	f001 f8bc 	bl	8006024 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	3324      	adds	r3, #36	; 0x24
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fc1f 	bl	80056f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004eba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ebc:	f000 f851 	bl	8004f62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ec0:	f000 fa68 	bl	8005394 <xTaskResumeAll>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f47f af69 	bne.w	8004d9e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004ecc:	4b18      	ldr	r3, [pc, #96]	; (8004f30 <xQueueSemaphoreTake+0x20c>)
 8004ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	e75f      	b.n	8004d9e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004ede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ee0:	f000 f83f 	bl	8004f62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ee4:	f000 fa56 	bl	8005394 <xTaskResumeAll>
 8004ee8:	e759      	b.n	8004d9e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004eea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004eec:	f000 f839 	bl	8004f62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ef0:	f000 fa50 	bl	8005394 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ef6:	f000 f886 	bl	8005006 <prvIsQueueEmpty>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f43f af4e 	beq.w	8004d9e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00d      	beq.n	8004f24 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004f08:	f001 f85e 	bl	8005fc8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004f0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f0e:	f000 f811 	bl	8004f34 <prvGetDisinheritPriorityAfterTimeout>
 8004f12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fe50 	bl	8005bc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f20:	f001 f880 	bl	8006024 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3738      	adds	r7, #56	; 0x38
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d006      	beq.n	8004f52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1c3 0307 	rsb	r3, r3, #7
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	e001      	b.n	8004f56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004f56:	68fb      	ldr	r3, [r7, #12]
	}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f6a:	f001 f82d 	bl	8005fc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f74:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f76:	e011      	b.n	8004f9c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d012      	beq.n	8004fa6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3324      	adds	r3, #36	; 0x24
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fbdb 	bl	8005740 <xTaskRemoveFromEventList>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f90:	f000 fcae 	bl	80058f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	dce9      	bgt.n	8004f78 <prvUnlockQueue+0x16>
 8004fa4:	e000      	b.n	8004fa8 <prvUnlockQueue+0x46>
					break;
 8004fa6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	22ff      	movs	r2, #255	; 0xff
 8004fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004fb0:	f001 f838 	bl	8006024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fb4:	f001 f808 	bl	8005fc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fbe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fc0:	e011      	b.n	8004fe6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d012      	beq.n	8004ff0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3310      	adds	r3, #16
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fbb6 	bl	8005740 <xTaskRemoveFromEventList>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fda:	f000 fc89 	bl	80058f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fde:	7bbb      	ldrb	r3, [r7, #14]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dce9      	bgt.n	8004fc2 <prvUnlockQueue+0x60>
 8004fee:	e000      	b.n	8004ff2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ff0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	22ff      	movs	r2, #255	; 0xff
 8004ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ffa:	f001 f813 	bl	8006024 <vPortExitCritical>
}
 8004ffe:	bf00      	nop
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800500e:	f000 ffdb 	bl	8005fc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	2b00      	cmp	r3, #0
 8005018:	d102      	bne.n	8005020 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800501a:	2301      	movs	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	e001      	b.n	8005024 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005024:	f000 fffe 	bl	8006024 <vPortExitCritical>

	return xReturn;
 8005028:	68fb      	ldr	r3, [r7, #12]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005032:	b580      	push	{r7, lr}
 8005034:	b08c      	sub	sp, #48	; 0x30
 8005036:	af04      	add	r7, sp, #16
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	4613      	mov	r3, r2
 8005040:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4618      	mov	r0, r3
 8005048:	f001 f8b4 	bl	80061b4 <pvPortMalloc>
 800504c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00e      	beq.n	8005072 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005054:	2054      	movs	r0, #84	; 0x54
 8005056:	f001 f8ad 	bl	80061b4 <pvPortMalloc>
 800505a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
 8005068:	e005      	b.n	8005076 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800506a:	6978      	ldr	r0, [r7, #20]
 800506c:	f001 f964 	bl	8006338 <vPortFree>
 8005070:	e001      	b.n	8005076 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d013      	beq.n	80050a4 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800507c:	88fa      	ldrh	r2, [r7, #6]
 800507e:	2300      	movs	r3, #0
 8005080:	9303      	str	r3, [sp, #12]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	9302      	str	r3, [sp, #8]
 8005086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005088:	9301      	str	r3, [sp, #4]
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f80e 	bl	80050b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005098:	69f8      	ldr	r0, [r7, #28]
 800509a:	f000 f889 	bl	80051b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800509e:	2301      	movs	r3, #1
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	e002      	b.n	80050aa <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050aa:	69bb      	ldr	r3, [r7, #24]
	}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050cc:	3b01      	subs	r3, #1
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f023 0307 	bic.w	r3, r3, #7
 80050da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <prvInitialiseNewTask+0x46>
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	e7fe      	b.n	80050f8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	e012      	b.n	8005126 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	7819      	ldrb	r1, [r3, #0]
 8005108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	3334      	adds	r3, #52	; 0x34
 8005110:	460a      	mov	r2, r1
 8005112:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d006      	beq.n	800512e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	3301      	adds	r3, #1
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	2b0f      	cmp	r3, #15
 800512a:	d9e9      	bls.n	8005100 <prvInitialiseNewTask+0x4c>
 800512c:	e000      	b.n	8005130 <prvInitialiseNewTask+0x7c>
		{
			break;
 800512e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	2b06      	cmp	r3, #6
 800513c:	d901      	bls.n	8005142 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800513e:	2306      	movs	r3, #6
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005146:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800514c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	2200      	movs	r2, #0
 8005152:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	3304      	adds	r3, #4
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fc09 	bl	8004970 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	3318      	adds	r3, #24
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff fc04 	bl	8004970 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	f1c3 0207 	rsb	r2, r3, #7
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	2200      	movs	r2, #0
 8005182:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	68f9      	ldr	r1, [r7, #12]
 8005190:	69b8      	ldr	r0, [r7, #24]
 8005192:	f000 fe2d 	bl	8005df0 <pxPortInitialiseStack>
 8005196:	4602      	mov	r2, r0
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051a8:	bf00      	nop
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051b8:	f000 ff06 	bl	8005fc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051bc:	4b2a      	ldr	r3, [pc, #168]	; (8005268 <prvAddNewTaskToReadyList+0xb8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	4a29      	ldr	r2, [pc, #164]	; (8005268 <prvAddNewTaskToReadyList+0xb8>)
 80051c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051c6:	4b29      	ldr	r3, [pc, #164]	; (800526c <prvAddNewTaskToReadyList+0xbc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051ce:	4a27      	ldr	r2, [pc, #156]	; (800526c <prvAddNewTaskToReadyList+0xbc>)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051d4:	4b24      	ldr	r3, [pc, #144]	; (8005268 <prvAddNewTaskToReadyList+0xb8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d110      	bne.n	80051fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051dc:	f000 fbac 	bl	8005938 <prvInitialiseTaskLists>
 80051e0:	e00d      	b.n	80051fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051e2:	4b23      	ldr	r3, [pc, #140]	; (8005270 <prvAddNewTaskToReadyList+0xc0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051ea:	4b20      	ldr	r3, [pc, #128]	; (800526c <prvAddNewTaskToReadyList+0xbc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d802      	bhi.n	80051fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051f8:	4a1c      	ldr	r2, [pc, #112]	; (800526c <prvAddNewTaskToReadyList+0xbc>)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051fe:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <prvAddNewTaskToReadyList+0xc4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	4a1b      	ldr	r2, [pc, #108]	; (8005274 <prvAddNewTaskToReadyList+0xc4>)
 8005206:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	2201      	movs	r2, #1
 800520e:	409a      	lsls	r2, r3
 8005210:	4b19      	ldr	r3, [pc, #100]	; (8005278 <prvAddNewTaskToReadyList+0xc8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4313      	orrs	r3, r2
 8005216:	4a18      	ldr	r2, [pc, #96]	; (8005278 <prvAddNewTaskToReadyList+0xc8>)
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4a15      	ldr	r2, [pc, #84]	; (800527c <prvAddNewTaskToReadyList+0xcc>)
 8005228:	441a      	add	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3304      	adds	r3, #4
 800522e:	4619      	mov	r1, r3
 8005230:	4610      	mov	r0, r2
 8005232:	f7ff fba9 	bl	8004988 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005236:	f000 fef5 	bl	8006024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800523a:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <prvAddNewTaskToReadyList+0xc0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00e      	beq.n	8005260 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005242:	4b0a      	ldr	r3, [pc, #40]	; (800526c <prvAddNewTaskToReadyList+0xbc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	429a      	cmp	r2, r3
 800524e:	d207      	bcs.n	8005260 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <prvAddNewTaskToReadyList+0xd0>)
 8005252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	200002a0 	.word	0x200002a0
 800526c:	200001a0 	.word	0x200001a0
 8005270:	200002ac 	.word	0x200002ac
 8005274:	200002bc 	.word	0x200002bc
 8005278:	200002a8 	.word	0x200002a8
 800527c:	200001a4 	.word	0x200001a4
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d016      	beq.n	80052c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005296:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <vTaskDelay+0x60>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d009      	beq.n	80052b2 <vTaskDelay+0x2e>
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	60bb      	str	r3, [r7, #8]
 80052b0:	e7fe      	b.n	80052b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80052b2:	f000 f861 	bl	8005378 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052b6:	2100      	movs	r1, #0
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fd33 	bl	8005d24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052be:	f000 f869 	bl	8005394 <xTaskResumeAll>
 80052c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d107      	bne.n	80052da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80052ca:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <vTaskDelay+0x64>)
 80052cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	200002c8 	.word	0x200002c8
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80052f2:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <vTaskStartScheduler+0x74>)
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	2300      	movs	r3, #0
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	2300      	movs	r3, #0
 80052fc:	2280      	movs	r2, #128	; 0x80
 80052fe:	4919      	ldr	r1, [pc, #100]	; (8005364 <vTaskStartScheduler+0x78>)
 8005300:	4819      	ldr	r0, [pc, #100]	; (8005368 <vTaskStartScheduler+0x7c>)
 8005302:	f7ff fe96 	bl	8005032 <xTaskCreate>
 8005306:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d115      	bne.n	800533a <vTaskStartScheduler+0x4e>
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005320:	4b12      	ldr	r3, [pc, #72]	; (800536c <vTaskStartScheduler+0x80>)
 8005322:	f04f 32ff 	mov.w	r2, #4294967295
 8005326:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005328:	4b11      	ldr	r3, [pc, #68]	; (8005370 <vTaskStartScheduler+0x84>)
 800532a:	2201      	movs	r2, #1
 800532c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800532e:	4b11      	ldr	r3, [pc, #68]	; (8005374 <vTaskStartScheduler+0x88>)
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005334:	f000 fdd8 	bl	8005ee8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005338:	e00d      	b.n	8005356 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d109      	bne.n	8005356 <vTaskStartScheduler+0x6a>
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	607b      	str	r3, [r7, #4]
 8005354:	e7fe      	b.n	8005354 <vTaskStartScheduler+0x68>
}
 8005356:	bf00      	nop
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	200002c4 	.word	0x200002c4
 8005364:	080073e0 	.word	0x080073e0
 8005368:	08005909 	.word	0x08005909
 800536c:	200002c0 	.word	0x200002c0
 8005370:	200002ac 	.word	0x200002ac
 8005374:	200002a4 	.word	0x200002a4

08005378 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800537c:	4b04      	ldr	r3, [pc, #16]	; (8005390 <vTaskSuspendAll+0x18>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3301      	adds	r3, #1
 8005382:	4a03      	ldr	r2, [pc, #12]	; (8005390 <vTaskSuspendAll+0x18>)
 8005384:	6013      	str	r3, [r2, #0]
}
 8005386:	bf00      	nop
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	200002c8 	.word	0x200002c8

08005394 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053a2:	4b41      	ldr	r3, [pc, #260]	; (80054a8 <xTaskResumeAll+0x114>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <xTaskResumeAll+0x2a>
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	e7fe      	b.n	80053bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053be:	f000 fe03 	bl	8005fc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053c2:	4b39      	ldr	r3, [pc, #228]	; (80054a8 <xTaskResumeAll+0x114>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	4a37      	ldr	r2, [pc, #220]	; (80054a8 <xTaskResumeAll+0x114>)
 80053ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053cc:	4b36      	ldr	r3, [pc, #216]	; (80054a8 <xTaskResumeAll+0x114>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d161      	bne.n	8005498 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053d4:	4b35      	ldr	r3, [pc, #212]	; (80054ac <xTaskResumeAll+0x118>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d05d      	beq.n	8005498 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053dc:	e02e      	b.n	800543c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80053de:	4b34      	ldr	r3, [pc, #208]	; (80054b0 <xTaskResumeAll+0x11c>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3318      	adds	r3, #24
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff fb27 	bl	8004a3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff fb22 	bl	8004a3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	2201      	movs	r2, #1
 8005400:	409a      	lsls	r2, r3
 8005402:	4b2c      	ldr	r3, [pc, #176]	; (80054b4 <xTaskResumeAll+0x120>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4313      	orrs	r3, r2
 8005408:	4a2a      	ldr	r2, [pc, #168]	; (80054b4 <xTaskResumeAll+0x120>)
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4a27      	ldr	r2, [pc, #156]	; (80054b8 <xTaskResumeAll+0x124>)
 800541a:	441a      	add	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f7ff fab0 	bl	8004988 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542c:	4b23      	ldr	r3, [pc, #140]	; (80054bc <xTaskResumeAll+0x128>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	429a      	cmp	r2, r3
 8005434:	d302      	bcc.n	800543c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005436:	4b22      	ldr	r3, [pc, #136]	; (80054c0 <xTaskResumeAll+0x12c>)
 8005438:	2201      	movs	r2, #1
 800543a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800543c:	4b1c      	ldr	r3, [pc, #112]	; (80054b0 <xTaskResumeAll+0x11c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1cc      	bne.n	80053de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800544a:	f000 faf1 	bl	8005a30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <xTaskResumeAll+0x130>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d010      	beq.n	800547c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800545a:	f000 f837 	bl	80054cc <xTaskIncrementTick>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005464:	4b16      	ldr	r3, [pc, #88]	; (80054c0 <xTaskResumeAll+0x12c>)
 8005466:	2201      	movs	r2, #1
 8005468:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3b01      	subs	r3, #1
 800546e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f1      	bne.n	800545a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005476:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <xTaskResumeAll+0x130>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800547c:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <xTaskResumeAll+0x12c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d009      	beq.n	8005498 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005488:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <xTaskResumeAll+0x134>)
 800548a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005498:	f000 fdc4 	bl	8006024 <vPortExitCritical>

	return xAlreadyYielded;
 800549c:	68bb      	ldr	r3, [r7, #8]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	200002c8 	.word	0x200002c8
 80054ac:	200002a0 	.word	0x200002a0
 80054b0:	20000260 	.word	0x20000260
 80054b4:	200002a8 	.word	0x200002a8
 80054b8:	200001a4 	.word	0x200001a4
 80054bc:	200001a0 	.word	0x200001a0
 80054c0:	200002b4 	.word	0x200002b4
 80054c4:	200002b0 	.word	0x200002b0
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054d6:	4b50      	ldr	r3, [pc, #320]	; (8005618 <xTaskIncrementTick+0x14c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f040 808c 	bne.w	80055f8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054e0:	4b4e      	ldr	r3, [pc, #312]	; (800561c <xTaskIncrementTick+0x150>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3301      	adds	r3, #1
 80054e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054e8:	4a4c      	ldr	r2, [pc, #304]	; (800561c <xTaskIncrementTick+0x150>)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d11f      	bne.n	8005534 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80054f4:	4b4a      	ldr	r3, [pc, #296]	; (8005620 <xTaskIncrementTick+0x154>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d009      	beq.n	8005512 <xTaskIncrementTick+0x46>
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	e7fe      	b.n	8005510 <xTaskIncrementTick+0x44>
 8005512:	4b43      	ldr	r3, [pc, #268]	; (8005620 <xTaskIncrementTick+0x154>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	4b42      	ldr	r3, [pc, #264]	; (8005624 <xTaskIncrementTick+0x158>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a40      	ldr	r2, [pc, #256]	; (8005620 <xTaskIncrementTick+0x154>)
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	4a40      	ldr	r2, [pc, #256]	; (8005624 <xTaskIncrementTick+0x158>)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	4b40      	ldr	r3, [pc, #256]	; (8005628 <xTaskIncrementTick+0x15c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3301      	adds	r3, #1
 800552c:	4a3e      	ldr	r2, [pc, #248]	; (8005628 <xTaskIncrementTick+0x15c>)
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	f000 fa7e 	bl	8005a30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005534:	4b3d      	ldr	r3, [pc, #244]	; (800562c <xTaskIncrementTick+0x160>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	429a      	cmp	r2, r3
 800553c:	d34d      	bcc.n	80055da <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800553e:	4b38      	ldr	r3, [pc, #224]	; (8005620 <xTaskIncrementTick+0x154>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <xTaskIncrementTick+0x80>
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <xTaskIncrementTick+0x82>
 800554c:	2300      	movs	r3, #0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005552:	4b36      	ldr	r3, [pc, #216]	; (800562c <xTaskIncrementTick+0x160>)
 8005554:	f04f 32ff 	mov.w	r2, #4294967295
 8005558:	601a      	str	r2, [r3, #0]
					break;
 800555a:	e03e      	b.n	80055da <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800555c:	4b30      	ldr	r3, [pc, #192]	; (8005620 <xTaskIncrementTick+0x154>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	d203      	bcs.n	800557c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005574:	4a2d      	ldr	r2, [pc, #180]	; (800562c <xTaskIncrementTick+0x160>)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6013      	str	r3, [r2, #0]
						break;
 800557a:	e02e      	b.n	80055da <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	3304      	adds	r3, #4
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff fa5c 	bl	8004a3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	2b00      	cmp	r3, #0
 800558c:	d004      	beq.n	8005598 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	3318      	adds	r3, #24
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff fa53 	bl	8004a3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	2201      	movs	r2, #1
 800559e:	409a      	lsls	r2, r3
 80055a0:	4b23      	ldr	r3, [pc, #140]	; (8005630 <xTaskIncrementTick+0x164>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	4a22      	ldr	r2, [pc, #136]	; (8005630 <xTaskIncrementTick+0x164>)
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4a1f      	ldr	r2, [pc, #124]	; (8005634 <xTaskIncrementTick+0x168>)
 80055b8:	441a      	add	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	3304      	adds	r3, #4
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7ff f9e1 	bl	8004988 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ca:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <xTaskIncrementTick+0x16c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d3b4      	bcc.n	800553e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80055d4:	2301      	movs	r3, #1
 80055d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055d8:	e7b1      	b.n	800553e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055da:	4b17      	ldr	r3, [pc, #92]	; (8005638 <xTaskIncrementTick+0x16c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e0:	4914      	ldr	r1, [pc, #80]	; (8005634 <xTaskIncrementTick+0x168>)
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d907      	bls.n	8005602 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80055f2:	2301      	movs	r3, #1
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e004      	b.n	8005602 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80055f8:	4b10      	ldr	r3, [pc, #64]	; (800563c <xTaskIncrementTick+0x170>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3301      	adds	r3, #1
 80055fe:	4a0f      	ldr	r2, [pc, #60]	; (800563c <xTaskIncrementTick+0x170>)
 8005600:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005602:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <xTaskIncrementTick+0x174>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800560a:	2301      	movs	r3, #1
 800560c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800560e:	697b      	ldr	r3, [r7, #20]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	200002c8 	.word	0x200002c8
 800561c:	200002a4 	.word	0x200002a4
 8005620:	20000258 	.word	0x20000258
 8005624:	2000025c 	.word	0x2000025c
 8005628:	200002b8 	.word	0x200002b8
 800562c:	200002c0 	.word	0x200002c0
 8005630:	200002a8 	.word	0x200002a8
 8005634:	200001a4 	.word	0x200001a4
 8005638:	200001a0 	.word	0x200001a0
 800563c:	200002b0 	.word	0x200002b0
 8005640:	200002b4 	.word	0x200002b4

08005644 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800564a:	4b26      	ldr	r3, [pc, #152]	; (80056e4 <vTaskSwitchContext+0xa0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005652:	4b25      	ldr	r3, [pc, #148]	; (80056e8 <vTaskSwitchContext+0xa4>)
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005658:	e03e      	b.n	80056d8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800565a:	4b23      	ldr	r3, [pc, #140]	; (80056e8 <vTaskSwitchContext+0xa4>)
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005660:	4b22      	ldr	r3, [pc, #136]	; (80056ec <vTaskSwitchContext+0xa8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	fab3 f383 	clz	r3, r3
 800566c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800566e:	7afb      	ldrb	r3, [r7, #11]
 8005670:	f1c3 031f 	rsb	r3, r3, #31
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	491e      	ldr	r1, [pc, #120]	; (80056f0 <vTaskSwitchContext+0xac>)
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <vTaskSwitchContext+0x5a>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	607b      	str	r3, [r7, #4]
 800569c:	e7fe      	b.n	800569c <vTaskSwitchContext+0x58>
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4a11      	ldr	r2, [pc, #68]	; (80056f0 <vTaskSwitchContext+0xac>)
 80056aa:	4413      	add	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	605a      	str	r2, [r3, #4]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	3308      	adds	r3, #8
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d104      	bne.n	80056ce <vTaskSwitchContext+0x8a>
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4a07      	ldr	r2, [pc, #28]	; (80056f4 <vTaskSwitchContext+0xb0>)
 80056d6:	6013      	str	r3, [r2, #0]
}
 80056d8:	bf00      	nop
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	200002c8 	.word	0x200002c8
 80056e8:	200002b4 	.word	0x200002b4
 80056ec:	200002a8 	.word	0x200002a8
 80056f0:	200001a4 	.word	0x200001a4
 80056f4:	200001a0 	.word	0x200001a0

080056f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d109      	bne.n	800571c <vTaskPlaceOnEventList+0x24>
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	e7fe      	b.n	800571a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800571c:	4b07      	ldr	r3, [pc, #28]	; (800573c <vTaskPlaceOnEventList+0x44>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3318      	adds	r3, #24
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff f952 	bl	80049ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800572a:	2101      	movs	r1, #1
 800572c:	6838      	ldr	r0, [r7, #0]
 800572e:	f000 faf9 	bl	8005d24 <prvAddCurrentTaskToDelayedList>
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	200001a0 	.word	0x200001a0

08005740 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <xTaskRemoveFromEventList+0x2a>
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	e7fe      	b.n	8005768 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	3318      	adds	r3, #24
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff f965 	bl	8004a3e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005774:	4b1d      	ldr	r3, [pc, #116]	; (80057ec <xTaskRemoveFromEventList+0xac>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d11c      	bne.n	80057b6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	3304      	adds	r3, #4
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff f95c 	bl	8004a3e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	2201      	movs	r2, #1
 800578c:	409a      	lsls	r2, r3
 800578e:	4b18      	ldr	r3, [pc, #96]	; (80057f0 <xTaskRemoveFromEventList+0xb0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4313      	orrs	r3, r2
 8005794:	4a16      	ldr	r2, [pc, #88]	; (80057f0 <xTaskRemoveFromEventList+0xb0>)
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <xTaskRemoveFromEventList+0xb4>)
 80057a6:	441a      	add	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f7ff f8ea 	bl	8004988 <vListInsertEnd>
 80057b4:	e005      	b.n	80057c2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	3318      	adds	r3, #24
 80057ba:	4619      	mov	r1, r3
 80057bc:	480e      	ldr	r0, [pc, #56]	; (80057f8 <xTaskRemoveFromEventList+0xb8>)
 80057be:	f7ff f8e3 	bl	8004988 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <xTaskRemoveFromEventList+0xbc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d905      	bls.n	80057dc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057d0:	2301      	movs	r3, #1
 80057d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057d4:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <xTaskRemoveFromEventList+0xc0>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	e001      	b.n	80057e0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80057e0:	697b      	ldr	r3, [r7, #20]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	200002c8 	.word	0x200002c8
 80057f0:	200002a8 	.word	0x200002a8
 80057f4:	200001a4 	.word	0x200001a4
 80057f8:	20000260 	.word	0x20000260
 80057fc:	200001a0 	.word	0x200001a0
 8005800:	200002b4 	.word	0x200002b4

08005804 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <vTaskInternalSetTimeOutState+0x24>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <vTaskInternalSetTimeOutState+0x28>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	605a      	str	r2, [r3, #4]
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	200002b8 	.word	0x200002b8
 800582c:	200002a4 	.word	0x200002a4

08005830 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d109      	bne.n	8005854 <xTaskCheckForTimeOut+0x24>
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	e7fe      	b.n	8005852 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d109      	bne.n	800586e <xTaskCheckForTimeOut+0x3e>
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	e7fe      	b.n	800586c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800586e:	f000 fbab 	bl	8005fc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005872:	4b1d      	ldr	r3, [pc, #116]	; (80058e8 <xTaskCheckForTimeOut+0xb8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588a:	d102      	bne.n	8005892 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800588c:	2300      	movs	r3, #0
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	e023      	b.n	80058da <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	4b15      	ldr	r3, [pc, #84]	; (80058ec <xTaskCheckForTimeOut+0xbc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d007      	beq.n	80058ae <xTaskCheckForTimeOut+0x7e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d302      	bcc.n	80058ae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058a8:	2301      	movs	r3, #1
 80058aa:	61fb      	str	r3, [r7, #28]
 80058ac:	e015      	b.n	80058da <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d20b      	bcs.n	80058d0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	1ad2      	subs	r2, r2, r3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff ff9d 	bl	8005804 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
 80058ce:	e004      	b.n	80058da <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058d6:	2301      	movs	r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058da:	f000 fba3 	bl	8006024 <vPortExitCritical>

	return xReturn;
 80058de:	69fb      	ldr	r3, [r7, #28]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3720      	adds	r7, #32
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	200002a4 	.word	0x200002a4
 80058ec:	200002b8 	.word	0x200002b8

080058f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058f4:	4b03      	ldr	r3, [pc, #12]	; (8005904 <vTaskMissedYield+0x14>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
}
 80058fa:	bf00      	nop
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	200002b4 	.word	0x200002b4

08005908 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005910:	f000 f852 	bl	80059b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <prvIdleTask+0x28>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d9f9      	bls.n	8005910 <prvIdleTask+0x8>
			{
				taskYIELD();
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <prvIdleTask+0x2c>)
 800591e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800592c:	e7f0      	b.n	8005910 <prvIdleTask+0x8>
 800592e:	bf00      	nop
 8005930:	200001a4 	.word	0x200001a4
 8005934:	e000ed04 	.word	0xe000ed04

08005938 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800593e:	2300      	movs	r3, #0
 8005940:	607b      	str	r3, [r7, #4]
 8005942:	e00c      	b.n	800595e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4a12      	ldr	r2, [pc, #72]	; (8005998 <prvInitialiseTaskLists+0x60>)
 8005950:	4413      	add	r3, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe ffed 	bl	8004932 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3301      	adds	r3, #1
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b06      	cmp	r3, #6
 8005962:	d9ef      	bls.n	8005944 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005964:	480d      	ldr	r0, [pc, #52]	; (800599c <prvInitialiseTaskLists+0x64>)
 8005966:	f7fe ffe4 	bl	8004932 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800596a:	480d      	ldr	r0, [pc, #52]	; (80059a0 <prvInitialiseTaskLists+0x68>)
 800596c:	f7fe ffe1 	bl	8004932 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005970:	480c      	ldr	r0, [pc, #48]	; (80059a4 <prvInitialiseTaskLists+0x6c>)
 8005972:	f7fe ffde 	bl	8004932 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005976:	480c      	ldr	r0, [pc, #48]	; (80059a8 <prvInitialiseTaskLists+0x70>)
 8005978:	f7fe ffdb 	bl	8004932 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800597c:	480b      	ldr	r0, [pc, #44]	; (80059ac <prvInitialiseTaskLists+0x74>)
 800597e:	f7fe ffd8 	bl	8004932 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005982:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <prvInitialiseTaskLists+0x78>)
 8005984:	4a05      	ldr	r2, [pc, #20]	; (800599c <prvInitialiseTaskLists+0x64>)
 8005986:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <prvInitialiseTaskLists+0x7c>)
 800598a:	4a05      	ldr	r2, [pc, #20]	; (80059a0 <prvInitialiseTaskLists+0x68>)
 800598c:	601a      	str	r2, [r3, #0]
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	200001a4 	.word	0x200001a4
 800599c:	20000230 	.word	0x20000230
 80059a0:	20000244 	.word	0x20000244
 80059a4:	20000260 	.word	0x20000260
 80059a8:	20000274 	.word	0x20000274
 80059ac:	2000028c 	.word	0x2000028c
 80059b0:	20000258 	.word	0x20000258
 80059b4:	2000025c 	.word	0x2000025c

080059b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059be:	e019      	b.n	80059f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059c0:	f000 fb02 	bl	8005fc8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <prvCheckTasksWaitingTermination+0x4c>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff f834 	bl	8004a3e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059d6:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <prvCheckTasksWaitingTermination+0x50>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3b01      	subs	r3, #1
 80059dc:	4a0a      	ldr	r2, [pc, #40]	; (8005a08 <prvCheckTasksWaitingTermination+0x50>)
 80059de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059e0:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <prvCheckTasksWaitingTermination+0x54>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <prvCheckTasksWaitingTermination+0x54>)
 80059e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059ea:	f000 fb1b 	bl	8006024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f80e 	bl	8005a10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <prvCheckTasksWaitingTermination+0x54>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e1      	bne.n	80059c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20000274 	.word	0x20000274
 8005a08:	200002a0 	.word	0x200002a0
 8005a0c:	20000288 	.word	0x20000288

08005a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fc8b 	bl	8006338 <vPortFree>
			vPortFree( pxTCB );
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fc88 	bl	8006338 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a28:	bf00      	nop
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a36:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <prvResetNextTaskUnblockTime+0x40>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <prvResetNextTaskUnblockTime+0x14>
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <prvResetNextTaskUnblockTime+0x16>
 8005a44:	2300      	movs	r3, #0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d004      	beq.n	8005a54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a4a:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <prvResetNextTaskUnblockTime+0x44>)
 8005a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a52:	e008      	b.n	8005a66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a54:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <prvResetNextTaskUnblockTime+0x40>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	4a04      	ldr	r2, [pc, #16]	; (8005a74 <prvResetNextTaskUnblockTime+0x44>)
 8005a64:	6013      	str	r3, [r2, #0]
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr
 8005a70:	20000258 	.word	0x20000258
 8005a74:	200002c0 	.word	0x200002c0

08005a78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <xTaskGetSchedulerState+0x34>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d102      	bne.n	8005a8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a86:	2301      	movs	r3, #1
 8005a88:	607b      	str	r3, [r7, #4]
 8005a8a:	e008      	b.n	8005a9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a8c:	4b08      	ldr	r3, [pc, #32]	; (8005ab0 <xTaskGetSchedulerState+0x38>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d102      	bne.n	8005a9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a94:	2302      	movs	r3, #2
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	e001      	b.n	8005a9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a9e:	687b      	ldr	r3, [r7, #4]
	}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	200002ac 	.word	0x200002ac
 8005ab0:	200002c8 	.word	0x200002c8

08005ab4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d06e      	beq.n	8005ba8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ace:	4b39      	ldr	r3, [pc, #228]	; (8005bb4 <xTaskPriorityInherit+0x100>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d25e      	bcs.n	8005b96 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	db06      	blt.n	8005aee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ae0:	4b34      	ldr	r3, [pc, #208]	; (8005bb4 <xTaskPriorityInherit+0x100>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	f1c3 0207 	rsb	r2, r3, #7
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6959      	ldr	r1, [r3, #20]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4a2e      	ldr	r2, [pc, #184]	; (8005bb8 <xTaskPriorityInherit+0x104>)
 8005b00:	4413      	add	r3, r2
 8005b02:	4299      	cmp	r1, r3
 8005b04:	d101      	bne.n	8005b0a <xTaskPriorityInherit+0x56>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <xTaskPriorityInherit+0x58>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d03a      	beq.n	8005b86 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fe ff92 	bl	8004a3e <uxListRemove>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d115      	bne.n	8005b4c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b24:	4924      	ldr	r1, [pc, #144]	; (8005bb8 <xTaskPriorityInherit+0x104>)
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <xTaskPriorityInherit+0x98>
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	43da      	mvns	r2, r3
 8005b42:	4b1e      	ldr	r3, [pc, #120]	; (8005bbc <xTaskPriorityInherit+0x108>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4013      	ands	r3, r2
 8005b48:	4a1c      	ldr	r2, [pc, #112]	; (8005bbc <xTaskPriorityInherit+0x108>)
 8005b4a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b4c:	4b19      	ldr	r3, [pc, #100]	; (8005bb4 <xTaskPriorityInherit+0x100>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	409a      	lsls	r2, r3
 8005b5e:	4b17      	ldr	r3, [pc, #92]	; (8005bbc <xTaskPriorityInherit+0x108>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	4a15      	ldr	r2, [pc, #84]	; (8005bbc <xTaskPriorityInherit+0x108>)
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4a10      	ldr	r2, [pc, #64]	; (8005bb8 <xTaskPriorityInherit+0x104>)
 8005b76:	441a      	add	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f7fe ff02 	bl	8004988 <vListInsertEnd>
 8005b84:	e004      	b.n	8005b90 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b86:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <xTaskPriorityInherit+0x100>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e008      	b.n	8005ba8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b9a:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <xTaskPriorityInherit+0x100>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d201      	bcs.n	8005ba8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
	}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	200001a0 	.word	0x200001a0
 8005bb8:	200001a4 	.word	0x200001a4
 8005bbc:	200002a8 	.word	0x200002a8

08005bc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 8086 	beq.w	8005ce6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e7fe      	b.n	8005bf4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d902      	bls.n	8005c06 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	61fb      	str	r3, [r7, #28]
 8005c04:	e002      	b.n	8005c0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d067      	beq.n	8005ce6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d162      	bne.n	8005ce6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c20:	4b33      	ldr	r3, [pc, #204]	; (8005cf0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d109      	bne.n	8005c3e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	60bb      	str	r3, [r7, #8]
 8005c3c:	e7fe      	b.n	8005c3c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	db04      	blt.n	8005c5c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f1c3 0207 	rsb	r2, r3, #7
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	6959      	ldr	r1, [r3, #20]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4a22      	ldr	r2, [pc, #136]	; (8005cf4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005c6c:	4413      	add	r3, r2
 8005c6e:	4299      	cmp	r1, r3
 8005c70:	d101      	bne.n	8005c76 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005c76:	2300      	movs	r3, #0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d034      	beq.n	8005ce6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fe fedc 	bl	8004a3e <uxListRemove>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d115      	bne.n	8005cb8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c90:	4918      	ldr	r1, [pc, #96]	; (8005cf4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	43da      	mvns	r2, r3
 8005cae:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	4a10      	ldr	r2, [pc, #64]	; (8005cf8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005cb6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	409a      	lsls	r2, r3
 8005cc0:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	4a0c      	ldr	r2, [pc, #48]	; (8005cf8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4a07      	ldr	r2, [pc, #28]	; (8005cf4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005cd8:	441a      	add	r2, r3
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	f7fe fe51 	bl	8004988 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ce6:	bf00      	nop
 8005ce8:	3720      	adds	r7, #32
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	200001a0 	.word	0x200001a0
 8005cf4:	200001a4 	.word	0x200001a4
 8005cf8:	200002a8 	.word	0x200002a8

08005cfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d004      	beq.n	8005d12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d0e:	3201      	adds	r2, #1
 8005d10:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005d12:	4b03      	ldr	r3, [pc, #12]	; (8005d20 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d14:	681b      	ldr	r3, [r3, #0]
	}
 8005d16:	4618      	mov	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bc80      	pop	{r7}
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	200001a0 	.word	0x200001a0

08005d24 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d2e:	4b29      	ldr	r3, [pc, #164]	; (8005dd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d34:	4b28      	ldr	r3, [pc, #160]	; (8005dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fe7f 	bl	8004a3e <uxListRemove>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10b      	bne.n	8005d5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005d46:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43da      	mvns	r2, r3
 8005d54:	4b21      	ldr	r3, [pc, #132]	; (8005ddc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	4a20      	ldr	r2, [pc, #128]	; (8005ddc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d64:	d10a      	bne.n	8005d7c <prvAddCurrentTaskToDelayedList+0x58>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d007      	beq.n	8005d7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4619      	mov	r1, r3
 8005d74:	481a      	ldr	r0, [pc, #104]	; (8005de0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d76:	f7fe fe07 	bl	8004988 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d7a:	e026      	b.n	8005dca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4413      	add	r3, r2
 8005d82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d84:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d209      	bcs.n	8005da8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d94:	4b13      	ldr	r3, [pc, #76]	; (8005de4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f7fe fe14 	bl	80049ce <vListInsert>
}
 8005da6:	e010      	b.n	8005dca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005da8:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3304      	adds	r3, #4
 8005db2:	4619      	mov	r1, r3
 8005db4:	4610      	mov	r0, r2
 8005db6:	f7fe fe0a 	bl	80049ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d202      	bcs.n	8005dca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005dc4:	4a09      	ldr	r2, [pc, #36]	; (8005dec <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6013      	str	r3, [r2, #0]
}
 8005dca:	bf00      	nop
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	200002a4 	.word	0x200002a4
 8005dd8:	200001a0 	.word	0x200001a0
 8005ddc:	200002a8 	.word	0x200002a8
 8005de0:	2000028c 	.word	0x2000028c
 8005de4:	2000025c 	.word	0x2000025c
 8005de8:	20000258 	.word	0x20000258
 8005dec:	200002c0 	.word	0x200002c0

08005df0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3b04      	subs	r3, #4
 8005e00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3b04      	subs	r3, #4
 8005e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f023 0201 	bic.w	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3b04      	subs	r3, #4
 8005e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e20:	4a08      	ldr	r2, [pc, #32]	; (8005e44 <pxPortInitialiseStack+0x54>)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3b14      	subs	r3, #20
 8005e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3b20      	subs	r3, #32
 8005e36:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e38:	68fb      	ldr	r3, [r7, #12]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr
 8005e44:	08005e49 	.word	0x08005e49

08005e48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e52:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <prvTaskExitError+0x4c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	d009      	beq.n	8005e70 <prvTaskExitError+0x28>
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	e7fe      	b.n	8005e6e <prvTaskExitError+0x26>
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e82:	bf00      	nop
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0fc      	beq.n	8005e84 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e8a:	bf00      	nop
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bc80      	pop	{r7}
 8005e92:	4770      	bx	lr
 8005e94:	20000118 	.word	0x20000118
	...

08005ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <pxCurrentTCBConst2>)
 8005ea2:	6819      	ldr	r1, [r3, #0]
 8005ea4:	6808      	ldr	r0, [r1, #0]
 8005ea6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005eaa:	f380 8809 	msr	PSP, r0
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f380 8811 	msr	BASEPRI, r0
 8005eba:	f04e 0e0d 	orr.w	lr, lr, #13
 8005ebe:	4770      	bx	lr

08005ec0 <pxCurrentTCBConst2>:
 8005ec0:	200001a0 	.word	0x200001a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop

08005ec8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005ec8:	4806      	ldr	r0, [pc, #24]	; (8005ee4 <prvPortStartFirstTask+0x1c>)
 8005eca:	6800      	ldr	r0, [r0, #0]
 8005ecc:	6800      	ldr	r0, [r0, #0]
 8005ece:	f380 8808 	msr	MSP, r0
 8005ed2:	b662      	cpsie	i
 8005ed4:	b661      	cpsie	f
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	df00      	svc	0
 8005ee0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ee2:	bf00      	nop
 8005ee4:	e000ed08 	.word	0xe000ed08

08005ee8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005eee:	4b31      	ldr	r3, [pc, #196]	; (8005fb4 <xPortStartScheduler+0xcc>)
 8005ef0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	22ff      	movs	r2, #255	; 0xff
 8005efe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	4b29      	ldr	r3, [pc, #164]	; (8005fb8 <xPortStartScheduler+0xd0>)
 8005f14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f16:	4b29      	ldr	r3, [pc, #164]	; (8005fbc <xPortStartScheduler+0xd4>)
 8005f18:	2207      	movs	r2, #7
 8005f1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f1c:	e009      	b.n	8005f32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005f1e:	4b27      	ldr	r3, [pc, #156]	; (8005fbc <xPortStartScheduler+0xd4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	4a25      	ldr	r2, [pc, #148]	; (8005fbc <xPortStartScheduler+0xd4>)
 8005f26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3a:	2b80      	cmp	r3, #128	; 0x80
 8005f3c:	d0ef      	beq.n	8005f1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f3e:	4b1f      	ldr	r3, [pc, #124]	; (8005fbc <xPortStartScheduler+0xd4>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1c3 0307 	rsb	r3, r3, #7
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d009      	beq.n	8005f5e <xPortStartScheduler+0x76>
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	60bb      	str	r3, [r7, #8]
 8005f5c:	e7fe      	b.n	8005f5c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f5e:	4b17      	ldr	r3, [pc, #92]	; (8005fbc <xPortStartScheduler+0xd4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	4a15      	ldr	r2, [pc, #84]	; (8005fbc <xPortStartScheduler+0xd4>)
 8005f66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f68:	4b14      	ldr	r3, [pc, #80]	; (8005fbc <xPortStartScheduler+0xd4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f70:	4a12      	ldr	r2, [pc, #72]	; (8005fbc <xPortStartScheduler+0xd4>)
 8005f72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f7c:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <xPortStartScheduler+0xd8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a0f      	ldr	r2, [pc, #60]	; (8005fc0 <xPortStartScheduler+0xd8>)
 8005f82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f88:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <xPortStartScheduler+0xd8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a0c      	ldr	r2, [pc, #48]	; (8005fc0 <xPortStartScheduler+0xd8>)
 8005f8e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f94:	f000 f8b0 	bl	80060f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f98:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <xPortStartScheduler+0xdc>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f9e:	f7ff ff93 	bl	8005ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fa2:	f7ff fb4f 	bl	8005644 <vTaskSwitchContext>
	prvTaskExitError();
 8005fa6:	f7ff ff4f 	bl	8005e48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	e000e400 	.word	0xe000e400
 8005fb8:	200002cc 	.word	0x200002cc
 8005fbc:	200002d0 	.word	0x200002d0
 8005fc0:	e000ed20 	.word	0xe000ed20
 8005fc4:	20000118 	.word	0x20000118

08005fc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	; (800601c <vPortEnterCritical+0x54>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	4a0d      	ldr	r2, [pc, #52]	; (800601c <vPortEnterCritical+0x54>)
 8005fe8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fea:	4b0c      	ldr	r3, [pc, #48]	; (800601c <vPortEnterCritical+0x54>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d10e      	bne.n	8006010 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <vPortEnterCritical+0x58>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <vPortEnterCritical+0x48>
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	603b      	str	r3, [r7, #0]
 800600e:	e7fe      	b.n	800600e <vPortEnterCritical+0x46>
	}
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	20000118 	.word	0x20000118
 8006020:	e000ed04 	.word	0xe000ed04

08006024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800602a:	4b10      	ldr	r3, [pc, #64]	; (800606c <vPortExitCritical+0x48>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d109      	bne.n	8006046 <vPortExitCritical+0x22>
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	607b      	str	r3, [r7, #4]
 8006044:	e7fe      	b.n	8006044 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006046:	4b09      	ldr	r3, [pc, #36]	; (800606c <vPortExitCritical+0x48>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3b01      	subs	r3, #1
 800604c:	4a07      	ldr	r2, [pc, #28]	; (800606c <vPortExitCritical+0x48>)
 800604e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006050:	4b06      	ldr	r3, [pc, #24]	; (800606c <vPortExitCritical+0x48>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d104      	bne.n	8006062 <vPortExitCritical+0x3e>
 8006058:	2300      	movs	r3, #0
 800605a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	bc80      	pop	{r7}
 800606a:	4770      	bx	lr
 800606c:	20000118 	.word	0x20000118

08006070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006070:	f3ef 8009 	mrs	r0, PSP
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <pxCurrentTCBConst>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006080:	6010      	str	r0, [r2, #0]
 8006082:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006086:	f04f 0050 	mov.w	r0, #80	; 0x50
 800608a:	f380 8811 	msr	BASEPRI, r0
 800608e:	f7ff fad9 	bl	8005644 <vTaskSwitchContext>
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8811 	msr	BASEPRI, r0
 800609a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800609e:	6819      	ldr	r1, [r3, #0]
 80060a0:	6808      	ldr	r0, [r1, #0]
 80060a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060a6:	f380 8809 	msr	PSP, r0
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	4770      	bx	lr

080060b0 <pxCurrentTCBConst>:
 80060b0:	200001a0 	.word	0x200001a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop

080060b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060d0:	f7ff f9fc 	bl	80054cc <xTaskIncrementTick>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060da:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <SysTick_Handler+0x3c>)
 80060dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	2300      	movs	r3, #0
 80060e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80060ec:	bf00      	nop
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	e000ed04 	.word	0xe000ed04

080060f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <vPortSetupTimerInterrupt+0x30>)
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006102:	4b0a      	ldr	r3, [pc, #40]	; (800612c <vPortSetupTimerInterrupt+0x34>)
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006108:	4b09      	ldr	r3, [pc, #36]	; (8006130 <vPortSetupTimerInterrupt+0x38>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a09      	ldr	r2, [pc, #36]	; (8006134 <vPortSetupTimerInterrupt+0x3c>)
 800610e:	fba2 2303 	umull	r2, r3, r2, r3
 8006112:	099b      	lsrs	r3, r3, #6
 8006114:	4a08      	ldr	r2, [pc, #32]	; (8006138 <vPortSetupTimerInterrupt+0x40>)
 8006116:	3b01      	subs	r3, #1
 8006118:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800611a:	4b03      	ldr	r3, [pc, #12]	; (8006128 <vPortSetupTimerInterrupt+0x30>)
 800611c:	2207      	movs	r2, #7
 800611e:	601a      	str	r2, [r3, #0]
}
 8006120:	bf00      	nop
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr
 8006128:	e000e010 	.word	0xe000e010
 800612c:	e000e018 	.word	0xe000e018
 8006130:	2000011c 	.word	0x2000011c
 8006134:	10624dd3 	.word	0x10624dd3
 8006138:	e000e014 	.word	0xe000e014

0800613c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006142:	f3ef 8305 	mrs	r3, IPSR
 8006146:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b0f      	cmp	r3, #15
 800614c:	d913      	bls.n	8006176 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800614e:	4a15      	ldr	r2, [pc, #84]	; (80061a4 <vPortValidateInterruptPriority+0x68>)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006158:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <vPortValidateInterruptPriority+0x6c>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	7afa      	ldrb	r2, [r7, #11]
 800615e:	429a      	cmp	r2, r3
 8006160:	d209      	bcs.n	8006176 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	607b      	str	r3, [r7, #4]
 8006174:	e7fe      	b.n	8006174 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006176:	4b0d      	ldr	r3, [pc, #52]	; (80061ac <vPortValidateInterruptPriority+0x70>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800617e:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <vPortValidateInterruptPriority+0x74>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d909      	bls.n	800619a <vPortValidateInterruptPriority+0x5e>
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	e7fe      	b.n	8006198 <vPortValidateInterruptPriority+0x5c>
	}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr
 80061a4:	e000e3f0 	.word	0xe000e3f0
 80061a8:	200002cc 	.word	0x200002cc
 80061ac:	e000ed0c 	.word	0xe000ed0c
 80061b0:	200002d0 	.word	0x200002d0

080061b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061c0:	f7ff f8da 	bl	8005378 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061c4:	4b57      	ldr	r3, [pc, #348]	; (8006324 <pvPortMalloc+0x170>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061cc:	f000 f90c 	bl	80063e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061d0:	4b55      	ldr	r3, [pc, #340]	; (8006328 <pvPortMalloc+0x174>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f040 808c 	bne.w	80062f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01c      	beq.n	800621e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80061e4:	2208      	movs	r2, #8
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4413      	add	r3, r2
 80061ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f003 0307 	and.w	r3, r3, #7
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d013      	beq.n	800621e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f023 0307 	bic.w	r3, r3, #7
 80061fc:	3308      	adds	r3, #8
 80061fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	2b00      	cmp	r3, #0
 8006208:	d009      	beq.n	800621e <pvPortMalloc+0x6a>
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e7fe      	b.n	800621c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d068      	beq.n	80062f6 <pvPortMalloc+0x142>
 8006224:	4b41      	ldr	r3, [pc, #260]	; (800632c <pvPortMalloc+0x178>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	429a      	cmp	r2, r3
 800622c:	d863      	bhi.n	80062f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800622e:	4b40      	ldr	r3, [pc, #256]	; (8006330 <pvPortMalloc+0x17c>)
 8006230:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006232:	4b3f      	ldr	r3, [pc, #252]	; (8006330 <pvPortMalloc+0x17c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006238:	e004      	b.n	8006244 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	429a      	cmp	r2, r3
 800624c:	d903      	bls.n	8006256 <pvPortMalloc+0xa2>
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f1      	bne.n	800623a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006256:	4b33      	ldr	r3, [pc, #204]	; (8006324 <pvPortMalloc+0x170>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625c:	429a      	cmp	r2, r3
 800625e:	d04a      	beq.n	80062f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2208      	movs	r2, #8
 8006266:	4413      	add	r3, r2
 8006268:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	1ad2      	subs	r2, r2, r3
 800627a:	2308      	movs	r3, #8
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	429a      	cmp	r2, r3
 8006280:	d91e      	bls.n	80062c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4413      	add	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	2b00      	cmp	r3, #0
 8006292:	d009      	beq.n	80062a8 <pvPortMalloc+0xf4>
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	613b      	str	r3, [r7, #16]
 80062a6:	e7fe      	b.n	80062a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	1ad2      	subs	r2, r2, r3
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062ba:	69b8      	ldr	r0, [r7, #24]
 80062bc:	f000 f8f6 	bl	80064ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062c0:	4b1a      	ldr	r3, [pc, #104]	; (800632c <pvPortMalloc+0x178>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	4a18      	ldr	r2, [pc, #96]	; (800632c <pvPortMalloc+0x178>)
 80062cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062ce:	4b17      	ldr	r3, [pc, #92]	; (800632c <pvPortMalloc+0x178>)
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b18      	ldr	r3, [pc, #96]	; (8006334 <pvPortMalloc+0x180>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d203      	bcs.n	80062e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062da:	4b14      	ldr	r3, [pc, #80]	; (800632c <pvPortMalloc+0x178>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a15      	ldr	r2, [pc, #84]	; (8006334 <pvPortMalloc+0x180>)
 80062e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	4b10      	ldr	r3, [pc, #64]	; (8006328 <pvPortMalloc+0x174>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062f6:	f7ff f84d 	bl	8005394 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <pvPortMalloc+0x164>
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	e7fe      	b.n	8006316 <pvPortMalloc+0x162>
	return pvReturn;
 8006318:	69fb      	ldr	r3, [r7, #28]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3728      	adds	r7, #40	; 0x28
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20000edc 	.word	0x20000edc
 8006328:	20000ee8 	.word	0x20000ee8
 800632c:	20000ee0 	.word	0x20000ee0
 8006330:	20000ed4 	.word	0x20000ed4
 8006334:	20000ee4 	.word	0x20000ee4

08006338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d046      	beq.n	80063d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800634a:	2308      	movs	r3, #8
 800634c:	425b      	negs	r3, r3
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4413      	add	r3, r2
 8006352:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	4b20      	ldr	r3, [pc, #128]	; (80063e0 <vPortFree+0xa8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4013      	ands	r3, r2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d109      	bne.n	800637a <vPortFree+0x42>
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	e7fe      	b.n	8006378 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <vPortFree+0x5e>
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	e7fe      	b.n	8006394 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <vPortFree+0xa8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4013      	ands	r3, r2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d019      	beq.n	80063d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d115      	bne.n	80063d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <vPortFree+0xa8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	43db      	mvns	r3, r3
 80063b6:	401a      	ands	r2, r3
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063bc:	f7fe ffdc 	bl	8005378 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <vPortFree+0xac>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4413      	add	r3, r2
 80063ca:	4a06      	ldr	r2, [pc, #24]	; (80063e4 <vPortFree+0xac>)
 80063cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063ce:	6938      	ldr	r0, [r7, #16]
 80063d0:	f000 f86c 	bl	80064ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80063d4:	f7fe ffde 	bl	8005394 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063d8:	bf00      	nop
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20000ee8 	.word	0x20000ee8
 80063e4:	20000ee0 	.word	0x20000ee0

080063e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80063f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063f4:	4b27      	ldr	r3, [pc, #156]	; (8006494 <prvHeapInit+0xac>)
 80063f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00c      	beq.n	800641c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3307      	adds	r3, #7
 8006406:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0307 	bic.w	r3, r3, #7
 800640e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	4a1f      	ldr	r2, [pc, #124]	; (8006494 <prvHeapInit+0xac>)
 8006418:	4413      	add	r3, r2
 800641a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006420:	4a1d      	ldr	r2, [pc, #116]	; (8006498 <prvHeapInit+0xb0>)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006426:	4b1c      	ldr	r3, [pc, #112]	; (8006498 <prvHeapInit+0xb0>)
 8006428:	2200      	movs	r2, #0
 800642a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	4413      	add	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006434:	2208      	movs	r2, #8
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0307 	bic.w	r3, r3, #7
 8006442:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4a15      	ldr	r2, [pc, #84]	; (800649c <prvHeapInit+0xb4>)
 8006448:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800644a:	4b14      	ldr	r3, [pc, #80]	; (800649c <prvHeapInit+0xb4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2200      	movs	r2, #0
 8006450:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006452:	4b12      	ldr	r3, [pc, #72]	; (800649c <prvHeapInit+0xb4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006468:	4b0c      	ldr	r3, [pc, #48]	; (800649c <prvHeapInit+0xb4>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	4a0a      	ldr	r2, [pc, #40]	; (80064a0 <prvHeapInit+0xb8>)
 8006476:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <prvHeapInit+0xbc>)
 800647e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006480:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <prvHeapInit+0xc0>)
 8006482:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006486:	601a      	str	r2, [r3, #0]
}
 8006488:	bf00      	nop
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	bc80      	pop	{r7}
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	200002d4 	.word	0x200002d4
 8006498:	20000ed4 	.word	0x20000ed4
 800649c:	20000edc 	.word	0x20000edc
 80064a0:	20000ee4 	.word	0x20000ee4
 80064a4:	20000ee0 	.word	0x20000ee0
 80064a8:	20000ee8 	.word	0x20000ee8

080064ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064b4:	4b27      	ldr	r3, [pc, #156]	; (8006554 <prvInsertBlockIntoFreeList+0xa8>)
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	e002      	b.n	80064c0 <prvInsertBlockIntoFreeList+0x14>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d8f7      	bhi.n	80064ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4413      	add	r3, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d108      	bne.n	80064ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	441a      	add	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	441a      	add	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d118      	bne.n	8006534 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	4b14      	ldr	r3, [pc, #80]	; (8006558 <prvInsertBlockIntoFreeList+0xac>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d00d      	beq.n	800652a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	441a      	add	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	e008      	b.n	800653c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800652a:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <prvInsertBlockIntoFreeList+0xac>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	e003      	b.n	800653c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	429a      	cmp	r2, r3
 8006542:	d002      	beq.n	800654a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800654a:	bf00      	nop
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	bc80      	pop	{r7}
 8006552:	4770      	bx	lr
 8006554:	20000ed4 	.word	0x20000ed4
 8006558:	20000edc 	.word	0x20000edc

0800655c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800655c:	b5b0      	push	{r4, r5, r7, lr}
 800655e:	b08a      	sub	sp, #40	; 0x28
 8006560:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006562:	f7f9 fdff 	bl	8000164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006566:	f000 f82d 	bl	80065c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800656a:	f000 f887 	bl	800667c <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800656e:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <main+0x58>)
 8006570:	f107 0414 	add.w	r4, r7, #20
 8006574:	461d      	mov	r5, r3
 8006576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800657e:	f107 0314 	add.w	r3, r7, #20
 8006582:	2100      	movs	r1, #0
 8006584:	4618      	mov	r0, r3
 8006586:	f7fe f999 	bl	80048bc <osThreadCreate>
 800658a:	4602      	mov	r2, r0
 800658c:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <main+0x5c>)
 800658e:	601a      	str	r2, [r3, #0]

  osThreadDef(ouveTask, ouvirTask, osPriorityNormal, 0, 128);
 8006590:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <main+0x60>)
 8006592:	463c      	mov	r4, r7
 8006594:	461d      	mov	r5, r3
 8006596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800659a:	682b      	ldr	r3, [r5, #0]
 800659c:	6023      	str	r3, [r4, #0]
   ouvirHandle = osThreadCreate(osThread(ouveTask), NULL);
 800659e:	463b      	mov	r3, r7
 80065a0:	2100      	movs	r1, #0
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe f98a 	bl	80048bc <osThreadCreate>
 80065a8:	4602      	mov	r2, r0
 80065aa:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <main+0x64>)
 80065ac:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80065ae:	f7fe f97e 	bl	80048ae <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80065b2:	e7fe      	b.n	80065b2 <main+0x56>
 80065b4:	080073f4 	.word	0x080073f4
 80065b8:	20001124 	.word	0x20001124
 80065bc:	08007414 	.word	0x08007414
 80065c0:	20001128 	.word	0x20001128

080065c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b094      	sub	sp, #80	; 0x50
 80065c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065ce:	2228      	movs	r2, #40	; 0x28
 80065d0:	2100      	movs	r1, #0
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fee5 	bl	80073a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065d8:	f107 0314 	add.w	r3, r7, #20
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	609a      	str	r2, [r3, #8]
 80065e4:	60da      	str	r2, [r3, #12]
 80065e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80065e8:	1d3b      	adds	r3, r7, #4
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	605a      	str	r2, [r3, #4]
 80065f0:	609a      	str	r2, [r3, #8]
 80065f2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80065f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80065fe:	2300      	movs	r3, #0
 8006600:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006602:	2301      	movs	r3, #1
 8006604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006606:	2302      	movs	r3, #2
 8006608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800660a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800660e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8006610:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006614:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800661a:	4618      	mov	r0, r3
 800661c:	f7fa fd94 	bl	8001148 <HAL_RCC_OscConfig>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8006626:	f000 f8d1 	bl	80067cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800662a:	230f      	movs	r3, #15
 800662c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800662e:	2302      	movs	r3, #2
 8006630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006632:	2300      	movs	r3, #0
 8006634:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800663a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800663c:	2300      	movs	r3, #0
 800663e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006640:	f107 0314 	add.w	r3, r7, #20
 8006644:	2101      	movs	r1, #1
 8006646:	4618      	mov	r0, r3
 8006648:	f7fa fffe 	bl	8001648 <HAL_RCC_ClockConfig>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8006652:	f000 f8bb 	bl	80067cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006656:	2310      	movs	r3, #16
 8006658:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800665a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800665e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006660:	1d3b      	adds	r3, r7, #4
 8006662:	4618      	mov	r0, r3
 8006664:	f7fb f9a8 	bl	80019b8 <HAL_RCCEx_PeriphCLKConfig>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800666e:	f000 f8ad 	bl	80067cc <Error_Handler>
  }
}
 8006672:	bf00      	nop
 8006674:	3750      	adds	r7, #80	; 0x50
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006682:	4b0e      	ldr	r3, [pc, #56]	; (80066bc <MX_GPIO_Init+0x40>)
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	4a0d      	ldr	r2, [pc, #52]	; (80066bc <MX_GPIO_Init+0x40>)
 8006688:	f043 0320 	orr.w	r3, r3, #32
 800668c:	6193      	str	r3, [r2, #24]
 800668e:	4b0b      	ldr	r3, [pc, #44]	; (80066bc <MX_GPIO_Init+0x40>)
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	607b      	str	r3, [r7, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800669a:	4b08      	ldr	r3, [pc, #32]	; (80066bc <MX_GPIO_Init+0x40>)
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	4a07      	ldr	r2, [pc, #28]	; (80066bc <MX_GPIO_Init+0x40>)
 80066a0:	f043 0304 	orr.w	r3, r3, #4
 80066a4:	6193      	str	r3, [r2, #24]
 80066a6:	4b05      	ldr	r3, [pc, #20]	; (80066bc <MX_GPIO_Init+0x40>)
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	f003 0304 	and.w	r3, r3, #4
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]

}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bc80      	pop	{r7}
 80066ba:	4770      	bx	lr
 80066bc:	40021000 	.word	0x40021000

080066c0 <ouvirTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void ouvirTask(void const * argument)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b090      	sub	sp, #64	; 0x40
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]

	 // Criar semáfaro binário
	 // Esse semáfaro recebe sinal do callback CDC_Receive_FS
	 semafaroUsb = xSemaphoreCreateBinary();
 80066c8:	2203      	movs	r2, #3
 80066ca:	2100      	movs	r1, #0
 80066cc:	2001      	movs	r0, #1
 80066ce:	f7fe fa47 	bl	8004b60 <xQueueGenericCreate>
 80066d2:	4602      	mov	r2, r0
 80066d4:	4b2a      	ldr	r3, [pc, #168]	; (8006780 <ouvirTask+0xc0>)
 80066d6:	601a      	str	r2, [r3, #0]
	 uint8_t temp[12];
	 uint8_t i = 0;
 80066d8:	2300      	movs	r3, #0
 80066da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	 uint8_t pergunta_identificador[12] = {"*IDN?'"};
 80066de:	4a29      	ldr	r2, [pc, #164]	; (8006784 <ouvirTask+0xc4>)
 80066e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066e8:	6018      	str	r0, [r3, #0]
 80066ea:	3304      	adds	r3, #4
 80066ec:	8019      	strh	r1, [r3, #0]
 80066ee:	3302      	adds	r3, #2
 80066f0:	0c0a      	lsrs	r2, r1, #16
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	711a      	strb	r2, [r3, #4]
	 uint8_t resposta_identificador[12] = {"eaemen"};
 80066fe:	4a22      	ldr	r2, [pc, #136]	; (8006788 <ouvirTask+0xc8>)
 8006700:	f107 0318 	add.w	r3, r7, #24
 8006704:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006708:	6018      	str	r0, [r3, #0]
 800670a:	3304      	adds	r3, #4
 800670c:	8019      	strh	r1, [r3, #0]
 800670e:	3302      	adds	r3, #2
 8006710:	0c0a      	lsrs	r2, r1, #16
 8006712:	701a      	strb	r2, [r3, #0]
 8006714:	f107 031f 	add.w	r3, r7, #31
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	711a      	strb	r2, [r3, #4]
	  for(;;)
	  {
		  uint8_t temp[9] = "00:00:00";
 800671e:	4a1b      	ldr	r2, [pc, #108]	; (800678c <ouvirTask+0xcc>)
 8006720:	f107 030c 	add.w	r3, r7, #12
 8006724:	ca07      	ldmia	r2, {r0, r1, r2}
 8006726:	c303      	stmia	r3!, {r0, r1}
 8006728:	701a      	strb	r2, [r3, #0]
		  //Bloquear Tarefa até receber notificação do semáfaro
		 if( xSemaphoreTake( semafaroUsb ,10000) == pdTRUE )
 800672a:	4b15      	ldr	r3, [pc, #84]	; (8006780 <ouvirTask+0xc0>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f242 7110 	movw	r1, #10000	; 0x2710
 8006732:	4618      	mov	r0, r3
 8006734:	f7fe faf6 	bl	8004d24 <xQueueSemaphoreTake>
 8006738:	4603      	mov	r3, r0
 800673a:	2b01      	cmp	r3, #1
 800673c:	d1ef      	bne.n	800671e <ouvirTask+0x5e>
		 {
			  memcpy(temp,buffer_usb,9);
 800673e:	4a14      	ldr	r2, [pc, #80]	; (8006790 <ouvirTask+0xd0>)
 8006740:	f107 030c 	add.w	r3, r7, #12
 8006744:	6810      	ldr	r0, [r2, #0]
 8006746:	6851      	ldr	r1, [r2, #4]
 8006748:	c303      	stmia	r3!, {r0, r1}
 800674a:	7a12      	ldrb	r2, [r2, #8]
 800674c:	701a      	strb	r2, [r3, #0]
			  if(strcmp(temp,pergunta_identificador)==0)
 800674e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006752:	f107 030c 	add.w	r3, r7, #12
 8006756:	4611      	mov	r1, r2
 8006758:	4618      	mov	r0, r3
 800675a:	f7f9 fcf9 	bl	8000150 <strcmp>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d106      	bne.n	8006772 <ouvirTask+0xb2>
				  CDC_Transmit_FS(resposta_identificador,7);
 8006764:	f107 0318 	add.w	r3, r7, #24
 8006768:	2107      	movs	r1, #7
 800676a:	4618      	mov	r0, r3
 800676c:	f000 f9f2 	bl	8006b54 <CDC_Transmit_FS>
 8006770:	e7d5      	b.n	800671e <ouvirTask+0x5e>
			  else
				  CDC_Transmit_FS(temp,9);
 8006772:	f107 030c 	add.w	r3, r7, #12
 8006776:	2109      	movs	r1, #9
 8006778:	4618      	mov	r0, r3
 800677a:	f000 f9eb 	bl	8006b54 <CDC_Transmit_FS>
	  {
 800677e:	e7ce      	b.n	800671e <ouvirTask+0x5e>
 8006780:	20001114 	.word	0x20001114
 8006784:	08007428 	.word	0x08007428
 8006788:	08007434 	.word	0x08007434
 800678c:	08007440 	.word	0x08007440
 8006790:	20001118 	.word	0x20001118

08006794 <StartDefaultTask>:

  /* USER CODE END 5 */
}

void StartDefaultTask(void const * argument)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
    
    
                 
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800679c:	f000 f90c 	bl	80069b8 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80067a0:	2001      	movs	r0, #1
 80067a2:	f7fe f8b2 	bl	800490a <osDelay>
 80067a6:	e7fb      	b.n	80067a0 <StartDefaultTask+0xc>

080067a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a04      	ldr	r2, [pc, #16]	; (80067c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d101      	bne.n	80067be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80067ba:	f7f9 fce9 	bl	8000190 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40000800 	.word	0x40000800

080067cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80067d0:	bf00      	nop
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr

080067d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80067de:	4b18      	ldr	r3, [pc, #96]	; (8006840 <HAL_MspInit+0x68>)
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	4a17      	ldr	r2, [pc, #92]	; (8006840 <HAL_MspInit+0x68>)
 80067e4:	f043 0301 	orr.w	r3, r3, #1
 80067e8:	6193      	str	r3, [r2, #24]
 80067ea:	4b15      	ldr	r3, [pc, #84]	; (8006840 <HAL_MspInit+0x68>)
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	60bb      	str	r3, [r7, #8]
 80067f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067f6:	4b12      	ldr	r3, [pc, #72]	; (8006840 <HAL_MspInit+0x68>)
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	4a11      	ldr	r2, [pc, #68]	; (8006840 <HAL_MspInit+0x68>)
 80067fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006800:	61d3      	str	r3, [r2, #28]
 8006802:	4b0f      	ldr	r3, [pc, #60]	; (8006840 <HAL_MspInit+0x68>)
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680a:	607b      	str	r3, [r7, #4]
 800680c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800680e:	2200      	movs	r2, #0
 8006810:	210f      	movs	r1, #15
 8006812:	f06f 0001 	mvn.w	r0, #1
 8006816:	f7f9 fd8c 	bl	8000332 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800681a:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <HAL_MspInit+0x6c>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	4a04      	ldr	r2, [pc, #16]	; (8006844 <HAL_MspInit+0x6c>)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40021000 	.word	0x40021000
 8006844:	40010000 	.word	0x40010000

08006848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08c      	sub	sp, #48	; 0x30
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8006858:	2200      	movs	r2, #0
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	201e      	movs	r0, #30
 800685e:	f7f9 fd68 	bl	8000332 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8006862:	201e      	movs	r0, #30
 8006864:	f7f9 fd81 	bl	800036a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8006868:	4b1f      	ldr	r3, [pc, #124]	; (80068e8 <HAL_InitTick+0xa0>)
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	4a1e      	ldr	r2, [pc, #120]	; (80068e8 <HAL_InitTick+0xa0>)
 800686e:	f043 0304 	orr.w	r3, r3, #4
 8006872:	61d3      	str	r3, [r2, #28]
 8006874:	4b1c      	ldr	r3, [pc, #112]	; (80068e8 <HAL_InitTick+0xa0>)
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006880:	f107 0210 	add.w	r2, r7, #16
 8006884:	f107 0314 	add.w	r3, r7, #20
 8006888:	4611      	mov	r1, r2
 800688a:	4618      	mov	r0, r3
 800688c:	f7fb f846 	bl	800191c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006890:	f7fb f830 	bl	80018f4 <HAL_RCC_GetPCLK1Freq>
 8006894:	4603      	mov	r3, r0
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	4a13      	ldr	r2, [pc, #76]	; (80068ec <HAL_InitTick+0xa4>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	0c9b      	lsrs	r3, r3, #18
 80068a4:	3b01      	subs	r3, #1
 80068a6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80068a8:	4b11      	ldr	r3, [pc, #68]	; (80068f0 <HAL_InitTick+0xa8>)
 80068aa:	4a12      	ldr	r2, [pc, #72]	; (80068f4 <HAL_InitTick+0xac>)
 80068ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80068ae:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <HAL_InitTick+0xa8>)
 80068b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80068b4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80068b6:	4a0e      	ldr	r2, [pc, #56]	; (80068f0 <HAL_InitTick+0xa8>)
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80068bc:	4b0c      	ldr	r3, [pc, #48]	; (80068f0 <HAL_InitTick+0xa8>)
 80068be:	2200      	movs	r2, #0
 80068c0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068c2:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <HAL_InitTick+0xa8>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80068c8:	4809      	ldr	r0, [pc, #36]	; (80068f0 <HAL_InitTick+0xa8>)
 80068ca:	f7fb f92b 	bl	8001b24 <HAL_TIM_Base_Init>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d104      	bne.n	80068de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80068d4:	4806      	ldr	r0, [pc, #24]	; (80068f0 <HAL_InitTick+0xa8>)
 80068d6:	f7fb f959 	bl	8001b8c <HAL_TIM_Base_Start_IT>
 80068da:	4603      	mov	r3, r0
 80068dc:	e000      	b.n	80068e0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3730      	adds	r7, #48	; 0x30
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40021000 	.word	0x40021000
 80068ec:	431bde83 	.word	0x431bde83
 80068f0:	2000112c 	.word	0x2000112c
 80068f4:	40000800 	.word	0x40000800

080068f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80068fc:	bf00      	nop
 80068fe:	46bd      	mov	sp, r7
 8006900:	bc80      	pop	{r7}
 8006902:	4770      	bx	lr

08006904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006908:	e7fe      	b.n	8006908 <HardFault_Handler+0x4>

0800690a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800690a:	b480      	push	{r7}
 800690c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800690e:	e7fe      	b.n	800690e <MemManage_Handler+0x4>

08006910 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006914:	e7fe      	b.n	8006914 <BusFault_Handler+0x4>

08006916 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006916:	b480      	push	{r7}
 8006918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800691a:	e7fe      	b.n	800691a <UsageFault_Handler+0x4>

0800691c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006920:	bf00      	nop
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr

08006928 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800692c:	4802      	ldr	r0, [pc, #8]	; (8006938 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800692e:	f7f9 fe31 	bl	8000594 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006932:	bf00      	nop
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20001c00 	.word	0x20001c00

0800693c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006940:	4802      	ldr	r0, [pc, #8]	; (800694c <TIM4_IRQHandler+0x10>)
 8006942:	f7fb f946 	bl	8001bd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006946:	bf00      	nop
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	2000112c 	.word	0x2000112c

08006950 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006950:	b480      	push	{r7}
 8006952:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006954:	4b15      	ldr	r3, [pc, #84]	; (80069ac <SystemInit+0x5c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a14      	ldr	r2, [pc, #80]	; (80069ac <SystemInit+0x5c>)
 800695a:	f043 0301 	orr.w	r3, r3, #1
 800695e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006960:	4b12      	ldr	r3, [pc, #72]	; (80069ac <SystemInit+0x5c>)
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	4911      	ldr	r1, [pc, #68]	; (80069ac <SystemInit+0x5c>)
 8006966:	4b12      	ldr	r3, [pc, #72]	; (80069b0 <SystemInit+0x60>)
 8006968:	4013      	ands	r3, r2
 800696a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800696c:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <SystemInit+0x5c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a0e      	ldr	r2, [pc, #56]	; (80069ac <SystemInit+0x5c>)
 8006972:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800697a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800697c:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <SystemInit+0x5c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <SystemInit+0x5c>)
 8006982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006986:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006988:	4b08      	ldr	r3, [pc, #32]	; (80069ac <SystemInit+0x5c>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	4a07      	ldr	r2, [pc, #28]	; (80069ac <SystemInit+0x5c>)
 800698e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006992:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006994:	4b05      	ldr	r3, [pc, #20]	; (80069ac <SystemInit+0x5c>)
 8006996:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800699a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <SystemInit+0x64>)
 800699e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80069a4:	bf00      	nop
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr
 80069ac:	40021000 	.word	0x40021000
 80069b0:	f8ff0000 	.word	0xf8ff0000
 80069b4:	e000ed00 	.word	0xe000ed00

080069b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80069bc:	2200      	movs	r2, #0
 80069be:	4912      	ldr	r1, [pc, #72]	; (8006a08 <MX_USB_DEVICE_Init+0x50>)
 80069c0:	4812      	ldr	r0, [pc, #72]	; (8006a0c <MX_USB_DEVICE_Init+0x54>)
 80069c2:	f7fc fed0 	bl	8003766 <USBD_Init>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80069cc:	f7ff fefe 	bl	80067cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80069d0:	490f      	ldr	r1, [pc, #60]	; (8006a10 <MX_USB_DEVICE_Init+0x58>)
 80069d2:	480e      	ldr	r0, [pc, #56]	; (8006a0c <MX_USB_DEVICE_Init+0x54>)
 80069d4:	f7fc fef2 	bl	80037bc <USBD_RegisterClass>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80069de:	f7ff fef5 	bl	80067cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80069e2:	490c      	ldr	r1, [pc, #48]	; (8006a14 <MX_USB_DEVICE_Init+0x5c>)
 80069e4:	4809      	ldr	r0, [pc, #36]	; (8006a0c <MX_USB_DEVICE_Init+0x54>)
 80069e6:	f7fc fe23 	bl	8003630 <USBD_CDC_RegisterInterface>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80069f0:	f7ff feec 	bl	80067cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80069f4:	4805      	ldr	r0, [pc, #20]	; (8006a0c <MX_USB_DEVICE_Init+0x54>)
 80069f6:	f7fc fefa 	bl	80037ee <USBD_Start>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006a00:	f7ff fee4 	bl	80067cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a04:	bf00      	nop
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20000130 	.word	0x20000130
 8006a0c:	2000116c 	.word	0x2000116c
 8006a10:	20000014 	.word	0x20000014
 8006a14:	20000120 	.word	0x20000120

08006a18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4905      	ldr	r1, [pc, #20]	; (8006a34 <CDC_Init_FS+0x1c>)
 8006a20:	4805      	ldr	r0, [pc, #20]	; (8006a38 <CDC_Init_FS+0x20>)
 8006a22:	f7fc fe1b 	bl	800365c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006a26:	4905      	ldr	r1, [pc, #20]	; (8006a3c <CDC_Init_FS+0x24>)
 8006a28:	4803      	ldr	r0, [pc, #12]	; (8006a38 <CDC_Init_FS+0x20>)
 8006a2a:	f7fc fe30 	bl	800368e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006a2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20001818 	.word	0x20001818
 8006a38:	2000116c 	.word	0x2000116c
 8006a3c:	20001430 	.word	0x20001430

08006a40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006a44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr
	...

08006a50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	6039      	str	r1, [r7, #0]
 8006a5a:	71fb      	strb	r3, [r7, #7]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	2b23      	cmp	r3, #35	; 0x23
 8006a64:	d84a      	bhi.n	8006afc <CDC_Control_FS+0xac>
 8006a66:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <CDC_Control_FS+0x1c>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006afd 	.word	0x08006afd
 8006a70:	08006afd 	.word	0x08006afd
 8006a74:	08006afd 	.word	0x08006afd
 8006a78:	08006afd 	.word	0x08006afd
 8006a7c:	08006afd 	.word	0x08006afd
 8006a80:	08006afd 	.word	0x08006afd
 8006a84:	08006afd 	.word	0x08006afd
 8006a88:	08006afd 	.word	0x08006afd
 8006a8c:	08006afd 	.word	0x08006afd
 8006a90:	08006afd 	.word	0x08006afd
 8006a94:	08006afd 	.word	0x08006afd
 8006a98:	08006afd 	.word	0x08006afd
 8006a9c:	08006afd 	.word	0x08006afd
 8006aa0:	08006afd 	.word	0x08006afd
 8006aa4:	08006afd 	.word	0x08006afd
 8006aa8:	08006afd 	.word	0x08006afd
 8006aac:	08006afd 	.word	0x08006afd
 8006ab0:	08006afd 	.word	0x08006afd
 8006ab4:	08006afd 	.word	0x08006afd
 8006ab8:	08006afd 	.word	0x08006afd
 8006abc:	08006afd 	.word	0x08006afd
 8006ac0:	08006afd 	.word	0x08006afd
 8006ac4:	08006afd 	.word	0x08006afd
 8006ac8:	08006afd 	.word	0x08006afd
 8006acc:	08006afd 	.word	0x08006afd
 8006ad0:	08006afd 	.word	0x08006afd
 8006ad4:	08006afd 	.word	0x08006afd
 8006ad8:	08006afd 	.word	0x08006afd
 8006adc:	08006afd 	.word	0x08006afd
 8006ae0:	08006afd 	.word	0x08006afd
 8006ae4:	08006afd 	.word	0x08006afd
 8006ae8:	08006afd 	.word	0x08006afd
 8006aec:	08006afd 	.word	0x08006afd
 8006af0:	08006afd 	.word	0x08006afd
 8006af4:	08006afd 	.word	0x08006afd
 8006af8:	08006afd 	.word	0x08006afd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006afc:	bf00      	nop
  }

  return (USBD_OK);
 8006afe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop

08006b0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	480a      	ldr	r0, [pc, #40]	; (8006b44 <CDC_Receive_FS+0x38>)
 8006b1a:	f7fc fdb8 	bl	800368e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006b1e:	4809      	ldr	r0, [pc, #36]	; (8006b44 <CDC_Receive_FS+0x38>)
 8006b20:	f7fc fdf7 	bl	8003712 <USBD_CDC_ReceivePacket>
  xSemaphoreGiveFromISR(semafaroUsb, &xHigherPriorityTaskWoken );
 8006b24:	4b08      	ldr	r3, [pc, #32]	; (8006b48 <CDC_Receive_FS+0x3c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4908      	ldr	r1, [pc, #32]	; (8006b4c <CDC_Receive_FS+0x40>)
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe f870 	bl	8004c10 <xQueueGiveFromISR>
  memcpy(buffer_usb, Buf, 11);
 8006b30:	220b      	movs	r2, #11
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	4806      	ldr	r0, [pc, #24]	; (8006b50 <CDC_Receive_FS+0x44>)
 8006b36:	f000 fc29 	bl	800738c <memcpy>
  return (USBD_OK);
 8006b3a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	2000116c 	.word	0x2000116c
 8006b48:	20001114 	.word	0x20001114
 8006b4c:	20000eec 	.word	0x20000eec
 8006b50:	20001118 	.word	0x20001118

08006b54 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006b64:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <CDC_Transmit_FS+0x48>)
 8006b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e00b      	b.n	8006b92 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006b7a:	887b      	ldrh	r3, [r7, #2]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	4806      	ldr	r0, [pc, #24]	; (8006b9c <CDC_Transmit_FS+0x48>)
 8006b82:	f7fc fd6b 	bl	800365c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006b86:	4805      	ldr	r0, [pc, #20]	; (8006b9c <CDC_Transmit_FS+0x48>)
 8006b88:	f7fc fd94 	bl	80036b4 <USBD_CDC_TransmitPacket>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	2000116c 	.word	0x2000116c

08006ba0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a0d      	ldr	r2, [pc, #52]	; (8006be4 <HAL_PCD_MspInit+0x44>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d113      	bne.n	8006bda <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <HAL_PCD_MspInit+0x48>)
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	4a0c      	ldr	r2, [pc, #48]	; (8006be8 <HAL_PCD_MspInit+0x48>)
 8006bb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006bbc:	61d3      	str	r3, [r2, #28]
 8006bbe:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <HAL_PCD_MspInit+0x48>)
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2105      	movs	r1, #5
 8006bce:	2014      	movs	r0, #20
 8006bd0:	f7f9 fbaf 	bl	8000332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006bd4:	2014      	movs	r0, #20
 8006bd6:	f7f9 fbc8 	bl	800036a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40005c00 	.word	0x40005c00
 8006be8:	40021000 	.word	0x40021000

08006bec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f7fc fe3b 	bl	800387e <USBD_LL_SetupStage>
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	015b      	lsls	r3, r3, #5
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	4619      	mov	r1, r3
 8006c34:	f7fc fe6e 	bl	8003914 <USBD_LL_DataOutStage>
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	015b      	lsls	r3, r3, #5
 8006c58:	4413      	add	r3, r2
 8006c5a:	333c      	adds	r3, #60	; 0x3c
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	78fb      	ldrb	r3, [r7, #3]
 8006c60:	4619      	mov	r1, r3
 8006c62:	f7fc fec8 	bl	80039f6 <USBD_LL_DataInStage>
}
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b082      	sub	sp, #8
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fc ffd8 	bl	8003c32 <USBD_LL_SOF>
}
 8006c82:	bf00      	nop
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c92:	2301      	movs	r3, #1
 8006c94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d001      	beq.n	8006ca2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006c9e:	f7ff fd95 	bl	80067cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ca8:	7bfa      	ldrb	r2, [r7, #15]
 8006caa:	4611      	mov	r1, r2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fc ff88 	bl	8003bc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fc ff41 	bl	8003b40 <USBD_LL_Reset>
}
 8006cbe:	bf00      	nop
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fc ff82 	bl	8003be0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ce4:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <HAL_PCD_SuspendCallback+0x30>)
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	4a03      	ldr	r2, [pc, #12]	; (8006cf8 <HAL_PCD_SuspendCallback+0x30>)
 8006cea:	f043 0306 	orr.w	r3, r3, #6
 8006cee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	e000ed00 	.word	0xe000ed00

08006cfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fc ff7c 	bl	8003c08 <USBD_LL_Resume>
}
 8006d10:	bf00      	nop
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006d20:	4a28      	ldr	r2, [pc, #160]	; (8006dc4 <USBD_LL_Init+0xac>)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a26      	ldr	r2, [pc, #152]	; (8006dc4 <USBD_LL_Init+0xac>)
 8006d2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006d30:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <USBD_LL_Init+0xac>)
 8006d32:	4a25      	ldr	r2, [pc, #148]	; (8006dc8 <USBD_LL_Init+0xb0>)
 8006d34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006d36:	4b23      	ldr	r3, [pc, #140]	; (8006dc4 <USBD_LL_Init+0xac>)
 8006d38:	2208      	movs	r2, #8
 8006d3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006d3c:	4b21      	ldr	r3, [pc, #132]	; (8006dc4 <USBD_LL_Init+0xac>)
 8006d3e:	2202      	movs	r2, #2
 8006d40:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006d42:	4b20      	ldr	r3, [pc, #128]	; (8006dc4 <USBD_LL_Init+0xac>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006d48:	4b1e      	ldr	r3, [pc, #120]	; (8006dc4 <USBD_LL_Init+0xac>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006d4e:	4b1d      	ldr	r3, [pc, #116]	; (8006dc4 <USBD_LL_Init+0xac>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006d54:	481b      	ldr	r0, [pc, #108]	; (8006dc4 <USBD_LL_Init+0xac>)
 8006d56:	f7f9 fb16 	bl	8000386 <HAL_PCD_Init>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006d60:	f7ff fd34 	bl	80067cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d6a:	2318      	movs	r3, #24
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2100      	movs	r1, #0
 8006d70:	f7fa f9ae 	bl	80010d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d7a:	2358      	movs	r3, #88	; 0x58
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2180      	movs	r1, #128	; 0x80
 8006d80:	f7fa f9a6 	bl	80010d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d8a:	23c0      	movs	r3, #192	; 0xc0
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2181      	movs	r1, #129	; 0x81
 8006d90:	f7fa f99e 	bl	80010d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d9a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006d9e:	2200      	movs	r2, #0
 8006da0:	2101      	movs	r1, #1
 8006da2:	f7fa f995 	bl	80010d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006db0:	2200      	movs	r2, #0
 8006db2:	2182      	movs	r1, #130	; 0x82
 8006db4:	f7fa f98c 	bl	80010d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20001c00 	.word	0x20001c00
 8006dc8:	40005c00 	.word	0x40005c00

08006dcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7f9 fbb0 	bl	8000548 <HAL_PCD_Start>
 8006de8:	4603      	mov	r3, r0
 8006dea:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 f948 	bl	8007084 <USBD_Get_USB_Status>
 8006df4:	4603      	mov	r3, r0
 8006df6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	4608      	mov	r0, r1
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	461a      	mov	r2, r3
 8006e10:	4603      	mov	r3, r0
 8006e12:	70fb      	strb	r3, [r7, #3]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70bb      	strb	r3, [r7, #2]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e2a:	78bb      	ldrb	r3, [r7, #2]
 8006e2c:	883a      	ldrh	r2, [r7, #0]
 8006e2e:	78f9      	ldrb	r1, [r7, #3]
 8006e30:	f7f9 fce3 	bl	80007fa <HAL_PCD_EP_Open>
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 f922 	bl	8007084 <USBD_Get_USB_Status>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e68:	78fa      	ldrb	r2, [r7, #3]
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7f9 fd24 	bl	80008ba <HAL_PCD_EP_Close>
 8006e72:	4603      	mov	r3, r0
 8006e74:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 f903 	bl	8007084 <USBD_Get_USB_Status>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ea6:	78fa      	ldrb	r2, [r7, #3]
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7f9 fdce 	bl	8000a4c <HAL_PCD_EP_SetStall>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 f8e4 	bl	8007084 <USBD_Get_USB_Status>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ee4:	78fa      	ldrb	r2, [r7, #3]
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7f9 fe09 	bl	8000b00 <HAL_PCD_EP_ClrStall>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 f8c5 	bl	8007084 <USBD_Get_USB_Status>
 8006efa:	4603      	mov	r3, r0
 8006efc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f1a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	da08      	bge.n	8006f36 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	015b      	lsls	r3, r3, #5
 8006f2e:	4413      	add	r3, r2
 8006f30:	332a      	adds	r3, #42	; 0x2a
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	e008      	b.n	8006f48 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006f36:	78fb      	ldrb	r3, [r7, #3]
 8006f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	015b      	lsls	r3, r3, #5
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006f46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr

08006f52 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f6c:	78fa      	ldrb	r2, [r7, #3]
 8006f6e:	4611      	mov	r1, r2
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7f9 fc1d 	bl	80007b0 <HAL_PCD_SetAddress>
 8006f76:	4603      	mov	r3, r0
 8006f78:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 f881 	bl	8007084 <USBD_Get_USB_Status>
 8006f82:	4603      	mov	r3, r0
 8006f84:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	607a      	str	r2, [r7, #4]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	72fb      	strb	r3, [r7, #11]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006fb2:	893b      	ldrh	r3, [r7, #8]
 8006fb4:	7af9      	ldrb	r1, [r7, #11]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	f7f9 fd0f 	bl	80009da <HAL_PCD_EP_Transmit>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 f85e 	bl	8007084 <USBD_Get_USB_Status>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006fcc:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b086      	sub	sp, #24
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	72fb      	strb	r3, [r7, #11]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ff8:	893b      	ldrh	r3, [r7, #8]
 8006ffa:	7af9      	ldrb	r1, [r7, #11]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	f7f9 fc9e 	bl	800093e <HAL_PCD_EP_Receive>
 8007002:	4603      	mov	r3, r0
 8007004:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007006:	7dfb      	ldrb	r3, [r7, #23]
 8007008:	4618      	mov	r0, r3
 800700a:	f000 f83b 	bl	8007084 <USBD_Get_USB_Status>
 800700e:	4603      	mov	r3, r0
 8007010:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8007012:	7dbb      	ldrb	r3, [r7, #22]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800702e:	78fa      	ldrb	r2, [r7, #3]
 8007030:	4611      	mov	r1, r2
 8007032:	4618      	mov	r0, r3
 8007034:	f7f9 fcbd 	bl	80009b2 <HAL_PCD_EP_GetRxCount>
 8007038:	4603      	mov	r3, r0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800704c:	4b02      	ldr	r3, [pc, #8]	; (8007058 <USBD_static_malloc+0x14>)
}
 800704e:	4618      	mov	r0, r3
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr
 8007058:	20000ef0 	.word	0x20000ef0

0800705c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]

}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	bc80      	pop	{r7}
 800706c:	4770      	bx	lr

0800706e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	460b      	mov	r3, r1
 8007078:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	bc80      	pop	{r7}
 8007082:	4770      	bx	lr

08007084 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	2b03      	cmp	r3, #3
 8007096:	d817      	bhi.n	80070c8 <USBD_Get_USB_Status+0x44>
 8007098:	a201      	add	r2, pc, #4	; (adr r2, 80070a0 <USBD_Get_USB_Status+0x1c>)
 800709a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709e:	bf00      	nop
 80070a0:	080070b1 	.word	0x080070b1
 80070a4:	080070b7 	.word	0x080070b7
 80070a8:	080070bd 	.word	0x080070bd
 80070ac:	080070c3 	.word	0x080070c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]
    break;
 80070b4:	e00b      	b.n	80070ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070b6:	2302      	movs	r3, #2
 80070b8:	73fb      	strb	r3, [r7, #15]
    break;
 80070ba:	e008      	b.n	80070ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070bc:	2301      	movs	r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]
    break;
 80070c0:	e005      	b.n	80070ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070c2:	2302      	movs	r3, #2
 80070c4:	73fb      	strb	r3, [r7, #15]
    break;
 80070c6:	e002      	b.n	80070ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80070c8:	2302      	movs	r3, #2
 80070ca:	73fb      	strb	r3, [r7, #15]
    break;
 80070cc:	bf00      	nop
  }
  return usb_status;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bc80      	pop	{r7}
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop

080070dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	6039      	str	r1, [r7, #0]
 80070e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2212      	movs	r2, #18
 80070ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070ee:	4b03      	ldr	r3, [pc, #12]	; (80070fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	2000014c 	.word	0x2000014c

08007100 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	6039      	str	r1, [r7, #0]
 800710a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2204      	movs	r2, #4
 8007110:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007112:	4b03      	ldr	r3, [pc, #12]	; (8007120 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	20000160 	.word	0x20000160

08007124 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	6039      	str	r1, [r7, #0]
 800712e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d105      	bne.n	8007142 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	4907      	ldr	r1, [pc, #28]	; (8007158 <USBD_FS_ProductStrDescriptor+0x34>)
 800713a:	4808      	ldr	r0, [pc, #32]	; (800715c <USBD_FS_ProductStrDescriptor+0x38>)
 800713c:	f7fd fac3 	bl	80046c6 <USBD_GetString>
 8007140:	e004      	b.n	800714c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	4904      	ldr	r1, [pc, #16]	; (8007158 <USBD_FS_ProductStrDescriptor+0x34>)
 8007146:	4805      	ldr	r0, [pc, #20]	; (800715c <USBD_FS_ProductStrDescriptor+0x38>)
 8007148:	f7fd fabd 	bl	80046c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800714c:	4b02      	ldr	r3, [pc, #8]	; (8007158 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	20001e6c 	.word	0x20001e6c
 800715c:	0800744c 	.word	0x0800744c

08007160 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	6039      	str	r1, [r7, #0]
 800716a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	4904      	ldr	r1, [pc, #16]	; (8007180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007170:	4804      	ldr	r0, [pc, #16]	; (8007184 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007172:	f7fd faa8 	bl	80046c6 <USBD_GetString>
  return USBD_StrDesc;
 8007176:	4b02      	ldr	r3, [pc, #8]	; (8007180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	20001e6c 	.word	0x20001e6c
 8007184:	08007464 	.word	0x08007464

08007188 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	6039      	str	r1, [r7, #0]
 8007192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	221a      	movs	r2, #26
 8007198:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800719a:	f000 f843 	bl	8007224 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800719e:	4b02      	ldr	r3, [pc, #8]	; (80071a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	20000164 	.word	0x20000164

080071ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	6039      	str	r1, [r7, #0]
 80071b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d105      	bne.n	80071ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	4907      	ldr	r1, [pc, #28]	; (80071e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071c2:	4808      	ldr	r0, [pc, #32]	; (80071e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071c4:	f7fd fa7f 	bl	80046c6 <USBD_GetString>
 80071c8:	e004      	b.n	80071d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	4904      	ldr	r1, [pc, #16]	; (80071e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071ce:	4805      	ldr	r0, [pc, #20]	; (80071e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071d0:	f7fd fa79 	bl	80046c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071d4:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20001e6c 	.word	0x20001e6c
 80071e4:	08007478 	.word	0x08007478

080071e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	6039      	str	r1, [r7, #0]
 80071f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d105      	bne.n	8007206 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	4907      	ldr	r1, [pc, #28]	; (800721c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071fe:	4808      	ldr	r0, [pc, #32]	; (8007220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007200:	f7fd fa61 	bl	80046c6 <USBD_GetString>
 8007204:	e004      	b.n	8007210 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	4904      	ldr	r1, [pc, #16]	; (800721c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800720a:	4805      	ldr	r0, [pc, #20]	; (8007220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800720c:	f7fd fa5b 	bl	80046c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007210:	4b02      	ldr	r3, [pc, #8]	; (800721c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20001e6c 	.word	0x20001e6c
 8007220:	08007484 	.word	0x08007484

08007224 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800722a:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <Get_SerialNum+0x44>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007230:	4b0e      	ldr	r3, [pc, #56]	; (800726c <Get_SerialNum+0x48>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007236:	4b0e      	ldr	r3, [pc, #56]	; (8007270 <Get_SerialNum+0x4c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4413      	add	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d009      	beq.n	800725e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800724a:	2208      	movs	r2, #8
 800724c:	4909      	ldr	r1, [pc, #36]	; (8007274 <Get_SerialNum+0x50>)
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f814 	bl	800727c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007254:	2204      	movs	r2, #4
 8007256:	4908      	ldr	r1, [pc, #32]	; (8007278 <Get_SerialNum+0x54>)
 8007258:	68b8      	ldr	r0, [r7, #8]
 800725a:	f000 f80f 	bl	800727c <IntToUnicode>
  }
}
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	1ffff7e8 	.word	0x1ffff7e8
 800726c:	1ffff7ec 	.word	0x1ffff7ec
 8007270:	1ffff7f0 	.word	0x1ffff7f0
 8007274:	20000166 	.word	0x20000166
 8007278:	20000176 	.word	0x20000176

0800727c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	4613      	mov	r3, r2
 8007288:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800728e:	2300      	movs	r3, #0
 8007290:	75fb      	strb	r3, [r7, #23]
 8007292:	e027      	b.n	80072e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	0f1b      	lsrs	r3, r3, #28
 8007298:	2b09      	cmp	r3, #9
 800729a:	d80b      	bhi.n	80072b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	0f1b      	lsrs	r3, r3, #28
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	4619      	mov	r1, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	440b      	add	r3, r1
 80072ac:	3230      	adds	r2, #48	; 0x30
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	e00a      	b.n	80072ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	0f1b      	lsrs	r3, r3, #28
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	4619      	mov	r1, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	440b      	add	r3, r1
 80072c4:	3237      	adds	r2, #55	; 0x37
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	3301      	adds	r3, #1
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	4413      	add	r3, r2
 80072da:	2200      	movs	r2, #0
 80072dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	3301      	adds	r3, #1
 80072e2:	75fb      	strb	r3, [r7, #23]
 80072e4:	7dfa      	ldrb	r2, [r7, #23]
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d3d3      	bcc.n	8007294 <IntToUnicode+0x18>
  }
}
 80072ec:	bf00      	nop
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bc80      	pop	{r7}
 80072f4:	4770      	bx	lr
	...

080072f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80072f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80072fa:	e003      	b.n	8007304 <LoopCopyDataInit>

080072fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80072fc:	4b0b      	ldr	r3, [pc, #44]	; (800732c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80072fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007300:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007302:	3104      	adds	r1, #4

08007304 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007304:	480a      	ldr	r0, [pc, #40]	; (8007330 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007306:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007308:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800730a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800730c:	d3f6      	bcc.n	80072fc <CopyDataInit>
  ldr r2, =_sbss
 800730e:	4a0a      	ldr	r2, [pc, #40]	; (8007338 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007310:	e002      	b.n	8007318 <LoopFillZerobss>

08007312 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007312:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007314:	f842 3b04 	str.w	r3, [r2], #4

08007318 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007318:	4b08      	ldr	r3, [pc, #32]	; (800733c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800731a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800731c:	d3f9      	bcc.n	8007312 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800731e:	f7ff fb17 	bl	8006950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007322:	f000 f80f 	bl	8007344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007326:	f7ff f919 	bl	800655c <main>
  bx lr
 800732a:	4770      	bx	lr
  ldr r3, =_sidata
 800732c:	080074b4 	.word	0x080074b4
  ldr r0, =_sdata
 8007330:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007334:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8007338:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 800733c:	2000206c 	.word	0x2000206c

08007340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007340:	e7fe      	b.n	8007340 <ADC1_2_IRQHandler>
	...

08007344 <__libc_init_array>:
 8007344:	b570      	push	{r4, r5, r6, lr}
 8007346:	2500      	movs	r5, #0
 8007348:	4e0c      	ldr	r6, [pc, #48]	; (800737c <__libc_init_array+0x38>)
 800734a:	4c0d      	ldr	r4, [pc, #52]	; (8007380 <__libc_init_array+0x3c>)
 800734c:	1ba4      	subs	r4, r4, r6
 800734e:	10a4      	asrs	r4, r4, #2
 8007350:	42a5      	cmp	r5, r4
 8007352:	d109      	bne.n	8007368 <__libc_init_array+0x24>
 8007354:	f000 f82e 	bl	80073b4 <_init>
 8007358:	2500      	movs	r5, #0
 800735a:	4e0a      	ldr	r6, [pc, #40]	; (8007384 <__libc_init_array+0x40>)
 800735c:	4c0a      	ldr	r4, [pc, #40]	; (8007388 <__libc_init_array+0x44>)
 800735e:	1ba4      	subs	r4, r4, r6
 8007360:	10a4      	asrs	r4, r4, #2
 8007362:	42a5      	cmp	r5, r4
 8007364:	d105      	bne.n	8007372 <__libc_init_array+0x2e>
 8007366:	bd70      	pop	{r4, r5, r6, pc}
 8007368:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800736c:	4798      	blx	r3
 800736e:	3501      	adds	r5, #1
 8007370:	e7ee      	b.n	8007350 <__libc_init_array+0xc>
 8007372:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007376:	4798      	blx	r3
 8007378:	3501      	adds	r5, #1
 800737a:	e7f2      	b.n	8007362 <__libc_init_array+0x1e>
 800737c:	080074ac 	.word	0x080074ac
 8007380:	080074ac 	.word	0x080074ac
 8007384:	080074ac 	.word	0x080074ac
 8007388:	080074b0 	.word	0x080074b0

0800738c <memcpy>:
 800738c:	b510      	push	{r4, lr}
 800738e:	1e43      	subs	r3, r0, #1
 8007390:	440a      	add	r2, r1
 8007392:	4291      	cmp	r1, r2
 8007394:	d100      	bne.n	8007398 <memcpy+0xc>
 8007396:	bd10      	pop	{r4, pc}
 8007398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800739c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a0:	e7f7      	b.n	8007392 <memcpy+0x6>

080073a2 <memset>:
 80073a2:	4603      	mov	r3, r0
 80073a4:	4402      	add	r2, r0
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d100      	bne.n	80073ac <memset+0xa>
 80073aa:	4770      	bx	lr
 80073ac:	f803 1b01 	strb.w	r1, [r3], #1
 80073b0:	e7f9      	b.n	80073a6 <memset+0x4>
	...

080073b4 <_init>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	bf00      	nop
 80073b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ba:	bc08      	pop	{r3}
 80073bc:	469e      	mov	lr, r3
 80073be:	4770      	bx	lr

080073c0 <_fini>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	bf00      	nop
 80073c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c6:	bc08      	pop	{r3}
 80073c8:	469e      	mov	lr, r3
 80073ca:	4770      	bx	lr
