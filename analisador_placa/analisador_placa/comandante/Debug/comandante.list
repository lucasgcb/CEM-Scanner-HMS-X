
comandante.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084b8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080085c8  080085c8  000185c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800883c  0800883c  000204d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800883c  0800883c  000204d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800883c  0800883c  000204d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800883c  0800883c  0001883c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008840  08008840  00018840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d0  20000000  08008844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f00  200004d0  08008d14  000204d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023d0  08008d14  000223d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6c5  00000000  00000000  000204f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000405c  00000000  00000000  0003cbbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001568  00000000  00000000  00040c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001390  00000000  00000000  00042188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018f2e  00000000  00000000  00043518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012b53  00000000  00000000  0005c446  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007cd0f  00000000  00000000  0006ef99  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebca8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c8  00000000  00000000  000ebd24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200004d0 	.word	0x200004d0
 800012c:	00000000 	.word	0x00000000
 8000130:	080085b0 	.word	0x080085b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200004d4 	.word	0x200004d4
 800014c:	080085b0 	.word	0x080085b0

08000150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <HAL_Init+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a07      	ldr	r2, [pc, #28]	; (8000178 <HAL_Init+0x28>)
 800015a:	f043 0310 	orr.w	r3, r3, #16
 800015e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000160:	2003      	movs	r0, #3
 8000162:	f000 f8d1 	bl	8000308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000166:	2000      	movs	r0, #0
 8000168:	f007 fb48 	bl	80077fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800016c:	f007 fb0e 	bl	800778c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40022000 	.word	0x40022000

0800017c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <HAL_IncTick+0x1c>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	461a      	mov	r2, r3
 8000186:	4b05      	ldr	r3, [pc, #20]	; (800019c <HAL_IncTick+0x20>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4413      	add	r3, r2
 800018c:	4a03      	ldr	r2, [pc, #12]	; (800019c <HAL_IncTick+0x20>)
 800018e:	6013      	str	r3, [r2, #0]
}
 8000190:	bf00      	nop
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000004 	.word	0x20000004
 800019c:	2000146c 	.word	0x2000146c

080001a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
  return uwTick;
 80001a4:	4b02      	ldr	r3, [pc, #8]	; (80001b0 <HAL_GetTick+0x10>)
 80001a6:	681b      	ldr	r3, [r3, #0]
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	2000146c 	.word	0x2000146c

080001b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	f003 0307 	and.w	r3, r3, #7
 80001c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001c4:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <__NVIC_SetPriorityGrouping+0x44>)
 80001c6:	68db      	ldr	r3, [r3, #12]
 80001c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001ca:	68ba      	ldr	r2, [r7, #8]
 80001cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001d0:	4013      	ands	r3, r2
 80001d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001e6:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <__NVIC_SetPriorityGrouping+0x44>)
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	60d3      	str	r3, [r2, #12]
}
 80001ec:	bf00      	nop
 80001ee:	3714      	adds	r7, #20
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__NVIC_GetPriorityGrouping+0x18>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	0a1b      	lsrs	r3, r3, #8
 8000206:	f003 0307 	and.w	r3, r3, #7
}
 800020a:	4618      	mov	r0, r3
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4906      	ldr	r1, [pc, #24]	; (800024c <__NVIC_EnableIRQ+0x34>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800025c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000260:	2b00      	cmp	r3, #0
 8000262:	db0a      	blt.n	800027a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	b2da      	uxtb	r2, r3
 8000268:	490c      	ldr	r1, [pc, #48]	; (800029c <__NVIC_SetPriority+0x4c>)
 800026a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026e:	0112      	lsls	r2, r2, #4
 8000270:	b2d2      	uxtb	r2, r2
 8000272:	440b      	add	r3, r1
 8000274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000278:	e00a      	b.n	8000290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	b2da      	uxtb	r2, r3
 800027e:	4908      	ldr	r1, [pc, #32]	; (80002a0 <__NVIC_SetPriority+0x50>)
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	f003 030f 	and.w	r3, r3, #15
 8000286:	3b04      	subs	r3, #4
 8000288:	0112      	lsls	r2, r2, #4
 800028a:	b2d2      	uxtb	r2, r2
 800028c:	440b      	add	r3, r1
 800028e:	761a      	strb	r2, [r3, #24]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000e100 	.word	0xe000e100
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b089      	sub	sp, #36	; 0x24
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	f003 0307 	and.w	r3, r3, #7
 80002b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	f1c3 0307 	rsb	r3, r3, #7
 80002be:	2b04      	cmp	r3, #4
 80002c0:	bf28      	it	cs
 80002c2:	2304      	movcs	r3, #4
 80002c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	3304      	adds	r3, #4
 80002ca:	2b06      	cmp	r3, #6
 80002cc:	d902      	bls.n	80002d4 <NVIC_EncodePriority+0x30>
 80002ce:	69fb      	ldr	r3, [r7, #28]
 80002d0:	3b03      	subs	r3, #3
 80002d2:	e000      	b.n	80002d6 <NVIC_EncodePriority+0x32>
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d8:	f04f 32ff 	mov.w	r2, #4294967295
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	fa02 f303 	lsl.w	r3, r2, r3
 80002e2:	43da      	mvns	r2, r3
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	401a      	ands	r2, r3
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002ec:	f04f 31ff 	mov.w	r1, #4294967295
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	fa01 f303 	lsl.w	r3, r1, r3
 80002f6:	43d9      	mvns	r1, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	4313      	orrs	r3, r2
         );
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3724      	adds	r7, #36	; 0x24
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr

08000308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f7ff ff4f 	bl	80001b4 <__NVIC_SetPriorityGrouping>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800031e:	b580      	push	{r7, lr}
 8000320:	b086      	sub	sp, #24
 8000322:	af00      	add	r7, sp, #0
 8000324:	4603      	mov	r3, r0
 8000326:	60b9      	str	r1, [r7, #8]
 8000328:	607a      	str	r2, [r7, #4]
 800032a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000330:	f7ff ff64 	bl	80001fc <__NVIC_GetPriorityGrouping>
 8000334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	68b9      	ldr	r1, [r7, #8]
 800033a:	6978      	ldr	r0, [r7, #20]
 800033c:	f7ff ffb2 	bl	80002a4 <NVIC_EncodePriority>
 8000340:	4602      	mov	r2, r0
 8000342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000346:	4611      	mov	r1, r2
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff81 	bl	8000250 <__NVIC_SetPriority>
}
 800034e:	bf00      	nop
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	b082      	sub	sp, #8
 800035a:	af00      	add	r7, sp, #0
 800035c:	4603      	mov	r3, r0
 800035e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ff57 	bl	8000218 <__NVIC_EnableIRQ>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000374:	b480      	push	{r7}
 8000376:	b08b      	sub	sp, #44	; 0x2c
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800037e:	2300      	movs	r3, #0
 8000380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000382:	2300      	movs	r3, #0
 8000384:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000386:	e127      	b.n	80005d8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000388:	2201      	movs	r2, #1
 800038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800038c:	fa02 f303 	lsl.w	r3, r2, r3
 8000390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	69fa      	ldr	r2, [r7, #28]
 8000398:	4013      	ands	r3, r2
 800039a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800039c:	69ba      	ldr	r2, [r7, #24]
 800039e:	69fb      	ldr	r3, [r7, #28]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	f040 8116 	bne.w	80005d2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	2b12      	cmp	r3, #18
 80003ac:	d034      	beq.n	8000418 <HAL_GPIO_Init+0xa4>
 80003ae:	2b12      	cmp	r3, #18
 80003b0:	d80d      	bhi.n	80003ce <HAL_GPIO_Init+0x5a>
 80003b2:	2b02      	cmp	r3, #2
 80003b4:	d02b      	beq.n	800040e <HAL_GPIO_Init+0x9a>
 80003b6:	2b02      	cmp	r3, #2
 80003b8:	d804      	bhi.n	80003c4 <HAL_GPIO_Init+0x50>
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d031      	beq.n	8000422 <HAL_GPIO_Init+0xae>
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d01c      	beq.n	80003fc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80003c2:	e048      	b.n	8000456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d043      	beq.n	8000450 <HAL_GPIO_Init+0xdc>
 80003c8:	2b11      	cmp	r3, #17
 80003ca:	d01b      	beq.n	8000404 <HAL_GPIO_Init+0x90>
          break;
 80003cc:	e043      	b.n	8000456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80003ce:	4a89      	ldr	r2, [pc, #548]	; (80005f4 <HAL_GPIO_Init+0x280>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d026      	beq.n	8000422 <HAL_GPIO_Init+0xae>
 80003d4:	4a87      	ldr	r2, [pc, #540]	; (80005f4 <HAL_GPIO_Init+0x280>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d806      	bhi.n	80003e8 <HAL_GPIO_Init+0x74>
 80003da:	4a87      	ldr	r2, [pc, #540]	; (80005f8 <HAL_GPIO_Init+0x284>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d020      	beq.n	8000422 <HAL_GPIO_Init+0xae>
 80003e0:	4a86      	ldr	r2, [pc, #536]	; (80005fc <HAL_GPIO_Init+0x288>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d01d      	beq.n	8000422 <HAL_GPIO_Init+0xae>
          break;
 80003e6:	e036      	b.n	8000456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80003e8:	4a85      	ldr	r2, [pc, #532]	; (8000600 <HAL_GPIO_Init+0x28c>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d019      	beq.n	8000422 <HAL_GPIO_Init+0xae>
 80003ee:	4a85      	ldr	r2, [pc, #532]	; (8000604 <HAL_GPIO_Init+0x290>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d016      	beq.n	8000422 <HAL_GPIO_Init+0xae>
 80003f4:	4a84      	ldr	r2, [pc, #528]	; (8000608 <HAL_GPIO_Init+0x294>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d013      	beq.n	8000422 <HAL_GPIO_Init+0xae>
          break;
 80003fa:	e02c      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	623b      	str	r3, [r7, #32]
          break;
 8000402:	e028      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	3304      	adds	r3, #4
 800040a:	623b      	str	r3, [r7, #32]
          break;
 800040c:	e023      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	3308      	adds	r3, #8
 8000414:	623b      	str	r3, [r7, #32]
          break;
 8000416:	e01e      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	330c      	adds	r3, #12
 800041e:	623b      	str	r3, [r7, #32]
          break;
 8000420:	e019      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d102      	bne.n	8000430 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800042a:	2304      	movs	r3, #4
 800042c:	623b      	str	r3, [r7, #32]
          break;
 800042e:	e012      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d105      	bne.n	8000444 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000438:	2308      	movs	r3, #8
 800043a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	69fa      	ldr	r2, [r7, #28]
 8000440:	611a      	str	r2, [r3, #16]
          break;
 8000442:	e008      	b.n	8000456 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000444:	2308      	movs	r3, #8
 8000446:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	69fa      	ldr	r2, [r7, #28]
 800044c:	615a      	str	r2, [r3, #20]
          break;
 800044e:	e002      	b.n	8000456 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000450:	2300      	movs	r3, #0
 8000452:	623b      	str	r3, [r7, #32]
          break;
 8000454:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000456:	69bb      	ldr	r3, [r7, #24]
 8000458:	2bff      	cmp	r3, #255	; 0xff
 800045a:	d801      	bhi.n	8000460 <HAL_GPIO_Init+0xec>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	e001      	b.n	8000464 <HAL_GPIO_Init+0xf0>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3304      	adds	r3, #4
 8000464:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	2bff      	cmp	r3, #255	; 0xff
 800046a:	d802      	bhi.n	8000472 <HAL_GPIO_Init+0xfe>
 800046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	e002      	b.n	8000478 <HAL_GPIO_Init+0x104>
 8000472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000474:	3b08      	subs	r3, #8
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	210f      	movs	r1, #15
 8000480:	693b      	ldr	r3, [r7, #16]
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	43db      	mvns	r3, r3
 8000488:	401a      	ands	r2, r3
 800048a:	6a39      	ldr	r1, [r7, #32]
 800048c:	693b      	ldr	r3, [r7, #16]
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	431a      	orrs	r2, r3
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	f000 8096 	beq.w	80005d2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004a6:	4b59      	ldr	r3, [pc, #356]	; (800060c <HAL_GPIO_Init+0x298>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a58      	ldr	r2, [pc, #352]	; (800060c <HAL_GPIO_Init+0x298>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b56      	ldr	r3, [pc, #344]	; (800060c <HAL_GPIO_Init+0x298>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80004be:	4a54      	ldr	r2, [pc, #336]	; (8000610 <HAL_GPIO_Init+0x29c>)
 80004c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c2:	089b      	lsrs	r3, r3, #2
 80004c4:	3302      	adds	r3, #2
 80004c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80004cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ce:	f003 0303 	and.w	r3, r3, #3
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	220f      	movs	r2, #15
 80004d6:	fa02 f303 	lsl.w	r3, r2, r3
 80004da:	43db      	mvns	r3, r3
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	4013      	ands	r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a4b      	ldr	r2, [pc, #300]	; (8000614 <HAL_GPIO_Init+0x2a0>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d013      	beq.n	8000512 <HAL_GPIO_Init+0x19e>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a4a      	ldr	r2, [pc, #296]	; (8000618 <HAL_GPIO_Init+0x2a4>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d00d      	beq.n	800050e <HAL_GPIO_Init+0x19a>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a49      	ldr	r2, [pc, #292]	; (800061c <HAL_GPIO_Init+0x2a8>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d007      	beq.n	800050a <HAL_GPIO_Init+0x196>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a48      	ldr	r2, [pc, #288]	; (8000620 <HAL_GPIO_Init+0x2ac>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d101      	bne.n	8000506 <HAL_GPIO_Init+0x192>
 8000502:	2303      	movs	r3, #3
 8000504:	e006      	b.n	8000514 <HAL_GPIO_Init+0x1a0>
 8000506:	2304      	movs	r3, #4
 8000508:	e004      	b.n	8000514 <HAL_GPIO_Init+0x1a0>
 800050a:	2302      	movs	r3, #2
 800050c:	e002      	b.n	8000514 <HAL_GPIO_Init+0x1a0>
 800050e:	2301      	movs	r3, #1
 8000510:	e000      	b.n	8000514 <HAL_GPIO_Init+0x1a0>
 8000512:	2300      	movs	r3, #0
 8000514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000516:	f002 0203 	and.w	r2, r2, #3
 800051a:	0092      	lsls	r2, r2, #2
 800051c:	4093      	lsls	r3, r2
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	4313      	orrs	r3, r2
 8000522:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000524:	493a      	ldr	r1, [pc, #232]	; (8000610 <HAL_GPIO_Init+0x29c>)
 8000526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000528:	089b      	lsrs	r3, r3, #2
 800052a:	3302      	adds	r3, #2
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800053a:	2b00      	cmp	r3, #0
 800053c:	d006      	beq.n	800054c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800053e:	4b39      	ldr	r3, [pc, #228]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4938      	ldr	r1, [pc, #224]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000544:	69bb      	ldr	r3, [r7, #24]
 8000546:	4313      	orrs	r3, r2
 8000548:	600b      	str	r3, [r1, #0]
 800054a:	e006      	b.n	800055a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800054c:	4b35      	ldr	r3, [pc, #212]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	43db      	mvns	r3, r3
 8000554:	4933      	ldr	r1, [pc, #204]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000556:	4013      	ands	r3, r2
 8000558:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000562:	2b00      	cmp	r3, #0
 8000564:	d006      	beq.n	8000574 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000566:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000568:	685a      	ldr	r2, [r3, #4]
 800056a:	492e      	ldr	r1, [pc, #184]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	4313      	orrs	r3, r2
 8000570:	604b      	str	r3, [r1, #4]
 8000572:	e006      	b.n	8000582 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000574:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	43db      	mvns	r3, r3
 800057c:	4929      	ldr	r1, [pc, #164]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 800057e:	4013      	ands	r3, r2
 8000580:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800058a:	2b00      	cmp	r3, #0
 800058c:	d006      	beq.n	800059c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800058e:	4b25      	ldr	r3, [pc, #148]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000590:	689a      	ldr	r2, [r3, #8]
 8000592:	4924      	ldr	r1, [pc, #144]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	4313      	orrs	r3, r2
 8000598:	608b      	str	r3, [r1, #8]
 800059a:	e006      	b.n	80005aa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 800059e:	689a      	ldr	r2, [r3, #8]
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	43db      	mvns	r3, r3
 80005a4:	491f      	ldr	r1, [pc, #124]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 80005a6:	4013      	ands	r3, r2
 80005a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d006      	beq.n	80005c4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80005b6:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 80005b8:	68da      	ldr	r2, [r3, #12]
 80005ba:	491a      	ldr	r1, [pc, #104]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	4313      	orrs	r3, r2
 80005c0:	60cb      	str	r3, [r1, #12]
 80005c2:	e006      	b.n	80005d2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 80005c6:	68da      	ldr	r2, [r3, #12]
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	43db      	mvns	r3, r3
 80005cc:	4915      	ldr	r1, [pc, #84]	; (8000624 <HAL_GPIO_Init+0x2b0>)
 80005ce:	4013      	ands	r3, r2
 80005d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80005d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d4:	3301      	adds	r3, #1
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005de:	fa22 f303 	lsr.w	r3, r2, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	f47f aed0 	bne.w	8000388 <HAL_GPIO_Init+0x14>
  }
}
 80005e8:	bf00      	nop
 80005ea:	372c      	adds	r7, #44	; 0x2c
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	10210000 	.word	0x10210000
 80005f8:	10110000 	.word	0x10110000
 80005fc:	10120000 	.word	0x10120000
 8000600:	10310000 	.word	0x10310000
 8000604:	10320000 	.word	0x10320000
 8000608:	10220000 	.word	0x10220000
 800060c:	40021000 	.word	0x40021000
 8000610:	40010000 	.word	0x40010000
 8000614:	40010800 	.word	0x40010800
 8000618:	40010c00 	.word	0x40010c00
 800061c:	40011000 	.word	0x40011000
 8000620:	40011400 	.word	0x40011400
 8000624:	40010400 	.word	0x40010400

08000628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	807b      	strh	r3, [r7, #2]
 8000634:	4613      	mov	r3, r2
 8000636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000638:	787b      	ldrb	r3, [r7, #1]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800063e:	887a      	ldrh	r2, [r7, #2]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000644:	e003      	b.n	800064e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000646:	887b      	ldrh	r3, [r7, #2]
 8000648:	041a      	lsls	r2, r3, #16
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	611a      	str	r2, [r3, #16]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065a:	b08b      	sub	sp, #44	; 0x2c
 800065c:	af06      	add	r7, sp, #24
 800065e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d101      	bne.n	800066a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e0d3      	b.n	8000812 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d106      	bne.n	8000684 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f007 fa6e 	bl	8007b60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2203      	movs	r2, #3
 8000688:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fdd0 	bl	8002236 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	687e      	ldr	r6, [r7, #4]
 800069e:	466d      	mov	r5, sp
 80006a0:	f106 0410 	add.w	r4, r6, #16
 80006a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	602b      	str	r3, [r5, #0]
 80006ac:	1d33      	adds	r3, r6, #4
 80006ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006b0:	6838      	ldr	r0, [r7, #0]
 80006b2:	f001 fd99 	bl	80021e8 <USB_CoreInit>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d005      	beq.n	80006c8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2202      	movs	r2, #2
 80006c0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	e0a4      	b.n	8000812 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fdcd 	bl	800226e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	e035      	b.n	8000746 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	015b      	lsls	r3, r3, #5
 80006e0:	4413      	add	r3, r2
 80006e2:	3329      	adds	r3, #41	; 0x29
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	015b      	lsls	r3, r3, #5
 80006ee:	4413      	add	r3, r2
 80006f0:	3328      	adds	r3, #40	; 0x28
 80006f2:	7bfa      	ldrb	r2, [r7, #15]
 80006f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	7bfa      	ldrb	r2, [r7, #15]
 80006fa:	b291      	uxth	r1, r2
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	015b      	lsls	r3, r3, #5
 8000700:	4413      	add	r3, r2
 8000702:	3336      	adds	r3, #54	; 0x36
 8000704:	460a      	mov	r2, r1
 8000706:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	015b      	lsls	r3, r3, #5
 800070e:	4413      	add	r3, r2
 8000710:	332b      	adds	r3, #43	; 0x2b
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	015b      	lsls	r3, r3, #5
 800071c:	4413      	add	r3, r2
 800071e:	3338      	adds	r3, #56	; 0x38
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	015b      	lsls	r3, r3, #5
 800072a:	4413      	add	r3, r2
 800072c:	333c      	adds	r3, #60	; 0x3c
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	3302      	adds	r3, #2
 8000738:	015b      	lsls	r3, r3, #5
 800073a:	4413      	add	r3, r2
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	3301      	adds	r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	7bfa      	ldrb	r2, [r7, #15]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	d3c4      	bcc.n	80006da <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000750:	2300      	movs	r3, #0
 8000752:	73fb      	strb	r3, [r7, #15]
 8000754:	e031      	b.n	80007ba <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	015b      	lsls	r3, r3, #5
 800075c:	4413      	add	r3, r2
 800075e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	015b      	lsls	r3, r3, #5
 800076c:	4413      	add	r3, r2
 800076e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000772:	7bfa      	ldrb	r2, [r7, #15]
 8000774:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	015b      	lsls	r3, r3, #5
 800077c:	4413      	add	r3, r2
 800077e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	015b      	lsls	r3, r3, #5
 800078c:	4413      	add	r3, r2
 800078e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	015b      	lsls	r3, r3, #5
 800079c:	4413      	add	r3, r2
 800079e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	330a      	adds	r3, #10
 80007ac:	015b      	lsls	r3, r3, #5
 80007ae:	4413      	add	r3, r2
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	3301      	adds	r3, #1
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	7bfa      	ldrb	r2, [r7, #15]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d3c8      	bcc.n	8000756 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	687e      	ldr	r6, [r7, #4]
 80007cc:	466d      	mov	r5, sp
 80007ce:	f106 0410 	add.w	r4, r6, #16
 80007d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007d6:	6823      	ldr	r3, [r4, #0]
 80007d8:	602b      	str	r3, [r5, #0]
 80007da:	1d33      	adds	r3, r6, #4
 80007dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007de:	6838      	ldr	r0, [r7, #0]
 80007e0:	f001 fd51 	bl	8002286 <USB_DevInit>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d005      	beq.n	80007f6 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2202      	movs	r2, #2
 80007ee:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00d      	b.n	8000812 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2201      	movs	r2, #1
 8000802:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f002 fd8f 	bl	800332e <USB_DevDisconnect>

  return HAL_OK;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800081a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000828:	2b01      	cmp	r3, #1
 800082a:	d101      	bne.n	8000830 <HAL_PCD_Start+0x16>
 800082c:	2302      	movs	r3, #2
 800082e:	e016      	b.n	800085e <HAL_PCD_Start+0x44>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2201      	movs	r2, #1
 8000834:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000838:	2101      	movs	r1, #1
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f007 fbf7 	bl	800802e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f002 fd68 	bl	800331a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f001 fcda 	bl	8002208 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fd65 	bl	8003342 <USB_ReadInterrupts>
 8000878:	4603      	mov	r3, r0
 800087a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800087e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000882:	d102      	bne.n	800088a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f000 faf3 	bl	8000e70 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fd57 	bl	8003342 <USB_ReadInterrupts>
 8000894:	4603      	mov	r3, r0
 8000896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800089a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800089e:	d112      	bne.n	80008c6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80008b2:	b292      	uxth	r2, r2
 80008b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f007 f9c6 	bl	8007c4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80008be:	2100      	movs	r1, #0
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f000 f8de 	bl	8000a82 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fd39 	bl	8003342 <USB_ReadInterrupts>
 80008d0:	4603      	mov	r3, r0
 80008d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008da:	d10b      	bne.n	80008f4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80008ee:	b292      	uxth	r2, r2
 80008f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fd22 	bl	8003342 <USB_ReadInterrupts>
 80008fe:	4603      	mov	r3, r0
 8000900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000908:	d10b      	bne.n	8000922 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000912:	b29a      	uxth	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800091c:	b292      	uxth	r2, r2
 800091e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fd0b 	bl	8003342 <USB_ReadInterrupts>
 800092c:	4603      	mov	r3, r0
 800092e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000936:	d126      	bne.n	8000986 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000940:	b29a      	uxth	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f022 0204 	bic.w	r2, r2, #4
 800094a:	b292      	uxth	r2, r2
 800094c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000958:	b29a      	uxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f022 0208 	bic.w	r2, r2, #8
 8000962:	b292      	uxth	r2, r2
 8000964:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f007 f9a7 	bl	8007cbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000976:	b29a      	uxth	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000980:	b292      	uxth	r2, r2
 8000982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f002 fcd9 	bl	8003342 <USB_ReadInterrupts>
 8000990:	4603      	mov	r3, r0
 8000992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800099a:	d13d      	bne.n	8000a18 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f042 0208 	orr.w	r2, r2, #8
 80009ae:	b292      	uxth	r2, r2
 80009b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009bc:	b29a      	uxth	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009c6:	b292      	uxth	r2, r2
 80009c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f042 0204 	orr.w	r2, r2, #4
 80009de:	b292      	uxth	r2, r2
 80009e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 fcaa 	bl	8003342 <USB_ReadInterrupts>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009f8:	d10b      	bne.n	8000a12 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a0c:	b292      	uxth	r2, r2
 8000a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f007 f938 	bl	8007c88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fc90 	bl	8003342 <USB_ReadInterrupts>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a2c:	d10e      	bne.n	8000a4c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a40:	b292      	uxth	r2, r2
 8000a42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f007 f8f1 	bl	8007c2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 fc76 	bl	8003342 <USB_ReadInterrupts>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a60:	d10b      	bne.n	8000a7a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a74:	b292      	uxth	r2, r2
 8000a76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d101      	bne.n	8000a9c <HAL_PCD_SetAddress+0x1a>
 8000a98:	2302      	movs	r3, #2
 8000a9a:	e013      	b.n	8000ac4 <HAL_PCD_SetAddress+0x42>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	78fa      	ldrb	r2, [r7, #3]
 8000aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	78fa      	ldrb	r2, [r7, #3]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 fc1d 	bl	80032f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4603      	mov	r3, r0
 8000adc:	70fb      	strb	r3, [r7, #3]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	803b      	strh	r3, [r7, #0]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000aea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	da0b      	bge.n	8000b0a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	f003 0307 	and.w	r3, r3, #7
 8000af8:	015b      	lsls	r3, r3, #5
 8000afa:	3328      	adds	r3, #40	; 0x28
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2201      	movs	r2, #1
 8000b06:	705a      	strb	r2, [r3, #1]
 8000b08:	e00b      	b.n	8000b22 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	f003 0307 	and.w	r3, r3, #7
 8000b10:	015b      	lsls	r3, r3, #5
 8000b12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000b22:	78fb      	ldrb	r3, [r7, #3]
 8000b24:	f003 0307 	and.w	r3, r3, #7
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000b2e:	883a      	ldrh	r2, [r7, #0]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	78ba      	ldrb	r2, [r7, #2]
 8000b38:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	785b      	ldrb	r3, [r3, #1]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d004      	beq.n	8000b4c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000b4c:	78bb      	ldrb	r3, [r7, #2]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d102      	bne.n	8000b58 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2200      	movs	r2, #0
 8000b56:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d101      	bne.n	8000b66 <HAL_PCD_EP_Open+0x9a>
 8000b62:	2302      	movs	r3, #2
 8000b64:	e00e      	b.n	8000b84 <HAL_PCD_EP_Open+0xb8>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68f9      	ldr	r1, [r7, #12]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 fbab 	bl	80022d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8000b82:	7afb      	ldrb	r3, [r7, #11]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da0b      	bge.n	8000bb8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	015b      	lsls	r3, r3, #5
 8000ba8:	3328      	adds	r3, #40	; 0x28
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	705a      	strb	r2, [r3, #1]
 8000bb6:	e00b      	b.n	8000bd0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	015b      	lsls	r3, r3, #5
 8000bc0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d101      	bne.n	8000bea <HAL_PCD_EP_Close+0x5e>
 8000be6:	2302      	movs	r3, #2
 8000be8:	e00e      	b.n	8000c08 <HAL_PCD_EP_Close+0x7c>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68f9      	ldr	r1, [r7, #12]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 fe57 	bl	80028ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c20:	7afb      	ldrb	r3, [r7, #11]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	015b      	lsls	r3, r3, #5
 8000c28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	2200      	movs	r2, #0
 8000c48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c4a:	7afb      	ldrb	r3, [r7, #11]
 8000c4c:	f003 0307 	and.w	r3, r3, #7
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000c56:	7afb      	ldrb	r3, [r7, #11]
 8000c58:	f003 0307 	and.w	r3, r3, #7
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d106      	bne.n	8000c6e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6979      	ldr	r1, [r7, #20]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 ffb6 	bl	8002bd8 <USB_EPStartXfer>
 8000c6c:	e005      	b.n	8000c7a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6979      	ldr	r1, [r7, #20]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 ffaf 	bl	8002bd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	330a      	adds	r3, #10
 8000c9a:	015b      	lsls	r3, r3, #5
 8000c9c:	4413      	add	r3, r2
 8000c9e:	3304      	adds	r3, #4
 8000ca0:	681b      	ldr	r3, [r3, #0]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cbc:	7afb      	ldrb	r3, [r7, #11]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	015b      	lsls	r3, r3, #5
 8000cc4:	3328      	adds	r3, #40	; 0x28
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ce4:	7afb      	ldrb	r3, [r7, #11]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d106      	bne.n	8000d08 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6979      	ldr	r1, [r7, #20]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 ff69 	bl	8002bd8 <USB_EPStartXfer>
 8000d06:	e005      	b.n	8000d14 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6979      	ldr	r1, [r7, #20]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 ff62 	bl	8002bd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	460b      	mov	r3, r1
 8000d28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	f003 0207 	and.w	r2, r3, #7
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d901      	bls.n	8000d3c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e046      	b.n	8000dca <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	da0b      	bge.n	8000d5c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d44:	78fb      	ldrb	r3, [r7, #3]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	015b      	lsls	r3, r3, #5
 8000d4c:	3328      	adds	r3, #40	; 0x28
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2201      	movs	r2, #1
 8000d58:	705a      	strb	r2, [r3, #1]
 8000d5a:	e009      	b.n	8000d70 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	015b      	lsls	r3, r3, #5
 8000d60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	4413      	add	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2201      	movs	r2, #1
 8000d74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d101      	bne.n	8000d90 <HAL_PCD_EP_SetStall+0x72>
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	e01c      	b.n	8000dca <HAL_PCD_EP_SetStall+0xac>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68f9      	ldr	r1, [r7, #12]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 f9d2 	bl	8003148 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d108      	bne.n	8000dc0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000db8:	4619      	mov	r1, r3
 8000dba:	4610      	mov	r0, r2
 8000dbc:	f002 fad0 	bl	8003360 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	f003 020f 	and.w	r2, r3, #15
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d901      	bls.n	8000df0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e03a      	b.n	8000e66 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	da0b      	bge.n	8000e10 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	015b      	lsls	r3, r3, #5
 8000e00:	3328      	adds	r3, #40	; 0x28
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	705a      	strb	r2, [r3, #1]
 8000e0e:	e00b      	b.n	8000e28 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	015b      	lsls	r3, r3, #5
 8000e18:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2200      	movs	r2, #0
 8000e26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d101      	bne.n	8000e48 <HAL_PCD_EP_ClrStall+0x76>
 8000e44:	2302      	movs	r3, #2
 8000e46:	e00e      	b.n	8000e66 <HAL_PCD_EP_ClrStall+0x94>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68f9      	ldr	r1, [r7, #12]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 f9b8 	bl	80031cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000e78:	e282      	b.n	8001380 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e82:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000e84:	8afb      	ldrh	r3, [r7, #22]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	f003 030f 	and.w	r3, r3, #15
 8000e8c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8000e8e:	7d7b      	ldrb	r3, [r7, #21]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f040 8142 	bne.w	800111a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000e96:	8afb      	ldrh	r3, [r7, #22]
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d151      	bne.n	8000f44 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000eb0:	b29c      	uxth	r4, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8000eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3328      	adds	r3, #40	; 0x28
 8000ec6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4413      	add	r3, r2
 8000edc:	3302      	adds	r3, #2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	6812      	ldr	r2, [r2, #0]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	695a      	ldr	r2, [r3, #20]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	441a      	add	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f02:	2100      	movs	r1, #0
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f006 fe7b 	bl	8007c00 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8234 	beq.w	8001380 <PCD_EP_ISR_Handler+0x510>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f040 822f 	bne.w	8001380 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	b292      	uxth	r2, r2
 8000f36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000f42:	e21d      	b.n	8001380 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f4a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000f54:	8a7b      	ldrh	r3, [r7, #18]
 8000f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d033      	beq.n	8000fc6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	4413      	add	r3, r2
 8000f72:	3306      	adds	r3, #6
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f002 fa2e 	bl	80033fe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000fae:	4013      	ands	r3, r2
 8000fb0:	b29c      	uxth	r4, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f006 fdf4 	bl	8007bac <HAL_PCD_SetupStageCallback>
 8000fc4:	e1dc      	b.n	8001380 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000fc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f280 81d8 	bge.w	8001380 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000fdc:	4013      	ands	r3, r2
 8000fde:	b29c      	uxth	r4, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8000fe8:	b292      	uxth	r2, r2
 8000fea:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4413      	add	r3, r2
 8001000:	3306      	adds	r3, #6
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	4413      	add	r3, r2
 800100a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d019      	beq.n	8001054 <PCD_EP_ISR_Handler+0x1e4>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d015      	beq.n	8001054 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6959      	ldr	r1, [r3, #20]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001038:	b29b      	uxth	r3, r3
 800103a:	f002 f9e0 	bl	80033fe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	695a      	ldr	r2, [r3, #20]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	441a      	add	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800104c:	2100      	movs	r1, #0
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f006 fdbe 	bl	8007bd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	461c      	mov	r4, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001062:	b29b      	uxth	r3, r3
 8001064:	441c      	add	r4, r3
 8001066:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800106a:	461c      	mov	r4, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10e      	bne.n	8001092 <PCD_EP_ISR_Handler+0x222>
 8001074:	8823      	ldrh	r3, [r4, #0]
 8001076:	b29b      	uxth	r3, r3
 8001078:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800107c:	b29b      	uxth	r3, r3
 800107e:	8023      	strh	r3, [r4, #0]
 8001080:	8823      	ldrh	r3, [r4, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800108c:	b29b      	uxth	r3, r3
 800108e:	8023      	strh	r3, [r4, #0]
 8001090:	e02d      	b.n	80010ee <PCD_EP_ISR_Handler+0x27e>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	2b3e      	cmp	r3, #62	; 0x3e
 8001098:	d812      	bhi.n	80010c0 <PCD_EP_ISR_Handler+0x250>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	085b      	lsrs	r3, r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <PCD_EP_ISR_Handler+0x244>
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	3301      	adds	r3, #1
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	029b      	lsls	r3, r3, #10
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	8023      	strh	r3, [r4, #0]
 80010be:	e016      	b.n	80010ee <PCD_EP_ISR_Handler+0x27e>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	095b      	lsrs	r3, r3, #5
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <PCD_EP_ISR_Handler+0x26a>
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010fe:	b29c      	uxth	r4, r3
 8001100:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001104:	b29c      	uxth	r4, r3
 8001106:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800110a:	b29c      	uxth	r4, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4ba2      	ldr	r3, [pc, #648]	; (800139c <PCD_EP_ISR_Handler+0x52c>)
 8001112:	4323      	orrs	r3, r4
 8001114:	b29b      	uxth	r3, r3
 8001116:	8013      	strh	r3, [r2, #0]
 8001118:	e132      	b.n	8001380 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	7d7b      	ldrb	r3, [r7, #21]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800112a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f280 80d1 	bge.w	80012d6 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	7d7b      	ldrb	r3, [r7, #21]
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	b29a      	uxth	r2, r3
 8001144:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001148:	4013      	ands	r3, r2
 800114a:	b29c      	uxth	r4, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	7d7b      	ldrb	r3, [r7, #21]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800115c:	b292      	uxth	r2, r2
 800115e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001160:	7d7b      	ldrb	r3, [r7, #21]
 8001162:	015b      	lsls	r3, r3, #5
 8001164:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	7b1b      	ldrb	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d121      	bne.n	80011ba <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800117e:	b29b      	uxth	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4413      	add	r3, r2
 800118a:	3306      	adds	r3, #6
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	4413      	add	r3, r2
 8001194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800119e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80011a0:	8bfb      	ldrh	r3, [r7, #30]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d072      	beq.n	800128c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6959      	ldr	r1, [r3, #20]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	88da      	ldrh	r2, [r3, #6]
 80011b2:	8bfb      	ldrh	r3, [r7, #30]
 80011b4:	f002 f923 	bl	80033fe <USB_ReadPMA>
 80011b8:	e068      	b.n	800128c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d021      	beq.n	8001218 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011dc:	b29b      	uxth	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	3302      	adds	r3, #2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011fc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80011fe:	8bfb      	ldrh	r3, [r7, #30]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d02a      	beq.n	800125a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6959      	ldr	r1, [r3, #20]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	891a      	ldrh	r2, [r3, #8]
 8001210:	8bfb      	ldrh	r3, [r7, #30]
 8001212:	f002 f8f4 	bl	80033fe <USB_ReadPMA>
 8001216:	e020      	b.n	800125a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001220:	b29b      	uxth	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4413      	add	r3, r2
 800122c:	3306      	adds	r3, #6
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	4413      	add	r3, r2
 8001236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001240:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001242:	8bfb      	ldrh	r3, [r7, #30]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6959      	ldr	r1, [r3, #20]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	895a      	ldrh	r2, [r3, #10]
 8001254:	8bfb      	ldrh	r3, [r7, #30]
 8001256:	f002 f8d2 	bl	80033fe <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	b29b      	uxth	r3, r3
 800126c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001274:	b29c      	uxth	r4, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	441a      	add	r2, r3
 8001284:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <PCD_EP_ISR_Handler+0x530>)
 8001286:	4323      	orrs	r3, r4
 8001288:	b29b      	uxth	r3, r3
 800128a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	69da      	ldr	r2, [r3, #28]
 8001290:	8bfb      	ldrh	r3, [r7, #30]
 8001292:	441a      	add	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	8bfb      	ldrh	r3, [r7, #30]
 800129e:	441a      	add	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <PCD_EP_ISR_Handler+0x446>
 80012ac:	8bfa      	ldrh	r2, [r7, #30]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d206      	bcs.n	80012c4 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f006 fc87 	bl	8007bd0 <HAL_PCD_DataOutStageCallback>
 80012c2:	e008      	b.n	80012d6 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	7819      	ldrb	r1, [r3, #0]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	695a      	ldr	r2, [r3, #20]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff fc9d 	bl	8000c10 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80012d6:	8a7b      	ldrh	r3, [r7, #18]
 80012d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d04f      	beq.n	8001380 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80012e0:	7d7b      	ldrb	r3, [r7, #21]
 80012e2:	015b      	lsls	r3, r3, #5
 80012e4:	3328      	adds	r3, #40	; 0x28
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	7d7b      	ldrb	r3, [r7, #21]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001304:	b29c      	uxth	r4, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	7d7b      	ldrb	r3, [r7, #21]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	441a      	add	r2, r3
 8001312:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800131a:	b29b      	uxth	r3, r3
 800131c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001326:	b29b      	uxth	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4413      	add	r3, r2
 8001332:	3302      	adds	r3, #2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	4413      	add	r3, r2
 800133c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	441a      	add	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d106      	bne.n	800136e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f006 fc4a 	bl	8007c00 <HAL_PCD_DataInStageCallback>
 800136c:	e008      	b.n	8001380 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	7819      	ldrb	r1, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fc96 	bl	8000cac <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001388:	b29b      	uxth	r3, r3
 800138a:	b21b      	sxth	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	f6ff ad74 	blt.w	8000e7a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3724      	adds	r7, #36	; 0x24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	ffff8080 	.word	0xffff8080
 80013a0:	ffff80c0 	.word	0xffff80c0

080013a4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	817b      	strh	r3, [r7, #10]
 80013b2:	4613      	mov	r3, r2
 80013b4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80013b6:	897b      	ldrh	r3, [r7, #10]
 80013b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013bc:	b29b      	uxth	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d008      	beq.n	80013d4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013c2:	897b      	ldrh	r3, [r7, #10]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	015b      	lsls	r3, r3, #5
 80013ca:	3328      	adds	r3, #40	; 0x28
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e006      	b.n	80013e2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80013d4:	897b      	ldrh	r3, [r7, #10]
 80013d6:	015b      	lsls	r3, r3, #5
 80013d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80013e2:	893b      	ldrh	r3, [r7, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d107      	bne.n	80013f8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2200      	movs	r2, #0
 80013ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	80da      	strh	r2, [r3, #6]
 80013f6:	e00b      	b.n	8001410 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2201      	movs	r2, #1
 80013fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	b29a      	uxth	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	0c1b      	lsrs	r3, r3, #16
 800140a:	b29a      	uxth	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	371c      	adds	r7, #28
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e26c      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8087 	beq.w	800154a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800143c:	4b92      	ldr	r3, [pc, #584]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b04      	cmp	r3, #4
 8001446:	d00c      	beq.n	8001462 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001448:	4b8f      	ldr	r3, [pc, #572]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b08      	cmp	r3, #8
 8001452:	d112      	bne.n	800147a <HAL_RCC_OscConfig+0x5e>
 8001454:	4b8c      	ldr	r3, [pc, #560]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001460:	d10b      	bne.n	800147a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001462:	4b89      	ldr	r3, [pc, #548]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d06c      	beq.n	8001548 <HAL_RCC_OscConfig+0x12c>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d168      	bne.n	8001548 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e246      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x76>
 8001484:	4b80      	ldr	r3, [pc, #512]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a7f      	ldr	r2, [pc, #508]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800148a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e02e      	b.n	80014f0 <HAL_RCC_OscConfig+0xd4>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x98>
 800149a:	4b7b      	ldr	r3, [pc, #492]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a7a      	ldr	r2, [pc, #488]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b78      	ldr	r3, [pc, #480]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a77      	ldr	r2, [pc, #476]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e01d      	b.n	80014f0 <HAL_RCC_OscConfig+0xd4>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0xbc>
 80014be:	4b72      	ldr	r3, [pc, #456]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a71      	ldr	r2, [pc, #452]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b6f      	ldr	r3, [pc, #444]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6e      	ldr	r2, [pc, #440]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e00b      	b.n	80014f0 <HAL_RCC_OscConfig+0xd4>
 80014d8:	4b6b      	ldr	r3, [pc, #428]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a6a      	ldr	r2, [pc, #424]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b68      	ldr	r3, [pc, #416]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a67      	ldr	r2, [pc, #412]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7fe fe52 	bl	80001a0 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7fe fe4e 	bl	80001a0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e1fa      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b5d      	ldr	r3, [pc, #372]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0xe4>
 800151e:	e014      	b.n	800154a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7fe fe3e 	bl	80001a0 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001528:	f7fe fe3a 	bl	80001a0 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e1e6      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	4b53      	ldr	r3, [pc, #332]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x10c>
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d063      	beq.n	800161e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001556:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00b      	beq.n	800157a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001562:	4b49      	ldr	r3, [pc, #292]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b08      	cmp	r3, #8
 800156c:	d11c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x18c>
 800156e:	4b46      	ldr	r3, [pc, #280]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d116      	bne.n	80015a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	4b43      	ldr	r3, [pc, #268]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_RCC_OscConfig+0x176>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d001      	beq.n	8001592 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e1ba      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4939      	ldr	r1, [pc, #228]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	e03a      	b.n	800161e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b0:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_RCC_OscConfig+0x270>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7fe fdf3 	bl	80001a0 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015be:	f7fe fdef 	bl	80001a0 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e19b      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4927      	ldr	r1, [pc, #156]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <HAL_RCC_OscConfig+0x270>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7fe fdd2 	bl	80001a0 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001600:	f7fe fdce 	bl	80001a0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e17a      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d03a      	beq.n	80016a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d019      	beq.n	8001666 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_RCC_OscConfig+0x274>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001638:	f7fe fdb2 	bl	80001a0 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001640:	f7fe fdae 	bl	80001a0 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e15a      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800165e:	2001      	movs	r0, #1
 8001660:	f000 faf6 	bl	8001c50 <RCC_Delay>
 8001664:	e01c      	b.n	80016a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_RCC_OscConfig+0x274>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166c:	f7fe fd98 	bl	80001a0 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001672:	e00f      	b.n	8001694 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001674:	f7fe fd94 	bl	80001a0 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d908      	bls.n	8001694 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e140      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000
 800168c:	42420000 	.word	0x42420000
 8001690:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001694:	4b9e      	ldr	r3, [pc, #632]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e9      	bne.n	8001674 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80a6 	beq.w	80017fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b2:	4b97      	ldr	r3, [pc, #604]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10d      	bne.n	80016da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	4b94      	ldr	r3, [pc, #592]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4a93      	ldr	r2, [pc, #588]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c8:	61d3      	str	r3, [r2, #28]
 80016ca:	4b91      	ldr	r3, [pc, #580]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d6:	2301      	movs	r3, #1
 80016d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016da:	4b8e      	ldr	r3, [pc, #568]	; (8001914 <HAL_RCC_OscConfig+0x4f8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d118      	bne.n	8001718 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e6:	4b8b      	ldr	r3, [pc, #556]	; (8001914 <HAL_RCC_OscConfig+0x4f8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a8a      	ldr	r2, [pc, #552]	; (8001914 <HAL_RCC_OscConfig+0x4f8>)
 80016ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f2:	f7fe fd55 	bl	80001a0 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fa:	f7fe fd51 	bl	80001a0 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b64      	cmp	r3, #100	; 0x64
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e0fd      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170c:	4b81      	ldr	r3, [pc, #516]	; (8001914 <HAL_RCC_OscConfig+0x4f8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x312>
 8001720:	4b7b      	ldr	r3, [pc, #492]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4a7a      	ldr	r2, [pc, #488]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6213      	str	r3, [r2, #32]
 800172c:	e02d      	b.n	800178a <HAL_RCC_OscConfig+0x36e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x334>
 8001736:	4b76      	ldr	r3, [pc, #472]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a75      	ldr	r2, [pc, #468]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	4b73      	ldr	r3, [pc, #460]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a72      	ldr	r2, [pc, #456]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	6213      	str	r3, [r2, #32]
 800174e:	e01c      	b.n	800178a <HAL_RCC_OscConfig+0x36e>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b05      	cmp	r3, #5
 8001756:	d10c      	bne.n	8001772 <HAL_RCC_OscConfig+0x356>
 8001758:	4b6d      	ldr	r3, [pc, #436]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a6c      	ldr	r2, [pc, #432]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6213      	str	r3, [r2, #32]
 8001764:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a69      	ldr	r2, [pc, #420]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	e00b      	b.n	800178a <HAL_RCC_OscConfig+0x36e>
 8001772:	4b67      	ldr	r3, [pc, #412]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4a66      	ldr	r2, [pc, #408]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6213      	str	r3, [r2, #32]
 800177e:	4b64      	ldr	r3, [pc, #400]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4a63      	ldr	r2, [pc, #396]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d015      	beq.n	80017be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001792:	f7fe fd05 	bl	80001a0 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f7fe fd01 	bl	80001a0 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e0ab      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	4b57      	ldr	r3, [pc, #348]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ee      	beq.n	800179a <HAL_RCC_OscConfig+0x37e>
 80017bc:	e014      	b.n	80017e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017be:	f7fe fcef 	bl	80001a0 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	e00a      	b.n	80017dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7fe fceb 	bl	80001a0 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e095      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1ee      	bne.n	80017c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d105      	bne.n	80017fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ee:	4b48      	ldr	r3, [pc, #288]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a47      	ldr	r2, [pc, #284]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8081 	beq.w	8001906 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001804:	4b42      	ldr	r3, [pc, #264]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b08      	cmp	r3, #8
 800180e:	d061      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d146      	bne.n	80018a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001818:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_RCC_OscConfig+0x4fc>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7fe fcbf 	bl	80001a0 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001826:	f7fe fcbb 	bl	80001a0 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e067      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001838:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184c:	d108      	bne.n	8001860 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800184e:	4b30      	ldr	r3, [pc, #192]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	492d      	ldr	r1, [pc, #180]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a19      	ldr	r1, [r3, #32]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	430b      	orrs	r3, r1
 8001872:	4927      	ldr	r1, [pc, #156]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001878:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HAL_RCC_OscConfig+0x4fc>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7fe fc8f 	bl	80001a0 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001886:	f7fe fc8b 	bl	80001a0 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e037      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x46a>
 80018a4:	e02f      	b.n	8001906 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <HAL_RCC_OscConfig+0x4fc>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7fe fc78 	bl	80001a0 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7fe fc74 	bl	80001a0 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e020      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x498>
 80018d2:	e018      	b.n	8001906 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e013      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000
 8001914:	40007000 	.word	0x40007000
 8001918:	42420060 	.word	0x42420060

0800191c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0d0      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b6a      	ldr	r3, [pc, #424]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d910      	bls.n	8001960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b67      	ldr	r3, [pc, #412]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 0207 	bic.w	r2, r3, #7
 8001946:	4965      	ldr	r1, [pc, #404]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b63      	ldr	r3, [pc, #396]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0b8      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d020      	beq.n	80019ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001978:	4b59      	ldr	r3, [pc, #356]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4a58      	ldr	r2, [pc, #352]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001982:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001990:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4a52      	ldr	r2, [pc, #328]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800199a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	494d      	ldr	r1, [pc, #308]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d040      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d115      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e07f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019da:	4b41      	ldr	r3, [pc, #260]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e073      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ea:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e06b      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fa:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f023 0203 	bic.w	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4936      	ldr	r1, [pc, #216]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a0c:	f7fe fbc8 	bl	80001a0 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a14:	f7fe fbc4 	bl	80001a0 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e053      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 020c 	and.w	r2, r3, #12
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d1eb      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d210      	bcs.n	8001a6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 0207 	bic.w	r2, r3, #7
 8001a52:	4922      	ldr	r1, [pc, #136]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e032      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4916      	ldr	r1, [pc, #88]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aaa:	f000 f821 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 8001aae:	4601      	mov	r1, r0
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	5cd3      	ldrb	r3, [r2, r3]
 8001abe:	fa21 f303 	lsr.w	r3, r1, r3
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1d0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f005 fe96 	bl	80077fc <HAL_InitTick>

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40022000 	.word	0x40022000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	080086f4 	.word	0x080086f4
 8001ae8:	2000029c 	.word	0x2000029c
 8001aec:	20000000 	.word	0x20000000

08001af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af0:	b490      	push	{r4, r7}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001af8:	1d3c      	adds	r4, r7, #4
 8001afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b00:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b1a:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d002      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x40>
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d003      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0x46>
 8001b2e:	e02d      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b32:	623b      	str	r3, [r7, #32]
      break;
 8001b34:	e02d      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	0c9b      	lsrs	r3, r3, #18
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b42:	4413      	add	r3, r2
 8001b44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	0c5b      	lsrs	r3, r3, #17
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b62:	4413      	add	r3, r2
 8001b64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b6e:	fb02 f203 	mul.w	r2, r2, r3
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7a:	e004      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	623b      	str	r3, [r7, #32]
      break;
 8001b8a:	e002      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b8e:	623b      	str	r3, [r7, #32]
      break;
 8001b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b92:	6a3b      	ldr	r3, [r7, #32]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc90      	pop	{r4, r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	080085c8 	.word	0x080085c8
 8001ba4:	080085d8 	.word	0x080085d8
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	007a1200 	.word	0x007a1200
 8001bb0:	003d0900 	.word	0x003d0900

08001bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb8:	4b02      	ldr	r3, [pc, #8]	; (8001bc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	2000029c 	.word	0x2000029c

08001bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bcc:	f7ff fff2 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4601      	mov	r1, r0
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4a03      	ldr	r2, [pc, #12]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000
 8001bec:	08008704 	.word	0x08008704

08001bf0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_RCC_GetClockConfig+0x58>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_RCC_GetClockConfig+0x58>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_GetClockConfig+0x58>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_RCC_GetClockConfig+0x58>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0207 	and.w	r2, r3, #7
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40022000 	.word	0x40022000

08001c50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <RCC_Delay+0x34>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <RCC_Delay+0x38>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	0a5b      	lsrs	r3, r3, #9
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c6c:	bf00      	nop
  }
  while (Delay --);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1e5a      	subs	r2, r3, #1
 8001c72:	60fa      	str	r2, [r7, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f9      	bne.n	8001c6c <RCC_Delay+0x1c>
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	2000029c 	.word	0x2000029c
 8001c88:	10624dd3 	.word	0x10624dd3

08001c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d07d      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cac:	4b4f      	ldr	r3, [pc, #316]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb8:	4b4c      	ldr	r3, [pc, #304]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	4a4b      	ldr	r2, [pc, #300]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	61d3      	str	r3, [r2, #28]
 8001cc4:	4b49      	ldr	r3, [pc, #292]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	4b46      	ldr	r3, [pc, #280]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d118      	bne.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce0:	4b43      	ldr	r3, [pc, #268]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a42      	ldr	r2, [pc, #264]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cec:	f7fe fa58 	bl	80001a0 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	e008      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf4:	f7fe fa54 	bl	80001a0 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e06d      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d12:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d02e      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d027      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d3a:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d40:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d46:	4a29      	ldr	r2, [pc, #164]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d014      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7fe fa23 	bl	80001a0 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7fe fa1f 	bl	80001a0 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e036      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ee      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4917      	ldr	r1, [pc, #92]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	4a13      	ldr	r2, [pc, #76]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d008      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	490b      	ldr	r1, [pc, #44]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	4904      	ldr	r1, [pc, #16]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
 8001df4:	42420440 	.word	0x42420440

08001df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e01d      	b.n	8001e46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f815 	bl	8001e4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3304      	adds	r3, #4
 8001e34:	4619      	mov	r1, r3
 8001e36:	4610      	mov	r0, r2
 8001e38:	f000 f962 	bl	8002100 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d007      	beq.n	8001e9a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d122      	bne.n	8001f02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d11b      	bne.n	8001f02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f06f 0202 	mvn.w	r2, #2
 8001ed2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f8ed 	bl	80020c8 <HAL_TIM_IC_CaptureCallback>
 8001eee:	e005      	b.n	8001efc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f8e0 	bl	80020b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8ef 	bl	80020da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d122      	bne.n	8001f56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d11b      	bne.n	8001f56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f06f 0204 	mvn.w	r2, #4
 8001f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f8c3 	bl	80020c8 <HAL_TIM_IC_CaptureCallback>
 8001f42:	e005      	b.n	8001f50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f8b6 	bl	80020b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8c5 	bl	80020da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d122      	bne.n	8001faa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d11b      	bne.n	8001faa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f06f 0208 	mvn.w	r2, #8
 8001f7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f899 	bl	80020c8 <HAL_TIM_IC_CaptureCallback>
 8001f96:	e005      	b.n	8001fa4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f88c 	bl	80020b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f89b 	bl	80020da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d122      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d11b      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f06f 0210 	mvn.w	r2, #16
 8001fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2208      	movs	r2, #8
 8001fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f86f 	bl	80020c8 <HAL_TIM_IC_CaptureCallback>
 8001fea:	e005      	b.n	8001ff8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f862 	bl	80020b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f871 	bl	80020da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d10e      	bne.n	800202a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d107      	bne.n	800202a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f06f 0201 	mvn.w	r2, #1
 8002022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f005 fb99 	bl	800775c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002034:	2b80      	cmp	r3, #128	; 0x80
 8002036:	d10e      	bne.n	8002056 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b80      	cmp	r3, #128	; 0x80
 8002044:	d107      	bne.n	8002056 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800204e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f8c0 	bl	80021d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d10e      	bne.n	8002082 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206e:	2b40      	cmp	r3, #64	; 0x40
 8002070:	d107      	bne.n	8002082 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800207a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f835 	bl	80020ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b20      	cmp	r3, #32
 800208e:	d10e      	bne.n	80020ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b20      	cmp	r3, #32
 800209c:	d107      	bne.n	80020ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f06f 0220 	mvn.w	r2, #32
 80020a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f88b 	bl	80021c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
	...

08002100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a29      	ldr	r2, [pc, #164]	; (80021b8 <TIM_Base_SetConfig+0xb8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00b      	beq.n	8002130 <TIM_Base_SetConfig+0x30>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211e:	d007      	beq.n	8002130 <TIM_Base_SetConfig+0x30>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a26      	ldr	r2, [pc, #152]	; (80021bc <TIM_Base_SetConfig+0xbc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d003      	beq.n	8002130 <TIM_Base_SetConfig+0x30>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a25      	ldr	r2, [pc, #148]	; (80021c0 <TIM_Base_SetConfig+0xc0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d108      	bne.n	8002142 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <TIM_Base_SetConfig+0xb8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00b      	beq.n	8002162 <TIM_Base_SetConfig+0x62>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002150:	d007      	beq.n	8002162 <TIM_Base_SetConfig+0x62>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a19      	ldr	r2, [pc, #100]	; (80021bc <TIM_Base_SetConfig+0xbc>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d003      	beq.n	8002162 <TIM_Base_SetConfig+0x62>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <TIM_Base_SetConfig+0xc0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d108      	bne.n	8002174 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <TIM_Base_SetConfig+0xb8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d103      	bne.n	80021a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	615a      	str	r2, [r3, #20]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40000800 	.word	0x40000800

080021c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021e8:	b084      	sub	sp, #16
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	f107 0014 	add.w	r0, r7, #20
 80021f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	b004      	add	sp, #16
 8002206:	4770      	bx	lr

08002208 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002210:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002214:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800221c:	b29a      	uxth	r2, r3
 800221e:	89fb      	ldrh	r3, [r7, #14]
 8002220:	4313      	orrs	r3, r2
 8002222:	b29a      	uxth	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002236:	b480      	push	{r7}
 8002238:	b085      	sub	sp, #20
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800223e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002242:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800224a:	b29b      	uxth	r3, r3
 800224c:	b21a      	sxth	r2, r3
 800224e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002252:	43db      	mvns	r3, r3
 8002254:	b21b      	sxth	r3, r3
 8002256:	4013      	ands	r3, r2
 8002258:	b21b      	sxth	r3, r3
 800225a:	b29a      	uxth	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002286:	b084      	sub	sp, #16
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	f107 0014 	add.w	r0, r7, #20
 8002294:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ffa5 	bl	8002208 <USB_EnableGlobalInt>

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022ca:	b004      	add	sp, #16
 80022cc:	4770      	bx	lr
	...

080022d0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80022d0:	b490      	push	{r4, r7}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80022f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f4:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	78db      	ldrb	r3, [r3, #3]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d819      	bhi.n	8002332 <USB_ActivateEndpoint+0x62>
 80022fe:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <USB_ActivateEndpoint+0x34>)
 8002300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002304:	08002315 	.word	0x08002315
 8002308:	08002329 	.word	0x08002329
 800230c:	08002339 	.word	0x08002339
 8002310:	0800231f 	.word	0x0800231f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002314:	89bb      	ldrh	r3, [r7, #12]
 8002316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231a:	81bb      	strh	r3, [r7, #12]
      break;
 800231c:	e00d      	b.n	800233a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800231e:	89bb      	ldrh	r3, [r7, #12]
 8002320:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002324:	81bb      	strh	r3, [r7, #12]
      break;
 8002326:	e008      	b.n	800233a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002328:	89bb      	ldrh	r3, [r7, #12]
 800232a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800232e:	81bb      	strh	r3, [r7, #12]
      break;
 8002330:	e003      	b.n	800233a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
      break;
 8002336:	e000      	b.n	800233a <USB_ActivateEndpoint+0x6a>
      break;
 8002338:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	441a      	add	r2, r3
 8002344:	89bb      	ldrh	r3, [r7, #12]
 8002346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800234a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800234e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002356:	b29b      	uxth	r3, r3
 8002358:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800236c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002370:	b29a      	uxth	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	4313      	orrs	r3, r2
 800237a:	b29c      	uxth	r4, r3
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	441a      	add	r2, r3
 8002386:	4b8a      	ldr	r3, [pc, #552]	; (80025b0 <USB_ActivateEndpoint+0x2e0>)
 8002388:	4323      	orrs	r3, r4
 800238a:	b29b      	uxth	r3, r3
 800238c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	7b1b      	ldrb	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 8112 	bne.w	80025bc <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	785b      	ldrb	r3, [r3, #1]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d067      	beq.n	8002470 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80023a0:	687c      	ldr	r4, [r7, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	441c      	add	r4, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	4423      	add	r3, r4
 80023b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b8:	461c      	mov	r4, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	88db      	ldrh	r3, [r3, #6]
 80023be:	085b      	lsrs	r3, r3, #1
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b29c      	uxth	r4, r3
 80023d6:	4623      	mov	r3, r4
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d014      	beq.n	800240a <USB_ActivateEndpoint+0x13a>
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f6:	b29c      	uxth	r4, r3
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	441a      	add	r2, r3
 8002402:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <USB_ActivateEndpoint+0x2e4>)
 8002404:	4323      	orrs	r3, r4
 8002406:	b29b      	uxth	r3, r3
 8002408:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	78db      	ldrb	r3, [r3, #3]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d018      	beq.n	8002444 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002428:	b29c      	uxth	r4, r3
 800242a:	f084 0320 	eor.w	r3, r4, #32
 800242e:	b29c      	uxth	r4, r3
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	441a      	add	r2, r3
 800243a:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <USB_ActivateEndpoint+0x2e0>)
 800243c:	4323      	orrs	r3, r4
 800243e:	b29b      	uxth	r3, r3
 8002440:	8013      	strh	r3, [r2, #0]
 8002442:	e22b      	b.n	800289c <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800245a:	b29c      	uxth	r4, r3
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	441a      	add	r2, r3
 8002466:	4b52      	ldr	r3, [pc, #328]	; (80025b0 <USB_ActivateEndpoint+0x2e0>)
 8002468:	4323      	orrs	r3, r4
 800246a:	b29b      	uxth	r3, r3
 800246c:	8013      	strh	r3, [r2, #0]
 800246e:	e215      	b.n	800289c <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002470:	687c      	ldr	r4, [r7, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002478:	b29b      	uxth	r3, r3
 800247a:	441c      	add	r4, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	4423      	add	r3, r4
 8002484:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002488:	461c      	mov	r4, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	88db      	ldrh	r3, [r3, #6]
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	b29b      	uxth	r3, r3
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	b29b      	uxth	r3, r3
 8002496:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002498:	687c      	ldr	r4, [r7, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	441c      	add	r4, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	4423      	add	r3, r4
 80024ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024b0:	461c      	mov	r4, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10e      	bne.n	80024d8 <USB_ActivateEndpoint+0x208>
 80024ba:	8823      	ldrh	r3, [r4, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	8023      	strh	r3, [r4, #0]
 80024c6:	8823      	ldrh	r3, [r4, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	8023      	strh	r3, [r4, #0]
 80024d6:	e02d      	b.n	8002534 <USB_ActivateEndpoint+0x264>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b3e      	cmp	r3, #62	; 0x3e
 80024de:	d812      	bhi.n	8002506 <USB_ActivateEndpoint+0x236>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	085b      	lsrs	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <USB_ActivateEndpoint+0x22a>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	3301      	adds	r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	029b      	lsls	r3, r3, #10
 8002500:	b29b      	uxth	r3, r3
 8002502:	8023      	strh	r3, [r4, #0]
 8002504:	e016      	b.n	8002534 <USB_ActivateEndpoint+0x264>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <USB_ActivateEndpoint+0x250>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3b01      	subs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	b29b      	uxth	r3, r3
 8002524:	029b      	lsls	r3, r3, #10
 8002526:	b29b      	uxth	r3, r3
 8002528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800252c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002530:	b29b      	uxth	r3, r3
 8002532:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b29c      	uxth	r4, r3
 8002542:	4623      	mov	r3, r4
 8002544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d014      	beq.n	8002576 <USB_ActivateEndpoint+0x2a6>
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800255e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002562:	b29c      	uxth	r4, r3
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	441a      	add	r2, r3
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <USB_ActivateEndpoint+0x2e8>)
 8002570:	4323      	orrs	r3, r4
 8002572:	b29b      	uxth	r3, r3
 8002574:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258c:	b29c      	uxth	r4, r3
 800258e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002592:	b29c      	uxth	r4, r3
 8002594:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002598:	b29c      	uxth	r4, r3
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	441a      	add	r2, r3
 80025a4:	4b02      	ldr	r3, [pc, #8]	; (80025b0 <USB_ActivateEndpoint+0x2e0>)
 80025a6:	4323      	orrs	r3, r4
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	8013      	strh	r3, [r2, #0]
 80025ac:	e176      	b.n	800289c <USB_ActivateEndpoint+0x5cc>
 80025ae:	bf00      	nop
 80025b0:	ffff8080 	.word	0xffff8080
 80025b4:	ffff80c0 	.word	0xffff80c0
 80025b8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d2:	b29c      	uxth	r4, r3
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	441a      	add	r2, r3
 80025de:	4b96      	ldr	r3, [pc, #600]	; (8002838 <USB_ActivateEndpoint+0x568>)
 80025e0:	4323      	orrs	r3, r4
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80025e6:	687c      	ldr	r4, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	441c      	add	r4, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	4423      	add	r3, r4
 80025fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025fe:	461c      	mov	r4, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	891b      	ldrh	r3, [r3, #8]
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	b29b      	uxth	r3, r3
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	b29b      	uxth	r3, r3
 800260c:	8023      	strh	r3, [r4, #0]
 800260e:	687c      	ldr	r4, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002616:	b29b      	uxth	r3, r3
 8002618:	441c      	add	r4, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	4423      	add	r3, r4
 8002622:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002626:	461c      	mov	r4, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	895b      	ldrh	r3, [r3, #10]
 800262c:	085b      	lsrs	r3, r3, #1
 800262e:	b29b      	uxth	r3, r3
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	b29b      	uxth	r3, r3
 8002634:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 8088 	bne.w	8002750 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29c      	uxth	r4, r3
 800264e:	4623      	mov	r3, r4
 8002650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d014      	beq.n	8002682 <USB_ActivateEndpoint+0x3b2>
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800266a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266e:	b29c      	uxth	r4, r3
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	4b70      	ldr	r3, [pc, #448]	; (800283c <USB_ActivateEndpoint+0x56c>)
 800267c:	4323      	orrs	r3, r4
 800267e:	b29b      	uxth	r3, r3
 8002680:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29c      	uxth	r4, r3
 8002690:	4623      	mov	r3, r4
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d014      	beq.n	80026c4 <USB_ActivateEndpoint+0x3f4>
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b0:	b29c      	uxth	r4, r3
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	441a      	add	r2, r3
 80026bc:	4b60      	ldr	r3, [pc, #384]	; (8002840 <USB_ActivateEndpoint+0x570>)
 80026be:	4323      	orrs	r3, r4
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	b29c      	uxth	r4, r3
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	441a      	add	r2, r3
 80026e6:	4b56      	ldr	r3, [pc, #344]	; (8002840 <USB_ActivateEndpoint+0x570>)
 80026e8:	4323      	orrs	r3, r4
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002704:	b29c      	uxth	r4, r3
 8002706:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800270a:	b29c      	uxth	r4, r3
 800270c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002710:	b29c      	uxth	r4, r3
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	441a      	add	r2, r3
 800271c:	4b49      	ldr	r3, [pc, #292]	; (8002844 <USB_ActivateEndpoint+0x574>)
 800271e:	4323      	orrs	r3, r4
 8002720:	b29b      	uxth	r3, r3
 8002722:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800273a:	b29c      	uxth	r4, r3
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	441a      	add	r2, r3
 8002746:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <USB_ActivateEndpoint+0x574>)
 8002748:	4323      	orrs	r3, r4
 800274a:	b29b      	uxth	r3, r3
 800274c:	8013      	strh	r3, [r2, #0]
 800274e:	e0a5      	b.n	800289c <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	b29c      	uxth	r4, r3
 800275e:	4623      	mov	r3, r4
 8002760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d014      	beq.n	8002792 <USB_ActivateEndpoint+0x4c2>
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	b29c      	uxth	r4, r3
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	441a      	add	r2, r3
 800278a:	4b2c      	ldr	r3, [pc, #176]	; (800283c <USB_ActivateEndpoint+0x56c>)
 800278c:	4323      	orrs	r3, r4
 800278e:	b29b      	uxth	r3, r3
 8002790:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29c      	uxth	r4, r3
 80027a0:	4623      	mov	r3, r4
 80027a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d014      	beq.n	80027d4 <USB_ActivateEndpoint+0x504>
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c0:	b29c      	uxth	r4, r3
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	441a      	add	r2, r3
 80027cc:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <USB_ActivateEndpoint+0x570>)
 80027ce:	4323      	orrs	r3, r4
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ea:	b29c      	uxth	r4, r3
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	441a      	add	r2, r3
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <USB_ActivateEndpoint+0x56c>)
 80027f8:	4323      	orrs	r3, r4
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	78db      	ldrb	r3, [r3, #3]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d020      	beq.n	8002848 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800281c:	b29c      	uxth	r4, r3
 800281e:	f084 0320 	eor.w	r3, r4, #32
 8002822:	b29c      	uxth	r4, r3
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	441a      	add	r2, r3
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <USB_ActivateEndpoint+0x574>)
 8002830:	4323      	orrs	r3, r4
 8002832:	b29b      	uxth	r3, r3
 8002834:	8013      	strh	r3, [r2, #0]
 8002836:	e01c      	b.n	8002872 <USB_ActivateEndpoint+0x5a2>
 8002838:	ffff8180 	.word	0xffff8180
 800283c:	ffffc080 	.word	0xffffc080
 8002840:	ffff80c0 	.word	0xffff80c0
 8002844:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800285a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800285e:	b29c      	uxth	r4, r3
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	441a      	add	r2, r3
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <USB_ActivateEndpoint+0x5d8>)
 800286c:	4323      	orrs	r3, r4
 800286e:	b29b      	uxth	r3, r3
 8002870:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002888:	b29c      	uxth	r4, r3
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	441a      	add	r2, r3
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <USB_ActivateEndpoint+0x5d8>)
 8002896:	4323      	orrs	r3, r4
 8002898:	b29b      	uxth	r3, r3
 800289a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc90      	pop	{r4, r7}
 80028a6:	4770      	bx	lr
 80028a8:	ffff8080 	.word	0xffff8080

080028ac <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80028ac:	b490      	push	{r4, r7}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	7b1b      	ldrb	r3, [r3, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d171      	bne.n	80029a2 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	785b      	ldrb	r3, [r3, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d036      	beq.n	8002934 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29c      	uxth	r4, r3
 80028d4:	4623      	mov	r3, r4
 80028d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d014      	beq.n	8002908 <USB_DeactivateEndpoint+0x5c>
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f4:	b29c      	uxth	r4, r3
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	441a      	add	r2, r3
 8002900:	4b6b      	ldr	r3, [pc, #428]	; (8002ab0 <USB_DeactivateEndpoint+0x204>)
 8002902:	4323      	orrs	r3, r4
 8002904:	b29b      	uxth	r3, r3
 8002906:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800291e:	b29c      	uxth	r4, r3
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	441a      	add	r2, r3
 800292a:	4b62      	ldr	r3, [pc, #392]	; (8002ab4 <USB_DeactivateEndpoint+0x208>)
 800292c:	4323      	orrs	r3, r4
 800292e:	b29b      	uxth	r3, r3
 8002930:	8013      	strh	r3, [r2, #0]
 8002932:	e144      	b.n	8002bbe <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	b29c      	uxth	r4, r3
 8002942:	4623      	mov	r3, r4
 8002944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d014      	beq.n	8002976 <USB_DeactivateEndpoint+0xca>
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	b29c      	uxth	r4, r3
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	441a      	add	r2, r3
 800296e:	4b52      	ldr	r3, [pc, #328]	; (8002ab8 <USB_DeactivateEndpoint+0x20c>)
 8002970:	4323      	orrs	r3, r4
 8002972:	b29b      	uxth	r3, r3
 8002974:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298c:	b29c      	uxth	r4, r3
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	441a      	add	r2, r3
 8002998:	4b46      	ldr	r3, [pc, #280]	; (8002ab4 <USB_DeactivateEndpoint+0x208>)
 800299a:	4323      	orrs	r3, r4
 800299c:	b29b      	uxth	r3, r3
 800299e:	8013      	strh	r3, [r2, #0]
 80029a0:	e10d      	b.n	8002bbe <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	785b      	ldrb	r3, [r3, #1]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 8088 	bne.w	8002abc <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b29c      	uxth	r4, r3
 80029ba:	4623      	mov	r3, r4
 80029bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d014      	beq.n	80029ee <USB_DeactivateEndpoint+0x142>
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	b29c      	uxth	r4, r3
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	441a      	add	r2, r3
 80029e6:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <USB_DeactivateEndpoint+0x20c>)
 80029e8:	4323      	orrs	r3, r4
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29c      	uxth	r4, r3
 80029fc:	4623      	mov	r3, r4
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d014      	beq.n	8002a30 <USB_DeactivateEndpoint+0x184>
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1c:	b29c      	uxth	r4, r3
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	441a      	add	r2, r3
 8002a28:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <USB_DeactivateEndpoint+0x204>)
 8002a2a:	4323      	orrs	r3, r4
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	b29c      	uxth	r4, r3
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	441a      	add	r2, r3
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <USB_DeactivateEndpoint+0x204>)
 8002a54:	4323      	orrs	r3, r4
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a70:	b29c      	uxth	r4, r3
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	441a      	add	r2, r3
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <USB_DeactivateEndpoint+0x208>)
 8002a7e:	4323      	orrs	r3, r4
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a9a:	b29c      	uxth	r4, r3
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	441a      	add	r2, r3
 8002aa6:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <USB_DeactivateEndpoint+0x208>)
 8002aa8:	4323      	orrs	r3, r4
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8013      	strh	r3, [r2, #0]
 8002aae:	e086      	b.n	8002bbe <USB_DeactivateEndpoint+0x312>
 8002ab0:	ffff80c0 	.word	0xffff80c0
 8002ab4:	ffff8080 	.word	0xffff8080
 8002ab8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	b29c      	uxth	r4, r3
 8002aca:	4623      	mov	r3, r4
 8002acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d014      	beq.n	8002afe <USB_DeactivateEndpoint+0x252>
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aea:	b29c      	uxth	r4, r3
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	441a      	add	r2, r3
 8002af6:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <USB_DeactivateEndpoint+0x320>)
 8002af8:	4323      	orrs	r3, r4
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	b29c      	uxth	r4, r3
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d014      	beq.n	8002b40 <USB_DeactivateEndpoint+0x294>
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2c:	b29c      	uxth	r4, r3
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	441a      	add	r2, r3
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <USB_DeactivateEndpoint+0x324>)
 8002b3a:	4323      	orrs	r3, r4
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	b29c      	uxth	r4, r3
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	441a      	add	r2, r3
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <USB_DeactivateEndpoint+0x320>)
 8002b64:	4323      	orrs	r3, r4
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b80:	b29c      	uxth	r4, r3
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	441a      	add	r2, r3
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <USB_DeactivateEndpoint+0x328>)
 8002b8e:	4323      	orrs	r3, r4
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002baa:	b29c      	uxth	r4, r3
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	441a      	add	r2, r3
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <USB_DeactivateEndpoint+0x328>)
 8002bb8:	4323      	orrs	r3, r4
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc90      	pop	{r4, r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	ffffc080 	.word	0xffffc080
 8002bd0:	ffff80c0 	.word	0xffff80c0
 8002bd4:	ffff8080 	.word	0xffff8080

08002bd8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b08d      	sub	sp, #52	; 0x34
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	785b      	ldrb	r3, [r3, #1]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	f040 8160 	bne.w	8002eac <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d909      	bls.n	8002c0c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	1ad2      	subs	r2, r2, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	619a      	str	r2, [r3, #24]
 8002c0a:	e005      	b.n	8002c18 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	7b1b      	ldrb	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d119      	bne.n	8002c54 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	6959      	ldr	r1, [r3, #20]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	88da      	ldrh	r2, [r3, #6]
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fba2 	bl	8003376 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002c32:	687c      	ldr	r4, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	441c      	add	r4, r3
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	4423      	add	r3, r4
 8002c46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c4a:	461c      	mov	r4, r3
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	8023      	strh	r3, [r4, #0]
 8002c52:	e10f      	b.n	8002e74 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d065      	beq.n	8002d36 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002c6a:	687c      	ldr	r4, [r7, #4]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	785b      	ldrb	r3, [r3, #1]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d148      	bne.n	8002d06 <USB_EPStartXfer+0x12e>
 8002c74:	687c      	ldr	r4, [r7, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	441c      	add	r4, r3
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	4423      	add	r3, r4
 8002c88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c8c:	461c      	mov	r4, r3
 8002c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10e      	bne.n	8002cb2 <USB_EPStartXfer+0xda>
 8002c94:	8823      	ldrh	r3, [r4, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	8023      	strh	r3, [r4, #0]
 8002ca0:	8823      	ldrh	r3, [r4, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	8023      	strh	r3, [r4, #0]
 8002cb0:	e03d      	b.n	8002d2e <USB_EPStartXfer+0x156>
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	2b3e      	cmp	r3, #62	; 0x3e
 8002cb6:	d810      	bhi.n	8002cda <USB_EPStartXfer+0x102>
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <USB_EPStartXfer+0xf6>
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	3301      	adds	r3, #1
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	029b      	lsls	r3, r3, #10
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	8023      	strh	r3, [r4, #0]
 8002cd8:	e029      	b.n	8002d2e <USB_EPStartXfer+0x156>
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <USB_EPStartXfer+0x118>
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	3b01      	subs	r3, #1
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	029b      	lsls	r3, r3, #10
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	8023      	strh	r3, [r4, #0]
 8002d04:	e013      	b.n	8002d2e <USB_EPStartXfer+0x156>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	785b      	ldrb	r3, [r3, #1]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10f      	bne.n	8002d2e <USB_EPStartXfer+0x156>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	441c      	add	r4, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	4423      	add	r3, r4
 8002d20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	895b      	ldrh	r3, [r3, #10]
 8002d32:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002d34:	e063      	b.n	8002dfe <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	785b      	ldrb	r3, [r3, #1]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d148      	bne.n	8002dd0 <USB_EPStartXfer+0x1f8>
 8002d3e:	687c      	ldr	r4, [r7, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	441c      	add	r4, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	4423      	add	r3, r4
 8002d52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d56:	461c      	mov	r4, r3
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10e      	bne.n	8002d7c <USB_EPStartXfer+0x1a4>
 8002d5e:	8823      	ldrh	r3, [r4, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	8023      	strh	r3, [r4, #0]
 8002d6a:	8823      	ldrh	r3, [r4, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	8023      	strh	r3, [r4, #0]
 8002d7a:	e03d      	b.n	8002df8 <USB_EPStartXfer+0x220>
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d80:	d810      	bhi.n	8002da4 <USB_EPStartXfer+0x1cc>
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	623b      	str	r3, [r7, #32]
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <USB_EPStartXfer+0x1c0>
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	3301      	adds	r3, #1
 8002d96:	623b      	str	r3, [r7, #32]
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	029b      	lsls	r3, r3, #10
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	8023      	strh	r3, [r4, #0]
 8002da2:	e029      	b.n	8002df8 <USB_EPStartXfer+0x220>
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	623b      	str	r3, [r7, #32]
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <USB_EPStartXfer+0x1e2>
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	623b      	str	r3, [r7, #32]
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	029b      	lsls	r3, r3, #10
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	8023      	strh	r3, [r4, #0]
 8002dce:	e013      	b.n	8002df8 <USB_EPStartXfer+0x220>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	785b      	ldrb	r3, [r3, #1]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d10f      	bne.n	8002df8 <USB_EPStartXfer+0x220>
 8002dd8:	687c      	ldr	r4, [r7, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	441c      	add	r4, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	4423      	add	r3, r4
 8002dec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002df0:	461c      	mov	r4, r3
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	891b      	ldrh	r3, [r3, #8]
 8002dfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6959      	ldr	r1, [r3, #20]
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fab4 	bl	8003376 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	785b      	ldrb	r3, [r3, #1]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d115      	bne.n	8002e42 <USB_EPStartXfer+0x26a>
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2c:	b29c      	uxth	r4, r3
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	441a      	add	r2, r3
 8002e38:	4b9a      	ldr	r3, [pc, #616]	; (80030a4 <USB_EPStartXfer+0x4cc>)
 8002e3a:	4323      	orrs	r3, r4
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	8013      	strh	r3, [r2, #0]
 8002e40:	e018      	b.n	8002e74 <USB_EPStartXfer+0x29c>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	785b      	ldrb	r3, [r3, #1]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d114      	bne.n	8002e74 <USB_EPStartXfer+0x29c>
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e60:	b29c      	uxth	r4, r3
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	441a      	add	r2, r3
 8002e6c:	4b8e      	ldr	r3, [pc, #568]	; (80030a8 <USB_EPStartXfer+0x4d0>)
 8002e6e:	4323      	orrs	r3, r4
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e8a:	b29c      	uxth	r4, r3
 8002e8c:	f084 0310 	eor.w	r3, r4, #16
 8002e90:	b29c      	uxth	r4, r3
 8002e92:	f084 0320 	eor.w	r3, r4, #32
 8002e96:	b29c      	uxth	r4, r3
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	4b82      	ldr	r3, [pc, #520]	; (80030ac <USB_EPStartXfer+0x4d4>)
 8002ea4:	4323      	orrs	r3, r4
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	8013      	strh	r3, [r2, #0]
 8002eaa:	e146      	b.n	800313a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d909      	bls.n	8002ecc <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec4:	1ad2      	subs	r2, r2, r3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	619a      	str	r2, [r3, #24]
 8002eca:	e005      	b.n	8002ed8 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	7b1b      	ldrb	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d148      	bne.n	8002f72 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002ee0:	687c      	ldr	r4, [r7, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	441c      	add	r4, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	4423      	add	r3, r4
 8002ef4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ef8:	461c      	mov	r4, r3
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10e      	bne.n	8002f1e <USB_EPStartXfer+0x346>
 8002f00:	8823      	ldrh	r3, [r4, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	8023      	strh	r3, [r4, #0]
 8002f0c:	8823      	ldrh	r3, [r4, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	8023      	strh	r3, [r4, #0]
 8002f1c:	e0f2      	b.n	8003104 <USB_EPStartXfer+0x52c>
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	2b3e      	cmp	r3, #62	; 0x3e
 8002f22:	d810      	bhi.n	8002f46 <USB_EPStartXfer+0x36e>
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	085b      	lsrs	r3, r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <USB_EPStartXfer+0x362>
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3301      	adds	r3, #1
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	029b      	lsls	r3, r3, #10
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	8023      	strh	r3, [r4, #0]
 8002f44:	e0de      	b.n	8003104 <USB_EPStartXfer+0x52c>
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <USB_EPStartXfer+0x384>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	029b      	lsls	r3, r3, #10
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	8023      	strh	r3, [r4, #0]
 8002f70:	e0c8      	b.n	8003104 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d148      	bne.n	800300c <USB_EPStartXfer+0x434>
 8002f7a:	687c      	ldr	r4, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	441c      	add	r4, r3
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	4423      	add	r3, r4
 8002f8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f92:	461c      	mov	r4, r3
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <USB_EPStartXfer+0x3e0>
 8002f9a:	8823      	ldrh	r3, [r4, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	8023      	strh	r3, [r4, #0]
 8002fa6:	8823      	ldrh	r3, [r4, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	8023      	strh	r3, [r4, #0]
 8002fb6:	e03d      	b.n	8003034 <USB_EPStartXfer+0x45c>
 8002fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fba:	2b3e      	cmp	r3, #62	; 0x3e
 8002fbc:	d810      	bhi.n	8002fe0 <USB_EPStartXfer+0x408>
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <USB_EPStartXfer+0x3fc>
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	029b      	lsls	r3, r3, #10
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	8023      	strh	r3, [r4, #0]
 8002fde:	e029      	b.n	8003034 <USB_EPStartXfer+0x45c>
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <USB_EPStartXfer+0x41e>
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	029b      	lsls	r3, r3, #10
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003006:	b29b      	uxth	r3, r3
 8003008:	8023      	strh	r3, [r4, #0]
 800300a:	e013      	b.n	8003034 <USB_EPStartXfer+0x45c>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	785b      	ldrb	r3, [r3, #1]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10f      	bne.n	8003034 <USB_EPStartXfer+0x45c>
 8003014:	687c      	ldr	r4, [r7, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301c:	b29b      	uxth	r3, r3
 800301e:	441c      	add	r4, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	4423      	add	r3, r4
 8003028:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800302c:	461c      	mov	r4, r3
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	b29b      	uxth	r3, r3
 8003032:	8023      	strh	r3, [r4, #0]
 8003034:	687c      	ldr	r4, [r7, #4]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	785b      	ldrb	r3, [r3, #1]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d14e      	bne.n	80030dc <USB_EPStartXfer+0x504>
 800303e:	687c      	ldr	r4, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003046:	b29b      	uxth	r3, r3
 8003048:	441c      	add	r4, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	4423      	add	r3, r4
 8003052:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003056:	461c      	mov	r4, r3
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10e      	bne.n	800307c <USB_EPStartXfer+0x4a4>
 800305e:	8823      	ldrh	r3, [r4, #0]
 8003060:	b29b      	uxth	r3, r3
 8003062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003066:	b29b      	uxth	r3, r3
 8003068:	8023      	strh	r3, [r4, #0]
 800306a:	8823      	ldrh	r3, [r4, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003076:	b29b      	uxth	r3, r3
 8003078:	8023      	strh	r3, [r4, #0]
 800307a:	e043      	b.n	8003104 <USB_EPStartXfer+0x52c>
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	2b3e      	cmp	r3, #62	; 0x3e
 8003080:	d816      	bhi.n	80030b0 <USB_EPStartXfer+0x4d8>
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	085b      	lsrs	r3, r3, #1
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <USB_EPStartXfer+0x4c0>
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3301      	adds	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	b29b      	uxth	r3, r3
 800309c:	029b      	lsls	r3, r3, #10
 800309e:	b29b      	uxth	r3, r3
 80030a0:	8023      	strh	r3, [r4, #0]
 80030a2:	e02f      	b.n	8003104 <USB_EPStartXfer+0x52c>
 80030a4:	ffff80c0 	.word	0xffff80c0
 80030a8:	ffffc080 	.word	0xffffc080
 80030ac:	ffff8080 	.word	0xffff8080
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <USB_EPStartXfer+0x4ee>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	029b      	lsls	r3, r3, #10
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	8023      	strh	r3, [r4, #0]
 80030da:	e013      	b.n	8003104 <USB_EPStartXfer+0x52c>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	785b      	ldrb	r3, [r3, #1]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d10f      	bne.n	8003104 <USB_EPStartXfer+0x52c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	441c      	add	r4, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	4423      	add	r3, r4
 80030f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fe:	b29a      	uxth	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	b29c      	uxth	r4, r3
 800311c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003120:	b29c      	uxth	r4, r3
 8003122:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003126:	b29c      	uxth	r4, r3
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	441a      	add	r2, r3
 8003132:	4b04      	ldr	r3, [pc, #16]	; (8003144 <USB_EPStartXfer+0x56c>)
 8003134:	4323      	orrs	r3, r4
 8003136:	b29b      	uxth	r3, r3
 8003138:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3734      	adds	r7, #52	; 0x34
 8003140:	46bd      	mov	sp, r7
 8003142:	bd90      	pop	{r4, r7, pc}
 8003144:	ffff8080 	.word	0xffff8080

08003148 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003148:	b490      	push	{r4, r7}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	785b      	ldrb	r3, [r3, #1]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d018      	beq.n	800318c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003170:	b29c      	uxth	r4, r3
 8003172:	f084 0310 	eor.w	r3, r4, #16
 8003176:	b29c      	uxth	r4, r3
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	441a      	add	r2, r3
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <USB_EPSetStall+0x80>)
 8003184:	4323      	orrs	r3, r4
 8003186:	b29b      	uxth	r3, r3
 8003188:	8013      	strh	r3, [r2, #0]
 800318a:	e017      	b.n	80031bc <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	b29c      	uxth	r4, r3
 80031a4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80031a8:	b29c      	uxth	r4, r3
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	441a      	add	r2, r3
 80031b4:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <USB_EPSetStall+0x80>)
 80031b6:	4323      	orrs	r3, r4
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc90      	pop	{r4, r7}
 80031c6:	4770      	bx	lr
 80031c8:	ffff8080 	.word	0xffff8080

080031cc <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80031cc:	b490      	push	{r4, r7}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	7b1b      	ldrb	r3, [r3, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d17d      	bne.n	80032da <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	785b      	ldrb	r3, [r3, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d03d      	beq.n	8003262 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	b29c      	uxth	r4, r3
 80031f4:	4623      	mov	r3, r4
 80031f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d014      	beq.n	8003228 <USB_EPClearStall+0x5c>
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003214:	b29c      	uxth	r4, r3
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	441a      	add	r2, r3
 8003220:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <USB_EPClearStall+0x11c>)
 8003222:	4323      	orrs	r3, r4
 8003224:	b29b      	uxth	r3, r3
 8003226:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	78db      	ldrb	r3, [r3, #3]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d054      	beq.n	80032da <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29b      	uxth	r3, r3
 800323e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003246:	b29c      	uxth	r4, r3
 8003248:	f084 0320 	eor.w	r3, r4, #32
 800324c:	b29c      	uxth	r4, r3
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	441a      	add	r2, r3
 8003258:	4b24      	ldr	r3, [pc, #144]	; (80032ec <USB_EPClearStall+0x120>)
 800325a:	4323      	orrs	r3, r4
 800325c:	b29b      	uxth	r3, r3
 800325e:	8013      	strh	r3, [r2, #0]
 8003260:	e03b      	b.n	80032da <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29c      	uxth	r4, r3
 8003270:	4623      	mov	r3, r4
 8003272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d014      	beq.n	80032a4 <USB_EPClearStall+0xd8>
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003290:	b29c      	uxth	r4, r3
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	441a      	add	r2, r3
 800329c:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <USB_EPClearStall+0x124>)
 800329e:	4323      	orrs	r3, r4
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	b29c      	uxth	r4, r3
 80032bc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80032c0:	b29c      	uxth	r4, r3
 80032c2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80032c6:	b29c      	uxth	r4, r3
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	441a      	add	r2, r3
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <USB_EPClearStall+0x120>)
 80032d4:	4323      	orrs	r3, r4
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc90      	pop	{r4, r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	ffff80c0 	.word	0xffff80c0
 80032ec:	ffff8080 	.word	0xffff8080
 80032f0:	ffffc080 	.word	0xffffc080

080032f4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d103      	bne.n	800330e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2280      	movs	r2, #128	; 0x80
 800330a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003350:	b29b      	uxth	r3, r3
 8003352:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003354:	68fb      	ldr	r3, [r7, #12]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003376:	b480      	push	{r7}
 8003378:	b08d      	sub	sp, #52	; 0x34
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	4611      	mov	r1, r2
 8003382:	461a      	mov	r2, r3
 8003384:	460b      	mov	r3, r1
 8003386:	80fb      	strh	r3, [r7, #6]
 8003388:	4613      	mov	r3, r2
 800338a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800338c:	88bb      	ldrh	r3, [r7, #4]
 800338e:	3301      	adds	r3, #1
 8003390:	085b      	lsrs	r3, r3, #1
 8003392:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	005a      	lsls	r2, r3, #1
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ae:	e01e      	b.n	80033ee <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	3301      	adds	r3, #1
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80033d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d8:	3302      	adds	r3, #2
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	3302      	adds	r3, #2
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	3301      	adds	r3, #1
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ea:	3b01      	subs	r3, #1
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1dd      	bne.n	80033b0 <USB_WritePMA+0x3a>
  }
}
 80033f4:	bf00      	nop
 80033f6:	3734      	adds	r7, #52	; 0x34
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80033fe:	b480      	push	{r7}
 8003400:	b08b      	sub	sp, #44	; 0x2c
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	4611      	mov	r1, r2
 800340a:	461a      	mov	r2, r3
 800340c:	460b      	mov	r3, r1
 800340e:	80fb      	strh	r3, [r7, #6]
 8003410:	4613      	mov	r3, r2
 8003412:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003414:	88bb      	ldrh	r3, [r7, #4]
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	b29b      	uxth	r3, r3
 800341a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	005a      	lsls	r2, r3, #1
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003430:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
 8003436:	e01b      	b.n	8003470 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	3302      	adds	r3, #2
 8003444:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3301      	adds	r3, #1
 8003452:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	b2da      	uxtb	r2, r3
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3301      	adds	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	3302      	adds	r3, #2
 8003468:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	3b01      	subs	r3, #1
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e0      	bne.n	8003438 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003476:	88bb      	ldrh	r3, [r7, #4]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	701a      	strb	r2, [r3, #0]
  }
}
 8003492:	bf00      	nop
 8003494:	372c      	adds	r7, #44	; 0x2c
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7c1b      	ldrb	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d115      	bne.n	80034e0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80034b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034b8:	2202      	movs	r2, #2
 80034ba:	2181      	movs	r1, #129	; 0x81
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f004 fc80 	bl	8007dc2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80034c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034cc:	2202      	movs	r2, #2
 80034ce:	2101      	movs	r1, #1
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f004 fc76 	bl	8007dc2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80034de:	e012      	b.n	8003506 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80034e0:	2340      	movs	r3, #64	; 0x40
 80034e2:	2202      	movs	r2, #2
 80034e4:	2181      	movs	r1, #129	; 0x81
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f004 fc6b 	bl	8007dc2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80034f2:	2340      	movs	r3, #64	; 0x40
 80034f4:	2202      	movs	r2, #2
 80034f6:	2101      	movs	r1, #1
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f004 fc62 	bl	8007dc2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003506:	2308      	movs	r3, #8
 8003508:	2203      	movs	r2, #3
 800350a:	2182      	movs	r1, #130	; 0x82
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f004 fc58 	bl	8007dc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003518:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800351c:	f004 fd72 	bl	8008004 <USBD_static_malloc>
 8003520:	4602      	mov	r2, r0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
 8003536:	e026      	b.n	8003586 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800353e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2200      	movs	r2, #0
 800354e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2200      	movs	r2, #0
 8003556:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	7c1b      	ldrb	r3, [r3, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800356c:	2101      	movs	r1, #1
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f004 fd11 	bl	8007f96 <USBD_LL_PrepareReceive>
 8003574:	e007      	b.n	8003586 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800357c:	2340      	movs	r3, #64	; 0x40
 800357e:	2101      	movs	r1, #1
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f004 fd08 	bl	8007f96 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80035a0:	2181      	movs	r1, #129	; 0x81
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f004 fc33 	bl	8007e0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80035ae:	2101      	movs	r1, #1
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f004 fc2c 	bl	8007e0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80035be:	2182      	movs	r1, #130	; 0x82
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f004 fc24 	bl	8007e0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00e      	beq.n	80035f4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 fd18 	bl	800801c <USBD_static_free>
    pdev->pClassData = NULL;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b086      	sub	sp, #24
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800360e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003624:	2b00      	cmp	r3, #0
 8003626:	d039      	beq.n	800369c <USBD_CDC_Setup+0x9e>
 8003628:	2b20      	cmp	r3, #32
 800362a:	d17c      	bne.n	8003726 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	88db      	ldrh	r3, [r3, #6]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d029      	beq.n	8003688 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	b25b      	sxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	da11      	bge.n	8003662 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800364a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	88d2      	ldrh	r2, [r2, #6]
 8003650:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003652:	6939      	ldr	r1, [r7, #16]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	88db      	ldrh	r3, [r3, #6]
 8003658:	461a      	mov	r2, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f001 f9f6 	bl	8004a4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8003660:	e068      	b.n	8003734 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	785a      	ldrb	r2, [r3, #1]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	88db      	ldrh	r3, [r3, #6]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003678:	6939      	ldr	r1, [r7, #16]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	88db      	ldrh	r3, [r3, #6]
 800367e:	461a      	mov	r2, r3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f001 fa11 	bl	8004aa8 <USBD_CtlPrepareRx>
      break;
 8003686:	e055      	b.n	8003734 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	7850      	ldrb	r0, [r2, #1]
 8003694:	2200      	movs	r2, #0
 8003696:	6839      	ldr	r1, [r7, #0]
 8003698:	4798      	blx	r3
      break;
 800369a:	e04b      	b.n	8003734 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	785b      	ldrb	r3, [r3, #1]
 80036a0:	2b0a      	cmp	r3, #10
 80036a2:	d017      	beq.n	80036d4 <USBD_CDC_Setup+0xd6>
 80036a4:	2b0b      	cmp	r3, #11
 80036a6:	d029      	beq.n	80036fc <USBD_CDC_Setup+0xfe>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d133      	bne.n	8003714 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d107      	bne.n	80036c6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80036b6:	f107 030c 	add.w	r3, r7, #12
 80036ba:	2202      	movs	r2, #2
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f001 f9c4 	bl	8004a4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80036c4:	e02e      	b.n	8003724 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80036c6:	6839      	ldr	r1, [r7, #0]
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f001 f955 	bl	8004978 <USBD_CtlError>
            ret = USBD_FAIL;
 80036ce:	2302      	movs	r3, #2
 80036d0:	75fb      	strb	r3, [r7, #23]
          break;
 80036d2:	e027      	b.n	8003724 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d107      	bne.n	80036ee <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80036de:	f107 030f 	add.w	r3, r7, #15
 80036e2:	2201      	movs	r2, #1
 80036e4:	4619      	mov	r1, r3
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f001 f9b0 	bl	8004a4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80036ec:	e01a      	b.n	8003724 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80036ee:	6839      	ldr	r1, [r7, #0]
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f001 f941 	bl	8004978 <USBD_CtlError>
            ret = USBD_FAIL;
 80036f6:	2302      	movs	r3, #2
 80036f8:	75fb      	strb	r3, [r7, #23]
          break;
 80036fa:	e013      	b.n	8003724 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003702:	2b03      	cmp	r3, #3
 8003704:	d00d      	beq.n	8003722 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8003706:	6839      	ldr	r1, [r7, #0]
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f001 f935 	bl	8004978 <USBD_CtlError>
            ret = USBD_FAIL;
 800370e:	2302      	movs	r3, #2
 8003710:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8003712:	e006      	b.n	8003722 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f001 f92e 	bl	8004978 <USBD_CtlError>
          ret = USBD_FAIL;
 800371c:	2302      	movs	r3, #2
 800371e:	75fb      	strb	r3, [r7, #23]
          break;
 8003720:	e000      	b.n	8003724 <USBD_CDC_Setup+0x126>
          break;
 8003722:	bf00      	nop
      }
      break;
 8003724:	e006      	b.n	8003734 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8003726:	6839      	ldr	r1, [r7, #0]
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f001 f925 	bl	8004978 <USBD_CtlError>
      ret = USBD_FAIL;
 800372e:	2302      	movs	r3, #2
 8003730:	75fb      	strb	r3, [r7, #23]
      break;
 8003732:	bf00      	nop
  }

  return ret;
 8003734:	7dfb      	ldrb	r3, [r7, #23]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	460b      	mov	r3, r1
 8003748:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003750:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003758:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d037      	beq.n	80037d4 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	331c      	adds	r3, #28
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d026      	beq.n	80037c8 <USBD_CDC_DataIn+0x8a>
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	331c      	adds	r3, #28
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	0152      	lsls	r2, r2, #5
 8003792:	440a      	add	r2, r1
 8003794:	3238      	adds	r2, #56	; 0x38
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	fbb3 f1f2 	udiv	r1, r3, r2
 800379c:	fb02 f201 	mul.w	r2, r2, r1
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d110      	bne.n	80037c8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80037a6:	78fa      	ldrb	r2, [r7, #3]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	331c      	adds	r3, #28
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80037ba:	78f9      	ldrb	r1, [r7, #3]
 80037bc:	2300      	movs	r3, #0
 80037be:	2200      	movs	r2, #0
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f004 fbc5 	bl	8007f50 <USBD_LL_Transmit>
 80037c6:	e003      	b.n	80037d0 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e000      	b.n	80037d6 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80037d4:	2302      	movs	r3, #2
  }
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	4619      	mov	r1, r3
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f004 fbf0 	bl	8007fdc <USBD_LL_GetRxDataSize>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00d      	beq.n	800382a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8003822:	4611      	mov	r1, r2
 8003824:	4798      	blx	r3

    return USBD_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800382a:	2302      	movs	r3, #2
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003842:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800384a:	2b00      	cmp	r3, #0
 800384c:	d015      	beq.n	800387a <USBD_CDC_EP0_RxReady+0x46>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003854:	2bff      	cmp	r3, #255	; 0xff
 8003856:	d010      	beq.n	800387a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8003866:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800386e:	b292      	uxth	r2, r2
 8003870:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2243      	movs	r2, #67	; 0x43
 8003890:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8003892:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000090 	.word	0x20000090

080038a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2243      	movs	r2, #67	; 0x43
 80038b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80038b2:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	2000004c 	.word	0x2000004c

080038c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2243      	movs	r2, #67	; 0x43
 80038d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80038d2:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	200000d4 	.word	0x200000d4

080038e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	220a      	movs	r2, #10
 80038f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80038f2:	4b03      	ldr	r3, [pc, #12]	; (8003900 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000008 	.word	0x20000008

08003904 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800390e:	2302      	movs	r3, #2
 8003910:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	4613      	mov	r3, r2
 800393c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003944:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800394e:	88fa      	ldrh	r2, [r7, #6]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8003962:	b480      	push	{r7}
 8003964:	b085      	sub	sp, #20
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003972:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003996:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01c      	beq.n	80039dc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d115      	bne.n	80039d8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2181      	movs	r1, #129	; 0x81
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f004 fabe 	bl	8007f50 <USBD_LL_Transmit>

      return USBD_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e002      	b.n	80039de <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80039dc:	2302      	movs	r3, #2
  }
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d017      	beq.n	8003a30 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7c1b      	ldrb	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a12:	2101      	movs	r1, #1
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f004 fabe 	bl	8007f96 <USBD_LL_PrepareReceive>
 8003a1a:	e007      	b.n	8003a2c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003a22:	2340      	movs	r3, #64	; 0x40
 8003a24:	2101      	movs	r1, #1
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f004 fab5 	bl	8007f96 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8003a30:	2302      	movs	r3, #2
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	4613      	mov	r3, r2
 8003a46:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e01a      	b.n	8003a88 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	79fa      	ldrb	r2, [r7, #7]
 8003a7e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f004 f929 	bl	8007cd8 <USBD_LL_Init>

  return USBD_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	73fb      	strb	r3, [r7, #15]
 8003ab0:	e001      	b.n	8003ab6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr

08003ac2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f004 f95e 	bl	8007d8c <USBD_LL_Start>

  return USBD_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003afa:	2302      	movs	r3, #2
 8003afc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00c      	beq.n	8003b22 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	4611      	mov	r1, r2
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	4611      	mov	r1, r2
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3

  return USBD_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003b62:	6839      	ldr	r1, [r7, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fecb 	bl	8004900 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8003b78:	461a      	mov	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d00c      	beq.n	8003ba8 <USBD_LL_SetupStage+0x56>
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d302      	bcc.n	8003b98 <USBD_LL_SetupStage+0x46>
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d010      	beq.n	8003bb8 <USBD_LL_SetupStage+0x66>
 8003b96:	e017      	b.n	8003bc8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f9cb 	bl	8003f3c <USBD_StdDevReq>
      break;
 8003ba6:	e01a      	b.n	8003bde <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003bae:	4619      	mov	r1, r3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fa2d 	bl	8004010 <USBD_StdItfReq>
      break;
 8003bb6:	e012      	b.n	8003bde <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fa6b 	bl	800409c <USBD_StdEPReq>
      break;
 8003bc6:	e00a      	b.n	8003bde <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003bce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f004 f938 	bl	8007e4c <USBD_LL_StallEP>
      break;
 8003bdc:	bf00      	nop
  }

  return USBD_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003bf6:	7afb      	ldrb	r3, [r7, #11]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d14b      	bne.n	8003c94 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003c02:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d134      	bne.n	8003c78 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d919      	bls.n	8003c4e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	1ad2      	subs	r2, r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d203      	bcs.n	8003c3c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	e002      	b.n	8003c42 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 ff4c 	bl	8004ae4 <USBD_CtlContinueRx>
 8003c4c:	e038      	b.n	8003cc0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d105      	bne.n	8003c70 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 ff49 	bl	8004b08 <USBD_CtlSendStatus>
 8003c76:	e023      	b.n	8003cc0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d11e      	bne.n	8003cc0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f004 f8dd 	bl	8007e4c <USBD_LL_StallEP>
 8003c92:	e015      	b.n	8003cc0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00d      	beq.n	8003cbc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d108      	bne.n	8003cbc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	7afa      	ldrb	r2, [r7, #11]
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	4798      	blx	r3
 8003cba:	e001      	b.n	8003cc0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e000      	b.n	8003cc2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003cd8:	7afb      	ldrb	r3, [r7, #11]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d17f      	bne.n	8003dde <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3314      	adds	r3, #20
 8003ce2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d15c      	bne.n	8003da8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d915      	bls.n	8003d26 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	1ad2      	subs	r2, r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 feb6 	bl	8004a84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003d18:	2300      	movs	r3, #0
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f004 f939 	bl	8007f96 <USBD_LL_PrepareReceive>
 8003d24:	e04e      	b.n	8003dc4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	6912      	ldr	r2, [r2, #16]
 8003d2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d32:	fb02 f201 	mul.w	r2, r2, r1
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d11c      	bne.n	8003d76 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d316      	bcc.n	8003d76 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d20f      	bcs.n	8003d76 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003d56:	2200      	movs	r2, #0
 8003d58:	2100      	movs	r1, #0
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fe92 	bl	8004a84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f004 f911 	bl	8007f96 <USBD_LL_PrepareReceive>
 8003d74:	e026      	b.n	8003dc4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d105      	bne.n	8003d98 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8003d98:	2180      	movs	r1, #128	; 0x80
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f004 f856 	bl	8007e4c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fec4 	bl	8004b2e <USBD_CtlReceiveStatus>
 8003da6:	e00d      	b.n	8003dc4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d004      	beq.n	8003dbc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d103      	bne.n	8003dc4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f004 f844 	bl	8007e4c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d11d      	bne.n	8003e0a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f7ff fe83 	bl	8003ada <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8003ddc:	e015      	b.n	8003e0a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00d      	beq.n	8003e06 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d108      	bne.n	8003e06 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	7afa      	ldrb	r2, [r7, #11]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	4798      	blx	r3
 8003e04:	e001      	b.n	8003e0a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003e06:	2302      	movs	r3, #2
 8003e08:	e000      	b.n	8003e0c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003e1c:	2340      	movs	r3, #64	; 0x40
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2100      	movs	r1, #0
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f003 ffcd 	bl	8007dc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2240      	movs	r2, #64	; 0x40
 8003e34:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003e38:	2340      	movs	r3, #64	; 0x40
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2180      	movs	r1, #128	; 0x80
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f003 ffbf 	bl	8007dc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2240      	movs	r2, #64	; 0x40
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d009      	beq.n	8003e8c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6852      	ldr	r2, [r2, #4]
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	4611      	mov	r1, r2
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
  }

  return USBD_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr

08003eb4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2204      	movs	r2, #4
 8003ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d105      	bne.n	8003efa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr

08003f06 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d10b      	bne.n	8003f30 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d004      	beq.n	8003f60 <USBD_StdDevReq+0x24>
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d002      	beq.n	8003f60 <USBD_StdDevReq+0x24>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <USBD_StdDevReq+0x34>
 8003f5e:	e04c      	b.n	8003ffa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	6839      	ldr	r1, [r7, #0]
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
      break;
 8003f6e:	e049      	b.n	8004004 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b09      	cmp	r3, #9
 8003f76:	d83a      	bhi.n	8003fee <USBD_StdDevReq+0xb2>
 8003f78:	a201      	add	r2, pc, #4	; (adr r2, 8003f80 <USBD_StdDevReq+0x44>)
 8003f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7e:	bf00      	nop
 8003f80:	08003fd1 	.word	0x08003fd1
 8003f84:	08003fe5 	.word	0x08003fe5
 8003f88:	08003fef 	.word	0x08003fef
 8003f8c:	08003fdb 	.word	0x08003fdb
 8003f90:	08003fef 	.word	0x08003fef
 8003f94:	08003fb3 	.word	0x08003fb3
 8003f98:	08003fa9 	.word	0x08003fa9
 8003f9c:	08003fef 	.word	0x08003fef
 8003fa0:	08003fc7 	.word	0x08003fc7
 8003fa4:	08003fbd 	.word	0x08003fbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8003fa8:	6839      	ldr	r1, [r7, #0]
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f9d4 	bl	8004358 <USBD_GetDescriptor>
          break;
 8003fb0:	e022      	b.n	8003ff8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8003fb2:	6839      	ldr	r1, [r7, #0]
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fb37 	bl	8004628 <USBD_SetAddress>
          break;
 8003fba:	e01d      	b.n	8003ff8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8003fbc:	6839      	ldr	r1, [r7, #0]
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fb74 	bl	80046ac <USBD_SetConfig>
          break;
 8003fc4:	e018      	b.n	8003ff8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fbfd 	bl	80047c8 <USBD_GetConfig>
          break;
 8003fce:	e013      	b.n	8003ff8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8003fd0:	6839      	ldr	r1, [r7, #0]
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fc2c 	bl	8004830 <USBD_GetStatus>
          break;
 8003fd8:	e00e      	b.n	8003ff8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8003fda:	6839      	ldr	r1, [r7, #0]
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fc5a 	bl	8004896 <USBD_SetFeature>
          break;
 8003fe2:	e009      	b.n	8003ff8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8003fe4:	6839      	ldr	r1, [r7, #0]
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fc69 	bl	80048be <USBD_ClrFeature>
          break;
 8003fec:	e004      	b.n	8003ff8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8003fee:	6839      	ldr	r1, [r7, #0]
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fcc1 	bl	8004978 <USBD_CtlError>
          break;
 8003ff6:	bf00      	nop
      }
      break;
 8003ff8:	e004      	b.n	8004004 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8003ffa:	6839      	ldr	r1, [r7, #0]
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fcbb 	bl	8004978 <USBD_CtlError>
      break;
 8004002:	bf00      	nop
  }

  return ret;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop

08004010 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004026:	2b20      	cmp	r3, #32
 8004028:	d003      	beq.n	8004032 <USBD_StdItfReq+0x22>
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	d001      	beq.n	8004032 <USBD_StdItfReq+0x22>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d12a      	bne.n	8004088 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004038:	3b01      	subs	r3, #1
 800403a:	2b02      	cmp	r3, #2
 800403c:	d81d      	bhi.n	800407a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	889b      	ldrh	r3, [r3, #4]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d813      	bhi.n	8004070 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	6839      	ldr	r1, [r7, #0]
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
 8004056:	4603      	mov	r3, r0
 8004058:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	88db      	ldrh	r3, [r3, #6]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d110      	bne.n	8004084 <USBD_StdItfReq+0x74>
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10d      	bne.n	8004084 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fd4d 	bl	8004b08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800406e:	e009      	b.n	8004084 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004070:	6839      	ldr	r1, [r7, #0]
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fc80 	bl	8004978 <USBD_CtlError>
          break;
 8004078:	e004      	b.n	8004084 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fc7b 	bl	8004978 <USBD_CtlError>
          break;
 8004082:	e000      	b.n	8004086 <USBD_StdItfReq+0x76>
          break;
 8004084:	bf00      	nop
      }
      break;
 8004086:	e004      	b.n	8004092 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004088:	6839      	ldr	r1, [r7, #0]
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fc74 	bl	8004978 <USBD_CtlError>
      break;
 8004090:	bf00      	nop
  }

  return USBD_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	889b      	ldrh	r3, [r3, #4]
 80040ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d004      	beq.n	80040c6 <USBD_StdEPReq+0x2a>
 80040bc:	2b40      	cmp	r3, #64	; 0x40
 80040be:	d002      	beq.n	80040c6 <USBD_StdEPReq+0x2a>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <USBD_StdEPReq+0x3a>
 80040c4:	e13d      	b.n	8004342 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	6839      	ldr	r1, [r7, #0]
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
      break;
 80040d4:	e13a      	b.n	800434c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d10a      	bne.n	80040f8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	6839      	ldr	r1, [r7, #0]
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
 80040f0:	4603      	mov	r3, r0
 80040f2:	73fb      	strb	r3, [r7, #15]

        return ret;
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	e12a      	b.n	800434e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	785b      	ldrb	r3, [r3, #1]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d03e      	beq.n	800417e <USBD_StdEPReq+0xe2>
 8004100:	2b03      	cmp	r3, #3
 8004102:	d002      	beq.n	800410a <USBD_StdEPReq+0x6e>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d070      	beq.n	80041ea <USBD_StdEPReq+0x14e>
 8004108:	e115      	b.n	8004336 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004110:	2b02      	cmp	r3, #2
 8004112:	d002      	beq.n	800411a <USBD_StdEPReq+0x7e>
 8004114:	2b03      	cmp	r3, #3
 8004116:	d015      	beq.n	8004144 <USBD_StdEPReq+0xa8>
 8004118:	e02b      	b.n	8004172 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800411a:	7bbb      	ldrb	r3, [r7, #14]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00c      	beq.n	800413a <USBD_StdEPReq+0x9e>
 8004120:	7bbb      	ldrb	r3, [r7, #14]
 8004122:	2b80      	cmp	r3, #128	; 0x80
 8004124:	d009      	beq.n	800413a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004126:	7bbb      	ldrb	r3, [r7, #14]
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f003 fe8e 	bl	8007e4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004130:	2180      	movs	r1, #128	; 0x80
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f003 fe8a 	bl	8007e4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004138:	e020      	b.n	800417c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800413a:	6839      	ldr	r1, [r7, #0]
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fc1b 	bl	8004978 <USBD_CtlError>
              break;
 8004142:	e01b      	b.n	800417c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	885b      	ldrh	r3, [r3, #2]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10e      	bne.n	800416a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800414c:	7bbb      	ldrb	r3, [r7, #14]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <USBD_StdEPReq+0xce>
 8004152:	7bbb      	ldrb	r3, [r7, #14]
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	d008      	beq.n	800416a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	88db      	ldrh	r3, [r3, #6]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d104      	bne.n	800416a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004160:	7bbb      	ldrb	r3, [r7, #14]
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f003 fe71 	bl	8007e4c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fccc 	bl	8004b08 <USBD_CtlSendStatus>

              break;
 8004170:	e004      	b.n	800417c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004172:	6839      	ldr	r1, [r7, #0]
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fbff 	bl	8004978 <USBD_CtlError>
              break;
 800417a:	bf00      	nop
          }
          break;
 800417c:	e0e0      	b.n	8004340 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004184:	2b02      	cmp	r3, #2
 8004186:	d002      	beq.n	800418e <USBD_StdEPReq+0xf2>
 8004188:	2b03      	cmp	r3, #3
 800418a:	d015      	beq.n	80041b8 <USBD_StdEPReq+0x11c>
 800418c:	e026      	b.n	80041dc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800418e:	7bbb      	ldrb	r3, [r7, #14]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00c      	beq.n	80041ae <USBD_StdEPReq+0x112>
 8004194:	7bbb      	ldrb	r3, [r7, #14]
 8004196:	2b80      	cmp	r3, #128	; 0x80
 8004198:	d009      	beq.n	80041ae <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800419a:	7bbb      	ldrb	r3, [r7, #14]
 800419c:	4619      	mov	r1, r3
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f003 fe54 	bl	8007e4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80041a4:	2180      	movs	r1, #128	; 0x80
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f003 fe50 	bl	8007e4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80041ac:	e01c      	b.n	80041e8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80041ae:	6839      	ldr	r1, [r7, #0]
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fbe1 	bl	8004978 <USBD_CtlError>
              break;
 80041b6:	e017      	b.n	80041e8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	885b      	ldrh	r3, [r3, #2]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d112      	bne.n	80041e6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80041c0:	7bbb      	ldrb	r3, [r7, #14]
 80041c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d004      	beq.n	80041d4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80041ca:	7bbb      	ldrb	r3, [r7, #14]
 80041cc:	4619      	mov	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f003 fe5b 	bl	8007e8a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fc97 	bl	8004b08 <USBD_CtlSendStatus>
              }
              break;
 80041da:	e004      	b.n	80041e6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80041dc:	6839      	ldr	r1, [r7, #0]
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fbca 	bl	8004978 <USBD_CtlError>
              break;
 80041e4:	e000      	b.n	80041e8 <USBD_StdEPReq+0x14c>
              break;
 80041e6:	bf00      	nop
          }
          break;
 80041e8:	e0aa      	b.n	8004340 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d002      	beq.n	80041fa <USBD_StdEPReq+0x15e>
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d032      	beq.n	800425e <USBD_StdEPReq+0x1c2>
 80041f8:	e097      	b.n	800432a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80041fa:	7bbb      	ldrb	r3, [r7, #14]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d007      	beq.n	8004210 <USBD_StdEPReq+0x174>
 8004200:	7bbb      	ldrb	r3, [r7, #14]
 8004202:	2b80      	cmp	r3, #128	; 0x80
 8004204:	d004      	beq.n	8004210 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004206:	6839      	ldr	r1, [r7, #0]
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fbb5 	bl	8004978 <USBD_CtlError>
                break;
 800420e:	e091      	b.n	8004334 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004214:	2b00      	cmp	r3, #0
 8004216:	da0b      	bge.n	8004230 <USBD_StdEPReq+0x194>
 8004218:	7bbb      	ldrb	r3, [r7, #14]
 800421a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	3310      	adds	r3, #16
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	4413      	add	r3, r2
 800422c:	3304      	adds	r3, #4
 800422e:	e00b      	b.n	8004248 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004230:	7bbb      	ldrb	r3, [r7, #14]
 8004232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	3304      	adds	r3, #4
 8004248:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2202      	movs	r2, #2
 8004254:	4619      	mov	r1, r3
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fbf8 	bl	8004a4c <USBD_CtlSendData>
              break;
 800425c:	e06a      	b.n	8004334 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800425e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004262:	2b00      	cmp	r3, #0
 8004264:	da11      	bge.n	800428a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004266:	7bbb      	ldrb	r3, [r7, #14]
 8004268:	f003 020f 	and.w	r2, r3, #15
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	3318      	adds	r3, #24
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d117      	bne.n	80042b0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004280:	6839      	ldr	r1, [r7, #0]
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fb78 	bl	8004978 <USBD_CtlError>
                  break;
 8004288:	e054      	b.n	8004334 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800428a:	7bbb      	ldrb	r3, [r7, #14]
 800428c:	f003 020f 	and.w	r2, r3, #15
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d104      	bne.n	80042b0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80042a6:	6839      	ldr	r1, [r7, #0]
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fb65 	bl	8004978 <USBD_CtlError>
                  break;
 80042ae:	e041      	b.n	8004334 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80042b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	da0b      	bge.n	80042d0 <USBD_StdEPReq+0x234>
 80042b8:	7bbb      	ldrb	r3, [r7, #14]
 80042ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	3310      	adds	r3, #16
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4413      	add	r3, r2
 80042cc:	3304      	adds	r3, #4
 80042ce:	e00b      	b.n	80042e8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80042d0:	7bbb      	ldrb	r3, [r7, #14]
 80042d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	3304      	adds	r3, #4
 80042e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80042ea:	7bbb      	ldrb	r3, [r7, #14]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <USBD_StdEPReq+0x25a>
 80042f0:	7bbb      	ldrb	r3, [r7, #14]
 80042f2:	2b80      	cmp	r3, #128	; 0x80
 80042f4:	d103      	bne.n	80042fe <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e00e      	b.n	800431c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80042fe:	7bbb      	ldrb	r3, [r7, #14]
 8004300:	4619      	mov	r1, r3
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f003 fde0 	bl	8007ec8 <USBD_LL_IsStallEP>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	e002      	b.n	800431c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2202      	movs	r2, #2
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fb92 	bl	8004a4c <USBD_CtlSendData>
              break;
 8004328:	e004      	b.n	8004334 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800432a:	6839      	ldr	r1, [r7, #0]
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fb23 	bl	8004978 <USBD_CtlError>
              break;
 8004332:	bf00      	nop
          }
          break;
 8004334:	e004      	b.n	8004340 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004336:	6839      	ldr	r1, [r7, #0]
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fb1d 	bl	8004978 <USBD_CtlError>
          break;
 800433e:	bf00      	nop
      }
      break;
 8004340:	e004      	b.n	800434c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004342:	6839      	ldr	r1, [r7, #0]
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fb17 	bl	8004978 <USBD_CtlError>
      break;
 800434a:	bf00      	nop
  }

  return ret;
 800434c:	7bfb      	ldrb	r3, [r7, #15]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	885b      	ldrh	r3, [r3, #2]
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	2b06      	cmp	r3, #6
 800437a:	f200 8128 	bhi.w	80045ce <USBD_GetDescriptor+0x276>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <USBD_GetDescriptor+0x2c>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043a1 	.word	0x080043a1
 8004388:	080043b9 	.word	0x080043b9
 800438c:	080043f9 	.word	0x080043f9
 8004390:	080045cf 	.word	0x080045cf
 8004394:	080045cf 	.word	0x080045cf
 8004398:	0800456f 	.word	0x0800456f
 800439c:	0800459b 	.word	0x0800459b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	7c12      	ldrb	r2, [r2, #16]
 80043ac:	f107 0108 	add.w	r1, r7, #8
 80043b0:	4610      	mov	r0, r2
 80043b2:	4798      	blx	r3
 80043b4:	60f8      	str	r0, [r7, #12]
      break;
 80043b6:	e112      	b.n	80045de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	7c1b      	ldrb	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10d      	bne.n	80043dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	f107 0208 	add.w	r2, r7, #8
 80043cc:	4610      	mov	r0, r2
 80043ce:	4798      	blx	r3
 80043d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3301      	adds	r3, #1
 80043d6:	2202      	movs	r2, #2
 80043d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80043da:	e100      	b.n	80045de <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	f107 0208 	add.w	r2, r7, #8
 80043e8:	4610      	mov	r0, r2
 80043ea:	4798      	blx	r3
 80043ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3301      	adds	r3, #1
 80043f2:	2202      	movs	r2, #2
 80043f4:	701a      	strb	r2, [r3, #0]
      break;
 80043f6:	e0f2      	b.n	80045de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	885b      	ldrh	r3, [r3, #2]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b05      	cmp	r3, #5
 8004400:	f200 80ac 	bhi.w	800455c <USBD_GetDescriptor+0x204>
 8004404:	a201      	add	r2, pc, #4	; (adr r2, 800440c <USBD_GetDescriptor+0xb4>)
 8004406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440a:	bf00      	nop
 800440c:	08004425 	.word	0x08004425
 8004410:	08004459 	.word	0x08004459
 8004414:	0800448d 	.word	0x0800448d
 8004418:	080044c1 	.word	0x080044c1
 800441c:	080044f5 	.word	0x080044f5
 8004420:	08004529 	.word	0x08004529
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00b      	beq.n	8004448 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	7c12      	ldrb	r2, [r2, #16]
 800443c:	f107 0108 	add.w	r1, r7, #8
 8004440:	4610      	mov	r0, r2
 8004442:	4798      	blx	r3
 8004444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004446:	e091      	b.n	800456c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004448:	6839      	ldr	r1, [r7, #0]
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fa94 	bl	8004978 <USBD_CtlError>
            err++;
 8004450:	7afb      	ldrb	r3, [r7, #11]
 8004452:	3301      	adds	r3, #1
 8004454:	72fb      	strb	r3, [r7, #11]
          break;
 8004456:	e089      	b.n	800456c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	7c12      	ldrb	r2, [r2, #16]
 8004470:	f107 0108 	add.w	r1, r7, #8
 8004474:	4610      	mov	r0, r2
 8004476:	4798      	blx	r3
 8004478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800447a:	e077      	b.n	800456c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800447c:	6839      	ldr	r1, [r7, #0]
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fa7a 	bl	8004978 <USBD_CtlError>
            err++;
 8004484:	7afb      	ldrb	r3, [r7, #11]
 8004486:	3301      	adds	r3, #1
 8004488:	72fb      	strb	r3, [r7, #11]
          break;
 800448a:	e06f      	b.n	800456c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00b      	beq.n	80044b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	7c12      	ldrb	r2, [r2, #16]
 80044a4:	f107 0108 	add.w	r1, r7, #8
 80044a8:	4610      	mov	r0, r2
 80044aa:	4798      	blx	r3
 80044ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80044ae:	e05d      	b.n	800456c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80044b0:	6839      	ldr	r1, [r7, #0]
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fa60 	bl	8004978 <USBD_CtlError>
            err++;
 80044b8:	7afb      	ldrb	r3, [r7, #11]
 80044ba:	3301      	adds	r3, #1
 80044bc:	72fb      	strb	r3, [r7, #11]
          break;
 80044be:	e055      	b.n	800456c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	7c12      	ldrb	r2, [r2, #16]
 80044d8:	f107 0108 	add.w	r1, r7, #8
 80044dc:	4610      	mov	r0, r2
 80044de:	4798      	blx	r3
 80044e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80044e2:	e043      	b.n	800456c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80044e4:	6839      	ldr	r1, [r7, #0]
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa46 	bl	8004978 <USBD_CtlError>
            err++;
 80044ec:	7afb      	ldrb	r3, [r7, #11]
 80044ee:	3301      	adds	r3, #1
 80044f0:	72fb      	strb	r3, [r7, #11]
          break;
 80044f2:	e03b      	b.n	800456c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00b      	beq.n	8004518 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	7c12      	ldrb	r2, [r2, #16]
 800450c:	f107 0108 	add.w	r1, r7, #8
 8004510:	4610      	mov	r0, r2
 8004512:	4798      	blx	r3
 8004514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004516:	e029      	b.n	800456c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa2c 	bl	8004978 <USBD_CtlError>
            err++;
 8004520:	7afb      	ldrb	r3, [r7, #11]
 8004522:	3301      	adds	r3, #1
 8004524:	72fb      	strb	r3, [r7, #11]
          break;
 8004526:	e021      	b.n	800456c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00b      	beq.n	800454c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	7c12      	ldrb	r2, [r2, #16]
 8004540:	f107 0108 	add.w	r1, r7, #8
 8004544:	4610      	mov	r0, r2
 8004546:	4798      	blx	r3
 8004548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800454a:	e00f      	b.n	800456c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fa12 	bl	8004978 <USBD_CtlError>
            err++;
 8004554:	7afb      	ldrb	r3, [r7, #11]
 8004556:	3301      	adds	r3, #1
 8004558:	72fb      	strb	r3, [r7, #11]
          break;
 800455a:	e007      	b.n	800456c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800455c:	6839      	ldr	r1, [r7, #0]
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa0a 	bl	8004978 <USBD_CtlError>
          err++;
 8004564:	7afb      	ldrb	r3, [r7, #11]
 8004566:	3301      	adds	r3, #1
 8004568:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800456a:	e038      	b.n	80045de <USBD_GetDescriptor+0x286>
 800456c:	e037      	b.n	80045de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	7c1b      	ldrb	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457e:	f107 0208 	add.w	r2, r7, #8
 8004582:	4610      	mov	r0, r2
 8004584:	4798      	blx	r3
 8004586:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004588:	e029      	b.n	80045de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800458a:	6839      	ldr	r1, [r7, #0]
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f9f3 	bl	8004978 <USBD_CtlError>
        err++;
 8004592:	7afb      	ldrb	r3, [r7, #11]
 8004594:	3301      	adds	r3, #1
 8004596:	72fb      	strb	r3, [r7, #11]
      break;
 8004598:	e021      	b.n	80045de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	7c1b      	ldrb	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10d      	bne.n	80045be <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	f107 0208 	add.w	r2, r7, #8
 80045ae:	4610      	mov	r0, r2
 80045b0:	4798      	blx	r3
 80045b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3301      	adds	r3, #1
 80045b8:	2207      	movs	r2, #7
 80045ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80045bc:	e00f      	b.n	80045de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80045be:	6839      	ldr	r1, [r7, #0]
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f9d9 	bl	8004978 <USBD_CtlError>
        err++;
 80045c6:	7afb      	ldrb	r3, [r7, #11]
 80045c8:	3301      	adds	r3, #1
 80045ca:	72fb      	strb	r3, [r7, #11]
      break;
 80045cc:	e007      	b.n	80045de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80045ce:	6839      	ldr	r1, [r7, #0]
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f9d1 	bl	8004978 <USBD_CtlError>
      err++;
 80045d6:	7afb      	ldrb	r3, [r7, #11]
 80045d8:	3301      	adds	r3, #1
 80045da:	72fb      	strb	r3, [r7, #11]
      break;
 80045dc:	bf00      	nop
  }

  if (err != 0U)
 80045de:	7afb      	ldrb	r3, [r7, #11]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d11c      	bne.n	800461e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80045e4:	893b      	ldrh	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d011      	beq.n	800460e <USBD_GetDescriptor+0x2b6>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	88db      	ldrh	r3, [r3, #6]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00d      	beq.n	800460e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	88da      	ldrh	r2, [r3, #6]
 80045f6:	893b      	ldrh	r3, [r7, #8]
 80045f8:	4293      	cmp	r3, r2
 80045fa:	bf28      	it	cs
 80045fc:	4613      	movcs	r3, r2
 80045fe:	b29b      	uxth	r3, r3
 8004600:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004602:	893b      	ldrh	r3, [r7, #8]
 8004604:	461a      	mov	r2, r3
 8004606:	68f9      	ldr	r1, [r7, #12]
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fa1f 	bl	8004a4c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	88db      	ldrh	r3, [r3, #6]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d104      	bne.n	8004620 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa76 	bl	8004b08 <USBD_CtlSendStatus>
 800461c:	e000      	b.n	8004620 <USBD_GetDescriptor+0x2c8>
    return;
 800461e:	bf00      	nop
    }
  }
}
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop

08004628 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	889b      	ldrh	r3, [r3, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d130      	bne.n	800469c <USBD_SetAddress+0x74>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	88db      	ldrh	r3, [r3, #6]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d12c      	bne.n	800469c <USBD_SetAddress+0x74>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	885b      	ldrh	r3, [r3, #2]
 8004646:	2b7f      	cmp	r3, #127	; 0x7f
 8004648:	d828      	bhi.n	800469c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	885b      	ldrh	r3, [r3, #2]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004654:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800465c:	2b03      	cmp	r3, #3
 800465e:	d104      	bne.n	800466a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004660:	6839      	ldr	r1, [r7, #0]
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f988 	bl	8004978 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004668:	e01c      	b.n	80046a4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	7bfa      	ldrb	r2, [r7, #15]
 800466e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f003 fc4b 	bl	8007f12 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fa43 	bl	8004b08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004690:	e008      	b.n	80046a4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800469a:	e003      	b.n	80046a4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800469c:	6839      	ldr	r1, [r7, #0]
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f96a 	bl	8004978 <USBD_CtlError>
  }
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	885b      	ldrh	r3, [r3, #2]
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	4b41      	ldr	r3, [pc, #260]	; (80047c4 <USBD_SetConfig+0x118>)
 80046be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80046c0:	4b40      	ldr	r3, [pc, #256]	; (80047c4 <USBD_SetConfig+0x118>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d904      	bls.n	80046d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80046c8:	6839      	ldr	r1, [r7, #0]
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f954 	bl	8004978 <USBD_CtlError>
 80046d0:	e075      	b.n	80047be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d002      	beq.n	80046e2 <USBD_SetConfig+0x36>
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d023      	beq.n	8004728 <USBD_SetConfig+0x7c>
 80046e0:	e062      	b.n	80047a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80046e2:	4b38      	ldr	r3, [pc, #224]	; (80047c4 <USBD_SetConfig+0x118>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01a      	beq.n	8004720 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80046ea:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <USBD_SetConfig+0x118>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2203      	movs	r2, #3
 80046f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80046fc:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <USBD_SetConfig+0x118>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	4619      	mov	r1, r3
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff f9f3 	bl	8003aee <USBD_SetClassConfig>
 8004708:	4603      	mov	r3, r0
 800470a:	2b02      	cmp	r3, #2
 800470c:	d104      	bne.n	8004718 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800470e:	6839      	ldr	r1, [r7, #0]
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f931 	bl	8004978 <USBD_CtlError>
            return;
 8004716:	e052      	b.n	80047be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f9f5 	bl	8004b08 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800471e:	e04e      	b.n	80047be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f9f1 	bl	8004b08 <USBD_CtlSendStatus>
        break;
 8004726:	e04a      	b.n	80047be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004728:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <USBD_SetConfig+0x118>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d112      	bne.n	8004756 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004738:	4b22      	ldr	r3, [pc, #136]	; (80047c4 <USBD_SetConfig+0x118>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004742:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <USBD_SetConfig+0x118>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff f9ef 	bl	8003b2c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f9da 	bl	8004b08 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004754:	e033      	b.n	80047be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004756:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <USBD_SetConfig+0x118>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	429a      	cmp	r2, r3
 8004762:	d01d      	beq.n	80047a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	b2db      	uxtb	r3, r3
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff f9dd 	bl	8003b2c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004772:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <USBD_SetConfig+0x118>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <USBD_SetConfig+0x118>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	4619      	mov	r1, r3
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff f9b3 	bl	8003aee <USBD_SetClassConfig>
 8004788:	4603      	mov	r3, r0
 800478a:	2b02      	cmp	r3, #2
 800478c:	d104      	bne.n	8004798 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800478e:	6839      	ldr	r1, [r7, #0]
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f8f1 	bl	8004978 <USBD_CtlError>
            return;
 8004796:	e012      	b.n	80047be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f9b5 	bl	8004b08 <USBD_CtlSendStatus>
        break;
 800479e:	e00e      	b.n	80047be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f9b1 	bl	8004b08 <USBD_CtlSendStatus>
        break;
 80047a6:	e00a      	b.n	80047be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80047a8:	6839      	ldr	r1, [r7, #0]
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f8e4 	bl	8004978 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <USBD_SetConfig+0x118>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	4619      	mov	r1, r3
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff f9b8 	bl	8003b2c <USBD_ClrClassConfig>
        break;
 80047bc:	bf00      	nop
    }
  }
}
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	200004ec 	.word	0x200004ec

080047c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	88db      	ldrh	r3, [r3, #6]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d004      	beq.n	80047e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80047da:	6839      	ldr	r1, [r7, #0]
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f8cb 	bl	8004978 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80047e2:	e021      	b.n	8004828 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	db17      	blt.n	800481e <USBD_GetConfig+0x56>
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	dd02      	ble.n	80047f8 <USBD_GetConfig+0x30>
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d00b      	beq.n	800480e <USBD_GetConfig+0x46>
 80047f6:	e012      	b.n	800481e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3308      	adds	r3, #8
 8004802:	2201      	movs	r2, #1
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f920 	bl	8004a4c <USBD_CtlSendData>
        break;
 800480c:	e00c      	b.n	8004828 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	2201      	movs	r2, #1
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f918 	bl	8004a4c <USBD_CtlSendData>
        break;
 800481c:	e004      	b.n	8004828 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800481e:	6839      	ldr	r1, [r7, #0]
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f8a9 	bl	8004978 <USBD_CtlError>
        break;
 8004826:	bf00      	nop
}
 8004828:	bf00      	nop
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004840:	3b01      	subs	r3, #1
 8004842:	2b02      	cmp	r3, #2
 8004844:	d81e      	bhi.n	8004884 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	88db      	ldrh	r3, [r3, #6]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d004      	beq.n	8004858 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f891 	bl	8004978 <USBD_CtlError>
        break;
 8004856:	e01a      	b.n	800488e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f043 0202 	orr.w	r2, r3, #2
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	330c      	adds	r3, #12
 8004878:	2202      	movs	r2, #2
 800487a:	4619      	mov	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f8e5 	bl	8004a4c <USBD_CtlSendData>
      break;
 8004882:	e004      	b.n	800488e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f876 	bl	8004978 <USBD_CtlError>
      break;
 800488c:	bf00      	nop
  }
}
 800488e:	bf00      	nop
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	885b      	ldrh	r3, [r3, #2]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d106      	bne.n	80048b6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f929 	bl	8004b08 <USBD_CtlSendStatus>
  }
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048ce:	3b01      	subs	r3, #1
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d80b      	bhi.n	80048ec <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	885b      	ldrh	r3, [r3, #2]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d10c      	bne.n	80048f6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f90f 	bl	8004b08 <USBD_CtlSendStatus>
      }
      break;
 80048ea:	e004      	b.n	80048f6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f842 	bl	8004978 <USBD_CtlError>
      break;
 80048f4:	e000      	b.n	80048f8 <USBD_ClrFeature+0x3a>
      break;
 80048f6:	bf00      	nop
  }
}
 80048f8:	bf00      	nop
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781a      	ldrb	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	785a      	ldrb	r2, [r3, #1]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	3302      	adds	r3, #2
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	b29a      	uxth	r2, r3
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	3303      	adds	r3, #3
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	b29b      	uxth	r3, r3
 800492e:	4413      	add	r3, r2
 8004930:	b29a      	uxth	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	3304      	adds	r3, #4
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	b29a      	uxth	r2, r3
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	3305      	adds	r3, #5
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	b29b      	uxth	r3, r3
 800494a:	4413      	add	r3, r2
 800494c:	b29a      	uxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	3306      	adds	r3, #6
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	b29a      	uxth	r2, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	3307      	adds	r3, #7
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	b29b      	uxth	r3, r3
 8004966:	4413      	add	r3, r2
 8004968:	b29a      	uxth	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	80da      	strh	r2, [r3, #6]

}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8004982:	2180      	movs	r1, #128	; 0x80
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f003 fa61 	bl	8007e4c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800498a:	2100      	movs	r1, #0
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f003 fa5d 	bl	8007e4c <USBD_LL_StallEP>
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b086      	sub	sp, #24
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d032      	beq.n	8004a16 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f834 	bl	8004a1e <USBD_GetLen>
 80049b6:	4603      	mov	r3, r0
 80049b8:	3301      	adds	r3, #1
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	75fa      	strb	r2, [r7, #23]
 80049ca:	461a      	mov	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4413      	add	r3, r2
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	7812      	ldrb	r2, [r2, #0]
 80049d4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	75fa      	strb	r2, [r7, #23]
 80049dc:	461a      	mov	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4413      	add	r3, r2
 80049e2:	2203      	movs	r2, #3
 80049e4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80049e6:	e012      	b.n	8004a0e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	60fa      	str	r2, [r7, #12]
 80049ee:	7dfa      	ldrb	r2, [r7, #23]
 80049f0:	1c51      	adds	r1, r2, #1
 80049f2:	75f9      	strb	r1, [r7, #23]
 80049f4:	4611      	mov	r1, r2
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	440a      	add	r2, r1
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80049fe:	7dfb      	ldrb	r3, [r7, #23]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	75fa      	strb	r2, [r7, #23]
 8004a04:	461a      	mov	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4413      	add	r3, r2
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e8      	bne.n	80049e8 <USBD_GetString+0x4e>
    }
  }
}
 8004a16:	bf00      	nop
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8004a2a:	e005      	b.n	8004a38 <USBD_GetLen+0x1a>
  {
    len++;
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
    buf++;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3301      	adds	r3, #1
 8004a36:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f5      	bne.n	8004a2c <USBD_GetLen+0xe>
  }

  return len;
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004a62:	88fa      	ldrh	r2, [r7, #6]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	2100      	movs	r1, #0
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f003 fa6b 	bl	8007f50 <USBD_LL_Transmit>

  return USBD_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	2100      	movs	r1, #0
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f003 fa59 	bl	8007f50 <USBD_LL_Transmit>

  return USBD_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2203      	movs	r2, #3
 8004aba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004abe:	88fa      	ldrh	r2, [r7, #6]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f003 fa5e 	bl	8007f96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	4613      	mov	r3, r2
 8004af0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	2100      	movs	r1, #0
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f003 fa4c 	bl	8007f96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2204      	movs	r2, #4
 8004b14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f003 fa16 	bl	8007f50 <USBD_LL_Transmit>

  return USBD_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2205      	movs	r2, #5
 8004b3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	2200      	movs	r2, #0
 8004b42:	2100      	movs	r1, #0
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f003 fa26 	bl	8007f96 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b66:	2b84      	cmp	r3, #132	; 0x84
 8004b68:	d005      	beq.n	8004b76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	3303      	adds	r3, #3
 8004b74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b76:	68fb      	ldr	r3, [r7, #12]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr

08004b82 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004b86:	f000 fe97 	bl	80058b8 <vTaskStartScheduler>
  
  return osOK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685c      	ldr	r4, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ba6:	b29e      	uxth	r6, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff ffd0 	bl	8004b54 <makeFreeRtosPriority>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	f107 030c 	add.w	r3, r7, #12
 8004bba:	9301      	str	r3, [sp, #4]
 8004bbc:	9200      	str	r2, [sp, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	4632      	mov	r2, r6
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f000 fd1a 	bl	80055fe <xTaskCreate>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d001      	beq.n	8004bd4 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e000      	b.n	8004bd6 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bde <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <osDelay+0x16>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	e000      	b.n	8004bf6 <osDelay+0x18>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fe2a 	bl	8005850 <vTaskDelay>
  
  return osOK;
 8004bfc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f103 0208 	add.w	r2, r3, #8
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f103 0208 	add.w	r2, r3, #8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f103 0208 	add.w	r2, r3, #8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	601a      	str	r2, [r3, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d103      	bne.n	8004cc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e00c      	b.n	8004cdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	e002      	b.n	8004cd0 <vListInsert+0x2e>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d2f6      	bcs.n	8004cca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	601a      	str	r2, [r3, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr

08004d12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6892      	ldr	r2, [r2, #8]
 8004d28:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6852      	ldr	r2, [r2, #4]
 8004d32:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d103      	bne.n	8004d46 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	1e5a      	subs	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	e7fe      	b.n	8004d8a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004d8c:	f001 fc84 	bl	8006698 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	441a      	add	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dc2:	fb01 f303 	mul.w	r3, r1, r3
 8004dc6:	441a      	add	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	22ff      	movs	r2, #255	; 0xff
 8004dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	22ff      	movs	r2, #255	; 0xff
 8004dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d114      	bne.n	8004e0c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01a      	beq.n	8004e20 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3310      	adds	r3, #16
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 ff8c 	bl	8005d0c <xTaskRemoveFromEventList>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d012      	beq.n	8004e20 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <xQueueGenericReset+0xcc>)
 8004dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	e009      	b.n	8004e20 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3310      	adds	r3, #16
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fef8 	bl	8004c06 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3324      	adds	r3, #36	; 0x24
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fef3 	bl	8004c06 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e20:	f001 fc68 	bl	80066f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e24:	2301      	movs	r3, #1
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	; 0x28
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <xQueueGenericCreate+0x28>
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	e7fe      	b.n	8004e5a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	e004      	b.n	8004e72 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	fb02 f303 	mul.w	r3, r2, r3
 8004e70:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	3348      	adds	r3, #72	; 0x48
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fd04 	bl	8006884 <pvPortMalloc>
 8004e7c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00b      	beq.n	8004e9c <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	3348      	adds	r3, #72	; 0x48
 8004e88:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e8a:	79fa      	ldrb	r2, [r7, #7]
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f805 	bl	8004ea6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004e9c:	69bb      	ldr	r3, [r7, #24]
	}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	607a      	str	r2, [r7, #4]
 8004eb2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d103      	bne.n	8004ec2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	e002      	b.n	8004ec8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	69b8      	ldr	r0, [r7, #24]
 8004ed8:	f7ff ff44 	bl	8004d64 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08e      	sub	sp, #56	; 0x38
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d109      	bne.n	8004f14 <xQueueGenericSend+0x30>
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f12:	e7fe      	b.n	8004f12 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <xQueueGenericSend+0x3e>
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <xQueueGenericSend+0x42>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <xQueueGenericSend+0x44>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d109      	bne.n	8004f40 <xQueueGenericSend+0x5c>
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3e:	e7fe      	b.n	8004f3e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d103      	bne.n	8004f4e <xQueueGenericSend+0x6a>
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <xQueueGenericSend+0x6e>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <xQueueGenericSend+0x70>
 8004f52:	2300      	movs	r3, #0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d109      	bne.n	8004f6c <xQueueGenericSend+0x88>
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	623b      	str	r3, [r7, #32]
 8004f6a:	e7fe      	b.n	8004f6a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f6c:	f001 f86a 	bl	8006044 <xTaskGetSchedulerState>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <xQueueGenericSend+0x98>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <xQueueGenericSend+0x9c>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <xQueueGenericSend+0x9e>
 8004f80:	2300      	movs	r3, #0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d109      	bne.n	8004f9a <xQueueGenericSend+0xb6>
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	e7fe      	b.n	8004f98 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f9a:	f001 fb7d 	bl	8006698 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d302      	bcc.n	8004fb0 <xQueueGenericSend+0xcc>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d129      	bne.n	8005004 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fb6:	f000 fa38 	bl	800542a <prvCopyDataToQueue>
 8004fba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d010      	beq.n	8004fe6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	3324      	adds	r3, #36	; 0x24
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fe9f 	bl	8005d0c <xTaskRemoveFromEventList>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d013      	beq.n	8004ffc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fd4:	4b3f      	ldr	r3, [pc, #252]	; (80050d4 <xQueueGenericSend+0x1f0>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	e00a      	b.n	8004ffc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d007      	beq.n	8004ffc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fec:	4b39      	ldr	r3, [pc, #228]	; (80050d4 <xQueueGenericSend+0x1f0>)
 8004fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ffc:	f001 fb7a 	bl	80066f4 <vPortExitCritical>
				return pdPASS;
 8005000:	2301      	movs	r3, #1
 8005002:	e063      	b.n	80050cc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800500a:	f001 fb73 	bl	80066f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800500e:	2300      	movs	r3, #0
 8005010:	e05c      	b.n	80050cc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005014:	2b00      	cmp	r3, #0
 8005016:	d106      	bne.n	8005026 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005018:	f107 0314 	add.w	r3, r7, #20
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fed7 	bl	8005dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005022:	2301      	movs	r3, #1
 8005024:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005026:	f001 fb65 	bl	80066f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800502a:	f000 fc8b 	bl	8005944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800502e:	f001 fb33 	bl	8006698 <vPortEnterCritical>
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005038:	b25b      	sxtb	r3, r3
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503e:	d103      	bne.n	8005048 <xQueueGenericSend+0x164>
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800504e:	b25b      	sxtb	r3, r3
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005054:	d103      	bne.n	800505e <xQueueGenericSend+0x17a>
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800505e:	f001 fb49 	bl	80066f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005062:	1d3a      	adds	r2, r7, #4
 8005064:	f107 0314 	add.w	r3, r7, #20
 8005068:	4611      	mov	r1, r2
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fec6 	bl	8005dfc <xTaskCheckForTimeOut>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d124      	bne.n	80050c0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005078:	f000 faa9 	bl	80055ce <prvIsQueueFull>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d018      	beq.n	80050b4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	3310      	adds	r3, #16
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fe1a 	bl	8005cc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005092:	f000 fa34 	bl	80054fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005096:	f000 fc63 	bl	8005960 <xTaskResumeAll>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	f47f af7c 	bne.w	8004f9a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80050a2:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <xQueueGenericSend+0x1f0>)
 80050a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	e772      	b.n	8004f9a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050b6:	f000 fa22 	bl	80054fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050ba:	f000 fc51 	bl	8005960 <xTaskResumeAll>
 80050be:	e76c      	b.n	8004f9a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050c2:	f000 fa1c 	bl	80054fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050c6:	f000 fc4b 	bl	8005960 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050ca:	2300      	movs	r3, #0
		}
	}
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3738      	adds	r7, #56	; 0x38
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	e000ed04 	.word	0xe000ed04

080050d8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08e      	sub	sp, #56	; 0x38
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <xQueueGiveFromISR+0x28>
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	623b      	str	r3, [r7, #32]
 80050fe:	e7fe      	b.n	80050fe <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	2b00      	cmp	r3, #0
 8005106:	d009      	beq.n	800511c <xQueueGiveFromISR+0x44>
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	e7fe      	b.n	800511a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d103      	bne.n	800512c <xQueueGiveFromISR+0x54>
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <xQueueGiveFromISR+0x58>
 800512c:	2301      	movs	r3, #1
 800512e:	e000      	b.n	8005132 <xQueueGiveFromISR+0x5a>
 8005130:	2300      	movs	r3, #0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d109      	bne.n	800514a <xQueueGiveFromISR+0x72>
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	e7fe      	b.n	8005148 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800514a:	f001 fb5f 	bl	800680c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800514e:	f3ef 8211 	mrs	r2, BASEPRI
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	617a      	str	r2, [r7, #20]
 8005164:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005166:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005176:	429a      	cmp	r2, r3
 8005178:	d22b      	bcs.n	80051d2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800518c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d112      	bne.n	80051bc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	3324      	adds	r3, #36	; 0x24
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fdb2 	bl	8005d0c <xTaskRemoveFromEventList>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00e      	beq.n	80051cc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	e007      	b.n	80051cc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051c0:	3301      	adds	r3, #1
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	b25a      	sxtb	r2, r3
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051cc:	2301      	movs	r3, #1
 80051ce:	637b      	str	r3, [r7, #52]	; 0x34
 80051d0:	e001      	b.n	80051d6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3738      	adds	r7, #56	; 0x38
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08e      	sub	sp, #56	; 0x38
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80051f6:	2300      	movs	r3, #0
 80051f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80051fe:	2300      	movs	r3, #0
 8005200:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d109      	bne.n	800521c <xQueueSemaphoreTake+0x30>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	623b      	str	r3, [r7, #32]
 800521a:	e7fe      	b.n	800521a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	2b00      	cmp	r3, #0
 8005222:	d009      	beq.n	8005238 <xQueueSemaphoreTake+0x4c>
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	e7fe      	b.n	8005236 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005238:	f000 ff04 	bl	8006044 <xTaskGetSchedulerState>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <xQueueSemaphoreTake+0x5c>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <xQueueSemaphoreTake+0x60>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <xQueueSemaphoreTake+0x62>
 800524c:	2300      	movs	r3, #0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d109      	bne.n	8005266 <xQueueSemaphoreTake+0x7a>
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	e7fe      	b.n	8005264 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005266:	f001 fa17 	bl	8006698 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	2b00      	cmp	r3, #0
 8005274:	d024      	beq.n	80052c0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	1e5a      	subs	r2, r3, #1
 800527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d104      	bne.n	8005290 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005286:	f001 f8a3 	bl	80063d0 <pvTaskIncrementMutexHeldCount>
 800528a:	4602      	mov	r2, r0
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00f      	beq.n	80052b8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	3310      	adds	r3, #16
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fd35 	bl	8005d0c <xTaskRemoveFromEventList>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052a8:	4b53      	ldr	r3, [pc, #332]	; (80053f8 <xQueueSemaphoreTake+0x20c>)
 80052aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052b8:	f001 fa1c 	bl	80066f4 <vPortExitCritical>
				return pdPASS;
 80052bc:	2301      	movs	r3, #1
 80052be:	e096      	b.n	80053ee <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d110      	bne.n	80052e8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d009      	beq.n	80052e0 <xQueueSemaphoreTake+0xf4>
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	e7fe      	b.n	80052de <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80052e0:	f001 fa08 	bl	80066f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052e4:	2300      	movs	r3, #0
 80052e6:	e082      	b.n	80053ee <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052ee:	f107 030c 	add.w	r3, r7, #12
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fd6c 	bl	8005dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052fc:	f001 f9fa 	bl	80066f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005300:	f000 fb20 	bl	8005944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005304:	f001 f9c8 	bl	8006698 <vPortEnterCritical>
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800530e:	b25b      	sxtb	r3, r3
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005314:	d103      	bne.n	800531e <xQueueSemaphoreTake+0x132>
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005324:	b25b      	sxtb	r3, r3
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532a:	d103      	bne.n	8005334 <xQueueSemaphoreTake+0x148>
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005334:	f001 f9de 	bl	80066f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005338:	463a      	mov	r2, r7
 800533a:	f107 030c 	add.w	r3, r7, #12
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fd5b 	bl	8005dfc <xTaskCheckForTimeOut>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d132      	bne.n	80053b2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800534c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800534e:	f000 f928 	bl	80055a2 <prvIsQueueEmpty>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d026      	beq.n	80053a6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d109      	bne.n	8005374 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005360:	f001 f99a 	bl	8006698 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fe89 	bl	8006080 <xTaskPriorityInherit>
 800536e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005370:	f001 f9c0 	bl	80066f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005376:	3324      	adds	r3, #36	; 0x24
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	4611      	mov	r1, r2
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fca1 	bl	8005cc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005384:	f000 f8bb 	bl	80054fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005388:	f000 faea 	bl	8005960 <xTaskResumeAll>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	f47f af69 	bne.w	8005266 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005394:	4b18      	ldr	r3, [pc, #96]	; (80053f8 <xQueueSemaphoreTake+0x20c>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	e75f      	b.n	8005266 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80053a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053a8:	f000 f8a9 	bl	80054fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053ac:	f000 fad8 	bl	8005960 <xTaskResumeAll>
 80053b0:	e759      	b.n	8005266 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80053b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053b4:	f000 f8a3 	bl	80054fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053b8:	f000 fad2 	bl	8005960 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053be:	f000 f8f0 	bl	80055a2 <prvIsQueueEmpty>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f43f af4e 	beq.w	8005266 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00d      	beq.n	80053ec <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80053d0:	f001 f962 	bl	8006698 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80053d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053d6:	f000 f811 	bl	80053fc <prvGetDisinheritPriorityAfterTimeout>
 80053da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 ff56 	bl	8006294 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80053e8:	f001 f984 	bl	80066f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3738      	adds	r7, #56	; 0x38
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	2b00      	cmp	r3, #0
 800540a:	d006      	beq.n	800541a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f1c3 0307 	rsb	r3, r3, #7
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	e001      	b.n	800541e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800541e:	68fb      	ldr	r3, [r7, #12]
	}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr

0800542a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b086      	sub	sp, #24
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10d      	bne.n	8005464 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d14d      	bne.n	80054ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fe99 	bl	800618c <xTaskPriorityDisinherit>
 800545a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	e043      	b.n	80054ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d119      	bne.n	800549e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6898      	ldr	r0, [r3, #8]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	461a      	mov	r2, r3
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	f002 ff96 	bl	80083a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	441a      	add	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d32b      	bcc.n	80054ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	609a      	str	r2, [r3, #8]
 800549c:	e026      	b.n	80054ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	68d8      	ldr	r0, [r3, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	461a      	mov	r2, r3
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	f002 ff7c 	bl	80083a6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	425b      	negs	r3, r3
 80054b8:	441a      	add	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d207      	bcs.n	80054da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	425b      	negs	r3, r3
 80054d4:	441a      	add	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d105      	bne.n	80054ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054f4:	697b      	ldr	r3, [r7, #20]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005506:	f001 f8c7 	bl	8006698 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005510:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005512:	e011      	b.n	8005538 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	2b00      	cmp	r3, #0
 800551a:	d012      	beq.n	8005542 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3324      	adds	r3, #36	; 0x24
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fbf3 	bl	8005d0c <xTaskRemoveFromEventList>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800552c:	f000 fcc6 	bl	8005ebc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	3b01      	subs	r3, #1
 8005534:	b2db      	uxtb	r3, r3
 8005536:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800553c:	2b00      	cmp	r3, #0
 800553e:	dce9      	bgt.n	8005514 <prvUnlockQueue+0x16>
 8005540:	e000      	b.n	8005544 <prvUnlockQueue+0x46>
					break;
 8005542:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	22ff      	movs	r2, #255	; 0xff
 8005548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800554c:	f001 f8d2 	bl	80066f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005550:	f001 f8a2 	bl	8006698 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800555a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800555c:	e011      	b.n	8005582 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d012      	beq.n	800558c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3310      	adds	r3, #16
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fbce 	bl	8005d0c <xTaskRemoveFromEventList>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005576:	f000 fca1 	bl	8005ebc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800557a:	7bbb      	ldrb	r3, [r7, #14]
 800557c:	3b01      	subs	r3, #1
 800557e:	b2db      	uxtb	r3, r3
 8005580:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005582:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005586:	2b00      	cmp	r3, #0
 8005588:	dce9      	bgt.n	800555e <prvUnlockQueue+0x60>
 800558a:	e000      	b.n	800558e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800558c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	22ff      	movs	r2, #255	; 0xff
 8005592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005596:	f001 f8ad 	bl	80066f4 <vPortExitCritical>
}
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055aa:	f001 f875 	bl	8006698 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d102      	bne.n	80055bc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055b6:	2301      	movs	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	e001      	b.n	80055c0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055c0:	f001 f898 	bl	80066f4 <vPortExitCritical>

	return xReturn;
 80055c4:	68fb      	ldr	r3, [r7, #12]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055d6:	f001 f85f 	bl	8006698 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d102      	bne.n	80055ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055e6:	2301      	movs	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e001      	b.n	80055f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055f0:	f001 f880 	bl	80066f4 <vPortExitCritical>

	return xReturn;
 80055f4:	68fb      	ldr	r3, [r7, #12]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b08c      	sub	sp, #48	; 0x30
 8005602:	af04      	add	r7, sp, #16
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	603b      	str	r3, [r7, #0]
 800560a:	4613      	mov	r3, r2
 800560c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4618      	mov	r0, r3
 8005614:	f001 f936 	bl	8006884 <pvPortMalloc>
 8005618:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00e      	beq.n	800563e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005620:	2054      	movs	r0, #84	; 0x54
 8005622:	f001 f92f 	bl	8006884 <pvPortMalloc>
 8005626:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
 8005634:	e005      	b.n	8005642 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005636:	6978      	ldr	r0, [r7, #20]
 8005638:	f001 f9e6 	bl	8006a08 <vPortFree>
 800563c:	e001      	b.n	8005642 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d013      	beq.n	8005670 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005648:	88fa      	ldrh	r2, [r7, #6]
 800564a:	2300      	movs	r3, #0
 800564c:	9303      	str	r3, [sp, #12]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	9302      	str	r3, [sp, #8]
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f80e 	bl	8005680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005664:	69f8      	ldr	r0, [r7, #28]
 8005666:	f000 f889 	bl	800577c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800566a:	2301      	movs	r3, #1
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	e002      	b.n	8005676 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005670:	f04f 33ff 	mov.w	r3, #4294967295
 8005674:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005676:	69bb      	ldr	r3, [r7, #24]
	}
 8005678:	4618      	mov	r0, r3
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005698:	3b01      	subs	r3, #1
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f023 0307 	bic.w	r3, r3, #7
 80056a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <prvInitialiseNewTask+0x46>
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	e7fe      	b.n	80056c4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
 80056ca:	e012      	b.n	80056f2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	4413      	add	r3, r2
 80056d2:	7819      	ldrb	r1, [r3, #0]
 80056d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	4413      	add	r3, r2
 80056da:	3334      	adds	r3, #52	; 0x34
 80056dc:	460a      	mov	r2, r1
 80056de:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d006      	beq.n	80056fa <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	3301      	adds	r3, #1
 80056f0:	61fb      	str	r3, [r7, #28]
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	2b0f      	cmp	r3, #15
 80056f6:	d9e9      	bls.n	80056cc <prvInitialiseNewTask+0x4c>
 80056f8:	e000      	b.n	80056fc <prvInitialiseNewTask+0x7c>
		{
			break;
 80056fa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	2b06      	cmp	r3, #6
 8005708:	d901      	bls.n	800570e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800570a:	2306      	movs	r3, #6
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005712:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005718:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	2200      	movs	r2, #0
 800571e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	3304      	adds	r3, #4
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff fa8d 	bl	8004c44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	3318      	adds	r3, #24
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff fa88 	bl	8004c44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005738:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	f1c3 0207 	rsb	r2, r3, #7
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005748:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	2200      	movs	r2, #0
 800574e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	68f9      	ldr	r1, [r7, #12]
 800575c:	69b8      	ldr	r0, [r7, #24]
 800575e:	f000 feb1 	bl	80064c4 <pxPortInitialiseStack>
 8005762:	4602      	mov	r2, r0
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005772:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005774:	bf00      	nop
 8005776:	3720      	adds	r7, #32
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005784:	f000 ff88 	bl	8006698 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005788:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <prvAddNewTaskToReadyList+0xb8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3301      	adds	r3, #1
 800578e:	4a29      	ldr	r2, [pc, #164]	; (8005834 <prvAddNewTaskToReadyList+0xb8>)
 8005790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005792:	4b29      	ldr	r3, [pc, #164]	; (8005838 <prvAddNewTaskToReadyList+0xbc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800579a:	4a27      	ldr	r2, [pc, #156]	; (8005838 <prvAddNewTaskToReadyList+0xbc>)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057a0:	4b24      	ldr	r3, [pc, #144]	; (8005834 <prvAddNewTaskToReadyList+0xb8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d110      	bne.n	80057ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057a8:	f000 fbac 	bl	8005f04 <prvInitialiseTaskLists>
 80057ac:	e00d      	b.n	80057ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057ae:	4b23      	ldr	r3, [pc, #140]	; (800583c <prvAddNewTaskToReadyList+0xc0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d109      	bne.n	80057ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057b6:	4b20      	ldr	r3, [pc, #128]	; (8005838 <prvAddNewTaskToReadyList+0xbc>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d802      	bhi.n	80057ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057c4:	4a1c      	ldr	r2, [pc, #112]	; (8005838 <prvAddNewTaskToReadyList+0xbc>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057ca:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <prvAddNewTaskToReadyList+0xc4>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3301      	adds	r3, #1
 80057d0:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <prvAddNewTaskToReadyList+0xc4>)
 80057d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	2201      	movs	r2, #1
 80057da:	409a      	lsls	r2, r3
 80057dc:	4b19      	ldr	r3, [pc, #100]	; (8005844 <prvAddNewTaskToReadyList+0xc8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	4a18      	ldr	r2, [pc, #96]	; (8005844 <prvAddNewTaskToReadyList+0xc8>)
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4a15      	ldr	r2, [pc, #84]	; (8005848 <prvAddNewTaskToReadyList+0xcc>)
 80057f4:	441a      	add	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3304      	adds	r3, #4
 80057fa:	4619      	mov	r1, r3
 80057fc:	4610      	mov	r0, r2
 80057fe:	f7ff fa2d 	bl	8004c5c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005802:	f000 ff77 	bl	80066f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005806:	4b0d      	ldr	r3, [pc, #52]	; (800583c <prvAddNewTaskToReadyList+0xc0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00e      	beq.n	800582c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800580e:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <prvAddNewTaskToReadyList+0xbc>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	429a      	cmp	r2, r3
 800581a:	d207      	bcs.n	800582c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800581c:	4b0b      	ldr	r3, [pc, #44]	; (800584c <prvAddNewTaskToReadyList+0xd0>)
 800581e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800582c:	bf00      	nop
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	200005f0 	.word	0x200005f0
 8005838:	200004f0 	.word	0x200004f0
 800583c:	200005fc 	.word	0x200005fc
 8005840:	2000060c 	.word	0x2000060c
 8005844:	200005f8 	.word	0x200005f8
 8005848:	200004f4 	.word	0x200004f4
 800584c:	e000ed04 	.word	0xe000ed04

08005850 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d016      	beq.n	8005890 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005862:	4b13      	ldr	r3, [pc, #76]	; (80058b0 <vTaskDelay+0x60>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d009      	beq.n	800587e <vTaskDelay+0x2e>
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	e7fe      	b.n	800587c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800587e:	f000 f861 	bl	8005944 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005882:	2100      	movs	r1, #0
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fdb7 	bl	80063f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800588a:	f000 f869 	bl	8005960 <xTaskResumeAll>
 800588e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d107      	bne.n	80058a6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005896:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <vTaskDelay+0x64>)
 8005898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000618 	.word	0x20000618
 80058b4:	e000ed04 	.word	0xe000ed04

080058b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80058be:	4b1b      	ldr	r3, [pc, #108]	; (800592c <vTaskStartScheduler+0x74>)
 80058c0:	9301      	str	r3, [sp, #4]
 80058c2:	2300      	movs	r3, #0
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	2300      	movs	r3, #0
 80058c8:	2280      	movs	r2, #128	; 0x80
 80058ca:	4919      	ldr	r1, [pc, #100]	; (8005930 <vTaskStartScheduler+0x78>)
 80058cc:	4819      	ldr	r0, [pc, #100]	; (8005934 <vTaskStartScheduler+0x7c>)
 80058ce:	f7ff fe96 	bl	80055fe <xTaskCreate>
 80058d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d115      	bne.n	8005906 <vTaskStartScheduler+0x4e>
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058ec:	4b12      	ldr	r3, [pc, #72]	; (8005938 <vTaskStartScheduler+0x80>)
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295
 80058f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058f4:	4b11      	ldr	r3, [pc, #68]	; (800593c <vTaskStartScheduler+0x84>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <vTaskStartScheduler+0x88>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005900:	f000 fe5a 	bl	80065b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005904:	e00d      	b.n	8005922 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d109      	bne.n	8005922 <vTaskStartScheduler+0x6a>
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	607b      	str	r3, [r7, #4]
 8005920:	e7fe      	b.n	8005920 <vTaskStartScheduler+0x68>
}
 8005922:	bf00      	nop
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000614 	.word	0x20000614
 8005930:	080085dc 	.word	0x080085dc
 8005934:	08005ed5 	.word	0x08005ed5
 8005938:	20000610 	.word	0x20000610
 800593c:	200005fc 	.word	0x200005fc
 8005940:	200005f4 	.word	0x200005f4

08005944 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005948:	4b04      	ldr	r3, [pc, #16]	; (800595c <vTaskSuspendAll+0x18>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3301      	adds	r3, #1
 800594e:	4a03      	ldr	r2, [pc, #12]	; (800595c <vTaskSuspendAll+0x18>)
 8005950:	6013      	str	r3, [r2, #0]
}
 8005952:	bf00      	nop
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	20000618 	.word	0x20000618

08005960 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800596a:	2300      	movs	r3, #0
 800596c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800596e:	4b41      	ldr	r3, [pc, #260]	; (8005a74 <xTaskResumeAll+0x114>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <xTaskResumeAll+0x2a>
 8005976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	e7fe      	b.n	8005988 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800598a:	f000 fe85 	bl	8006698 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800598e:	4b39      	ldr	r3, [pc, #228]	; (8005a74 <xTaskResumeAll+0x114>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3b01      	subs	r3, #1
 8005994:	4a37      	ldr	r2, [pc, #220]	; (8005a74 <xTaskResumeAll+0x114>)
 8005996:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005998:	4b36      	ldr	r3, [pc, #216]	; (8005a74 <xTaskResumeAll+0x114>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d161      	bne.n	8005a64 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059a0:	4b35      	ldr	r3, [pc, #212]	; (8005a78 <xTaskResumeAll+0x118>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d05d      	beq.n	8005a64 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059a8:	e02e      	b.n	8005a08 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80059aa:	4b34      	ldr	r3, [pc, #208]	; (8005a7c <xTaskResumeAll+0x11c>)
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3318      	adds	r3, #24
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff f9ab 	bl	8004d12 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3304      	adds	r3, #4
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff f9a6 	bl	8004d12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	2201      	movs	r2, #1
 80059cc:	409a      	lsls	r2, r3
 80059ce:	4b2c      	ldr	r3, [pc, #176]	; (8005a80 <xTaskResumeAll+0x120>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	4a2a      	ldr	r2, [pc, #168]	; (8005a80 <xTaskResumeAll+0x120>)
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4a27      	ldr	r2, [pc, #156]	; (8005a84 <xTaskResumeAll+0x124>)
 80059e6:	441a      	add	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4619      	mov	r1, r3
 80059ee:	4610      	mov	r0, r2
 80059f0:	f7ff f934 	bl	8004c5c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f8:	4b23      	ldr	r3, [pc, #140]	; (8005a88 <xTaskResumeAll+0x128>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d302      	bcc.n	8005a08 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005a02:	4b22      	ldr	r3, [pc, #136]	; (8005a8c <xTaskResumeAll+0x12c>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a08:	4b1c      	ldr	r3, [pc, #112]	; (8005a7c <xTaskResumeAll+0x11c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1cc      	bne.n	80059aa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a16:	f000 faf1 	bl	8005ffc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a1a:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <xTaskResumeAll+0x130>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d010      	beq.n	8005a48 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a26:	f000 f837 	bl	8005a98 <xTaskIncrementTick>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005a30:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <xTaskResumeAll+0x12c>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1f1      	bne.n	8005a26 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005a42:	4b13      	ldr	r3, [pc, #76]	; (8005a90 <xTaskResumeAll+0x130>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a48:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <xTaskResumeAll+0x12c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d009      	beq.n	8005a64 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <xTaskResumeAll+0x134>)
 8005a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a64:	f000 fe46 	bl	80066f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005a68:	68bb      	ldr	r3, [r7, #8]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000618 	.word	0x20000618
 8005a78:	200005f0 	.word	0x200005f0
 8005a7c:	200005b0 	.word	0x200005b0
 8005a80:	200005f8 	.word	0x200005f8
 8005a84:	200004f4 	.word	0x200004f4
 8005a88:	200004f0 	.word	0x200004f0
 8005a8c:	20000604 	.word	0x20000604
 8005a90:	20000600 	.word	0x20000600
 8005a94:	e000ed04 	.word	0xe000ed04

08005a98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aa2:	4b50      	ldr	r3, [pc, #320]	; (8005be4 <xTaskIncrementTick+0x14c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f040 808c 	bne.w	8005bc4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005aac:	4b4e      	ldr	r3, [pc, #312]	; (8005be8 <xTaskIncrementTick+0x150>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ab4:	4a4c      	ldr	r2, [pc, #304]	; (8005be8 <xTaskIncrementTick+0x150>)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d11f      	bne.n	8005b00 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ac0:	4b4a      	ldr	r3, [pc, #296]	; (8005bec <xTaskIncrementTick+0x154>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <xTaskIncrementTick+0x46>
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	e7fe      	b.n	8005adc <xTaskIncrementTick+0x44>
 8005ade:	4b43      	ldr	r3, [pc, #268]	; (8005bec <xTaskIncrementTick+0x154>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	4b42      	ldr	r3, [pc, #264]	; (8005bf0 <xTaskIncrementTick+0x158>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a40      	ldr	r2, [pc, #256]	; (8005bec <xTaskIncrementTick+0x154>)
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	4a40      	ldr	r2, [pc, #256]	; (8005bf0 <xTaskIncrementTick+0x158>)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	4b40      	ldr	r3, [pc, #256]	; (8005bf4 <xTaskIncrementTick+0x15c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3301      	adds	r3, #1
 8005af8:	4a3e      	ldr	r2, [pc, #248]	; (8005bf4 <xTaskIncrementTick+0x15c>)
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	f000 fa7e 	bl	8005ffc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b00:	4b3d      	ldr	r3, [pc, #244]	; (8005bf8 <xTaskIncrementTick+0x160>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d34d      	bcc.n	8005ba6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b0a:	4b38      	ldr	r3, [pc, #224]	; (8005bec <xTaskIncrementTick+0x154>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <xTaskIncrementTick+0x80>
 8005b14:	2301      	movs	r3, #1
 8005b16:	e000      	b.n	8005b1a <xTaskIncrementTick+0x82>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d004      	beq.n	8005b28 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b1e:	4b36      	ldr	r3, [pc, #216]	; (8005bf8 <xTaskIncrementTick+0x160>)
 8005b20:	f04f 32ff 	mov.w	r2, #4294967295
 8005b24:	601a      	str	r2, [r3, #0]
					break;
 8005b26:	e03e      	b.n	8005ba6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b28:	4b30      	ldr	r3, [pc, #192]	; (8005bec <xTaskIncrementTick+0x154>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d203      	bcs.n	8005b48 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b40:	4a2d      	ldr	r2, [pc, #180]	; (8005bf8 <xTaskIncrementTick+0x160>)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6013      	str	r3, [r2, #0]
						break;
 8005b46:	e02e      	b.n	8005ba6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff f8e0 	bl	8004d12 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d004      	beq.n	8005b64 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	3318      	adds	r3, #24
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff f8d7 	bl	8004d12 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	2201      	movs	r2, #1
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	4b23      	ldr	r3, [pc, #140]	; (8005bfc <xTaskIncrementTick+0x164>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	4a22      	ldr	r2, [pc, #136]	; (8005bfc <xTaskIncrementTick+0x164>)
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4a1f      	ldr	r2, [pc, #124]	; (8005c00 <xTaskIncrementTick+0x168>)
 8005b84:	441a      	add	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f7ff f865 	bl	8004c5c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b96:	4b1b      	ldr	r3, [pc, #108]	; (8005c04 <xTaskIncrementTick+0x16c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d3b4      	bcc.n	8005b0a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ba4:	e7b1      	b.n	8005b0a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ba6:	4b17      	ldr	r3, [pc, #92]	; (8005c04 <xTaskIncrementTick+0x16c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bac:	4914      	ldr	r1, [pc, #80]	; (8005c00 <xTaskIncrementTick+0x168>)
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d907      	bls.n	8005bce <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e004      	b.n	8005bce <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005bc4:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <xTaskIncrementTick+0x170>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	4a0f      	ldr	r2, [pc, #60]	; (8005c08 <xTaskIncrementTick+0x170>)
 8005bcc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005bce:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <xTaskIncrementTick+0x174>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005bda:	697b      	ldr	r3, [r7, #20]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	20000618 	.word	0x20000618
 8005be8:	200005f4 	.word	0x200005f4
 8005bec:	200005a8 	.word	0x200005a8
 8005bf0:	200005ac 	.word	0x200005ac
 8005bf4:	20000608 	.word	0x20000608
 8005bf8:	20000610 	.word	0x20000610
 8005bfc:	200005f8 	.word	0x200005f8
 8005c00:	200004f4 	.word	0x200004f4
 8005c04:	200004f0 	.word	0x200004f0
 8005c08:	20000600 	.word	0x20000600
 8005c0c:	20000604 	.word	0x20000604

08005c10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c16:	4b26      	ldr	r3, [pc, #152]	; (8005cb0 <vTaskSwitchContext+0xa0>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c1e:	4b25      	ldr	r3, [pc, #148]	; (8005cb4 <vTaskSwitchContext+0xa4>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c24:	e03e      	b.n	8005ca4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005c26:	4b23      	ldr	r3, [pc, #140]	; (8005cb4 <vTaskSwitchContext+0xa4>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005c2c:	4b22      	ldr	r3, [pc, #136]	; (8005cb8 <vTaskSwitchContext+0xa8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	fab3 f383 	clz	r3, r3
 8005c38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005c3a:	7afb      	ldrb	r3, [r7, #11]
 8005c3c:	f1c3 031f 	rsb	r3, r3, #31
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	491e      	ldr	r1, [pc, #120]	; (8005cbc <vTaskSwitchContext+0xac>)
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <vTaskSwitchContext+0x5a>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	607b      	str	r3, [r7, #4]
 8005c68:	e7fe      	b.n	8005c68 <vTaskSwitchContext+0x58>
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4a11      	ldr	r2, [pc, #68]	; (8005cbc <vTaskSwitchContext+0xac>)
 8005c76:	4413      	add	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	605a      	str	r2, [r3, #4]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d104      	bne.n	8005c9a <vTaskSwitchContext+0x8a>
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <vTaskSwitchContext+0xb0>)
 8005ca2:	6013      	str	r3, [r2, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	20000618 	.word	0x20000618
 8005cb4:	20000604 	.word	0x20000604
 8005cb8:	200005f8 	.word	0x200005f8
 8005cbc:	200004f4 	.word	0x200004f4
 8005cc0:	200004f0 	.word	0x200004f0

08005cc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <vTaskPlaceOnEventList+0x24>
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	e7fe      	b.n	8005ce6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ce8:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <vTaskPlaceOnEventList+0x44>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3318      	adds	r3, #24
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7fe ffd6 	bl	8004ca2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	6838      	ldr	r0, [r7, #0]
 8005cfa:	f000 fb7d 	bl	80063f8 <prvAddCurrentTaskToDelayedList>
}
 8005cfe:	bf00      	nop
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	200004f0 	.word	0x200004f0

08005d0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d109      	bne.n	8005d36 <xTaskRemoveFromEventList+0x2a>
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	e7fe      	b.n	8005d34 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	3318      	adds	r3, #24
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe ffe9 	bl	8004d12 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d40:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <xTaskRemoveFromEventList+0xac>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d11c      	bne.n	8005d82 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fe ffe0 	bl	8004d12 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	2201      	movs	r2, #1
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	4b18      	ldr	r3, [pc, #96]	; (8005dbc <xTaskRemoveFromEventList+0xb0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	4a16      	ldr	r2, [pc, #88]	; (8005dbc <xTaskRemoveFromEventList+0xb0>)
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4a13      	ldr	r2, [pc, #76]	; (8005dc0 <xTaskRemoveFromEventList+0xb4>)
 8005d72:	441a      	add	r2, r3
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f7fe ff6e 	bl	8004c5c <vListInsertEnd>
 8005d80:	e005      	b.n	8005d8e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	3318      	adds	r3, #24
 8005d86:	4619      	mov	r1, r3
 8005d88:	480e      	ldr	r0, [pc, #56]	; (8005dc4 <xTaskRemoveFromEventList+0xb8>)
 8005d8a:	f7fe ff67 	bl	8004c5c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d92:	4b0d      	ldr	r3, [pc, #52]	; (8005dc8 <xTaskRemoveFromEventList+0xbc>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d905      	bls.n	8005da8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005da0:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <xTaskRemoveFromEventList+0xc0>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	e001      	b.n	8005dac <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005dac:	697b      	ldr	r3, [r7, #20]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20000618 	.word	0x20000618
 8005dbc:	200005f8 	.word	0x200005f8
 8005dc0:	200004f4 	.word	0x200004f4
 8005dc4:	200005b0 	.word	0x200005b0
 8005dc8:	200004f0 	.word	0x200004f0
 8005dcc:	20000604 	.word	0x20000604

08005dd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005dd8:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <vTaskInternalSetTimeOutState+0x24>)
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005de0:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <vTaskInternalSetTimeOutState+0x28>)
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	605a      	str	r2, [r3, #4]
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20000608 	.word	0x20000608
 8005df8:	200005f4 	.word	0x200005f4

08005dfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d109      	bne.n	8005e20 <xTaskCheckForTimeOut+0x24>
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	e7fe      	b.n	8005e1e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d109      	bne.n	8005e3a <xTaskCheckForTimeOut+0x3e>
 8005e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e7fe      	b.n	8005e38 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005e3a:	f000 fc2d 	bl	8006698 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e3e:	4b1d      	ldr	r3, [pc, #116]	; (8005eb4 <xTaskCheckForTimeOut+0xb8>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e56:	d102      	bne.n	8005e5e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61fb      	str	r3, [r7, #28]
 8005e5c:	e023      	b.n	8005ea6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	4b15      	ldr	r3, [pc, #84]	; (8005eb8 <xTaskCheckForTimeOut+0xbc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d007      	beq.n	8005e7a <xTaskCheckForTimeOut+0x7e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d302      	bcc.n	8005e7a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	e015      	b.n	8005ea6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d20b      	bcs.n	8005e9c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1ad2      	subs	r2, r2, r3
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff ff9d 	bl	8005dd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	e004      	b.n	8005ea6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ea6:	f000 fc25 	bl	80066f4 <vPortExitCritical>

	return xReturn;
 8005eaa:	69fb      	ldr	r3, [r7, #28]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3720      	adds	r7, #32
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	200005f4 	.word	0x200005f4
 8005eb8:	20000608 	.word	0x20000608

08005ebc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ec0:	4b03      	ldr	r3, [pc, #12]	; (8005ed0 <vTaskMissedYield+0x14>)
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]
}
 8005ec6:	bf00      	nop
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bc80      	pop	{r7}
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	20000604 	.word	0x20000604

08005ed4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005edc:	f000 f852 	bl	8005f84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <prvIdleTask+0x28>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d9f9      	bls.n	8005edc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <prvIdleTask+0x2c>)
 8005eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ef8:	e7f0      	b.n	8005edc <prvIdleTask+0x8>
 8005efa:	bf00      	nop
 8005efc:	200004f4 	.word	0x200004f4
 8005f00:	e000ed04 	.word	0xe000ed04

08005f04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	e00c      	b.n	8005f2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4a12      	ldr	r2, [pc, #72]	; (8005f64 <prvInitialiseTaskLists+0x60>)
 8005f1c:	4413      	add	r3, r2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fe fe71 	bl	8004c06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3301      	adds	r3, #1
 8005f28:	607b      	str	r3, [r7, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b06      	cmp	r3, #6
 8005f2e:	d9ef      	bls.n	8005f10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f30:	480d      	ldr	r0, [pc, #52]	; (8005f68 <prvInitialiseTaskLists+0x64>)
 8005f32:	f7fe fe68 	bl	8004c06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f36:	480d      	ldr	r0, [pc, #52]	; (8005f6c <prvInitialiseTaskLists+0x68>)
 8005f38:	f7fe fe65 	bl	8004c06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f3c:	480c      	ldr	r0, [pc, #48]	; (8005f70 <prvInitialiseTaskLists+0x6c>)
 8005f3e:	f7fe fe62 	bl	8004c06 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f42:	480c      	ldr	r0, [pc, #48]	; (8005f74 <prvInitialiseTaskLists+0x70>)
 8005f44:	f7fe fe5f 	bl	8004c06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f48:	480b      	ldr	r0, [pc, #44]	; (8005f78 <prvInitialiseTaskLists+0x74>)
 8005f4a:	f7fe fe5c 	bl	8004c06 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <prvInitialiseTaskLists+0x78>)
 8005f50:	4a05      	ldr	r2, [pc, #20]	; (8005f68 <prvInitialiseTaskLists+0x64>)
 8005f52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <prvInitialiseTaskLists+0x7c>)
 8005f56:	4a05      	ldr	r2, [pc, #20]	; (8005f6c <prvInitialiseTaskLists+0x68>)
 8005f58:	601a      	str	r2, [r3, #0]
}
 8005f5a:	bf00      	nop
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	200004f4 	.word	0x200004f4
 8005f68:	20000580 	.word	0x20000580
 8005f6c:	20000594 	.word	0x20000594
 8005f70:	200005b0 	.word	0x200005b0
 8005f74:	200005c4 	.word	0x200005c4
 8005f78:	200005dc 	.word	0x200005dc
 8005f7c:	200005a8 	.word	0x200005a8
 8005f80:	200005ac 	.word	0x200005ac

08005f84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f8a:	e019      	b.n	8005fc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f8c:	f000 fb84 	bl	8006698 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005f90:	4b0f      	ldr	r3, [pc, #60]	; (8005fd0 <prvCheckTasksWaitingTermination+0x4c>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fe feb8 	bl	8004d12 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fa2:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <prvCheckTasksWaitingTermination+0x50>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	4a0a      	ldr	r2, [pc, #40]	; (8005fd4 <prvCheckTasksWaitingTermination+0x50>)
 8005faa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <prvCheckTasksWaitingTermination+0x54>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	4a09      	ldr	r2, [pc, #36]	; (8005fd8 <prvCheckTasksWaitingTermination+0x54>)
 8005fb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fb6:	f000 fb9d 	bl	80066f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f80e 	bl	8005fdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fc0:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <prvCheckTasksWaitingTermination+0x54>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e1      	bne.n	8005f8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	200005c4 	.word	0x200005c4
 8005fd4:	200005f0 	.word	0x200005f0
 8005fd8:	200005d8 	.word	0x200005d8

08005fdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fd0d 	bl	8006a08 <vPortFree>
			vPortFree( pxTCB );
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fd0a 	bl	8006a08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ff4:	bf00      	nop
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006002:	4b0e      	ldr	r3, [pc, #56]	; (800603c <prvResetNextTaskUnblockTime+0x40>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <prvResetNextTaskUnblockTime+0x14>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <prvResetNextTaskUnblockTime+0x16>
 8006010:	2300      	movs	r3, #0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d004      	beq.n	8006020 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006016:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <prvResetNextTaskUnblockTime+0x44>)
 8006018:	f04f 32ff 	mov.w	r2, #4294967295
 800601c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800601e:	e008      	b.n	8006032 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006020:	4b06      	ldr	r3, [pc, #24]	; (800603c <prvResetNextTaskUnblockTime+0x40>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	4a04      	ldr	r2, [pc, #16]	; (8006040 <prvResetNextTaskUnblockTime+0x44>)
 8006030:	6013      	str	r3, [r2, #0]
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	bc80      	pop	{r7}
 800603a:	4770      	bx	lr
 800603c:	200005a8 	.word	0x200005a8
 8006040:	20000610 	.word	0x20000610

08006044 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800604a:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <xTaskGetSchedulerState+0x34>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d102      	bne.n	8006058 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006052:	2301      	movs	r3, #1
 8006054:	607b      	str	r3, [r7, #4]
 8006056:	e008      	b.n	800606a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006058:	4b08      	ldr	r3, [pc, #32]	; (800607c <xTaskGetSchedulerState+0x38>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d102      	bne.n	8006066 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006060:	2302      	movs	r3, #2
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	e001      	b.n	800606a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006066:	2300      	movs	r3, #0
 8006068:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800606a:	687b      	ldr	r3, [r7, #4]
	}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	200005fc 	.word	0x200005fc
 800607c:	20000618 	.word	0x20000618

08006080 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d06e      	beq.n	8006174 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	4b39      	ldr	r3, [pc, #228]	; (8006180 <xTaskPriorityInherit+0x100>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d25e      	bcs.n	8006162 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	db06      	blt.n	80060ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ac:	4b34      	ldr	r3, [pc, #208]	; (8006180 <xTaskPriorityInherit+0x100>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	f1c3 0207 	rsb	r2, r3, #7
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6959      	ldr	r1, [r3, #20]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4a2e      	ldr	r2, [pc, #184]	; (8006184 <xTaskPriorityInherit+0x104>)
 80060cc:	4413      	add	r3, r2
 80060ce:	4299      	cmp	r1, r3
 80060d0:	d101      	bne.n	80060d6 <xTaskPriorityInherit+0x56>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e000      	b.n	80060d8 <xTaskPriorityInherit+0x58>
 80060d6:	2300      	movs	r3, #0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d03a      	beq.n	8006152 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	3304      	adds	r3, #4
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fe fe16 	bl	8004d12 <uxListRemove>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d115      	bne.n	8006118 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	4924      	ldr	r1, [pc, #144]	; (8006184 <xTaskPriorityInherit+0x104>)
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <xTaskPriorityInherit+0x98>
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	2201      	movs	r2, #1
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	43da      	mvns	r2, r3
 800610e:	4b1e      	ldr	r3, [pc, #120]	; (8006188 <xTaskPriorityInherit+0x108>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4013      	ands	r3, r2
 8006114:	4a1c      	ldr	r2, [pc, #112]	; (8006188 <xTaskPriorityInherit+0x108>)
 8006116:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006118:	4b19      	ldr	r3, [pc, #100]	; (8006180 <xTaskPriorityInherit+0x100>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	2201      	movs	r2, #1
 8006128:	409a      	lsls	r2, r3
 800612a:	4b17      	ldr	r3, [pc, #92]	; (8006188 <xTaskPriorityInherit+0x108>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4313      	orrs	r3, r2
 8006130:	4a15      	ldr	r2, [pc, #84]	; (8006188 <xTaskPriorityInherit+0x108>)
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4a10      	ldr	r2, [pc, #64]	; (8006184 <xTaskPriorityInherit+0x104>)
 8006142:	441a      	add	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	3304      	adds	r3, #4
 8006148:	4619      	mov	r1, r3
 800614a:	4610      	mov	r0, r2
 800614c:	f7fe fd86 	bl	8004c5c <vListInsertEnd>
 8006150:	e004      	b.n	800615c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <xTaskPriorityInherit+0x100>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800615c:	2301      	movs	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e008      	b.n	8006174 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006166:	4b06      	ldr	r3, [pc, #24]	; (8006180 <xTaskPriorityInherit+0x100>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	429a      	cmp	r2, r3
 800616e:	d201      	bcs.n	8006174 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006170:	2301      	movs	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006174:	68fb      	ldr	r3, [r7, #12]
	}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	200004f0 	.word	0x200004f0
 8006184:	200004f4 	.word	0x200004f4
 8006188:	200005f8 	.word	0x200005f8

0800618c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006198:	2300      	movs	r3, #0
 800619a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d06c      	beq.n	800627c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80061a2:	4b39      	ldr	r3, [pc, #228]	; (8006288 <xTaskPriorityDisinherit+0xfc>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d009      	beq.n	80061c0 <xTaskPriorityDisinherit+0x34>
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	e7fe      	b.n	80061be <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <xTaskPriorityDisinherit+0x50>
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	e7fe      	b.n	80061da <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e0:	1e5a      	subs	r2, r3, #1
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d044      	beq.n	800627c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d140      	bne.n	800627c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fe fd87 	bl	8004d12 <uxListRemove>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d115      	bne.n	8006236 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620e:	491f      	ldr	r1, [pc, #124]	; (800628c <xTaskPriorityDisinherit+0x100>)
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <xTaskPriorityDisinherit+0xaa>
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	2201      	movs	r2, #1
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	43da      	mvns	r2, r3
 800622c:	4b18      	ldr	r3, [pc, #96]	; (8006290 <xTaskPriorityDisinherit+0x104>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4013      	ands	r3, r2
 8006232:	4a17      	ldr	r2, [pc, #92]	; (8006290 <xTaskPriorityDisinherit+0x104>)
 8006234:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	f1c3 0207 	rsb	r2, r3, #7
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624e:	2201      	movs	r2, #1
 8006250:	409a      	lsls	r2, r3
 8006252:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <xTaskPriorityDisinherit+0x104>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4313      	orrs	r3, r2
 8006258:	4a0d      	ldr	r2, [pc, #52]	; (8006290 <xTaskPriorityDisinherit+0x104>)
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4a08      	ldr	r2, [pc, #32]	; (800628c <xTaskPriorityDisinherit+0x100>)
 800626a:	441a      	add	r2, r3
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	3304      	adds	r3, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f7fe fcf2 	bl	8004c5c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006278:	2301      	movs	r3, #1
 800627a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800627c:	697b      	ldr	r3, [r7, #20]
	}
 800627e:	4618      	mov	r0, r3
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	200004f0 	.word	0x200004f0
 800628c:	200004f4 	.word	0x200004f4
 8006290:	200005f8 	.word	0x200005f8

08006294 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80062a2:	2301      	movs	r3, #1
 80062a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8086 	beq.w	80063ba <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <vTaskPriorityDisinheritAfterTimeout+0x36>
 80062b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	e7fe      	b.n	80062c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d902      	bls.n	80062da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	61fb      	str	r3, [r7, #28]
 80062d8:	e002      	b.n	80062e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d067      	beq.n	80063ba <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d162      	bne.n	80063ba <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80062f4:	4b33      	ldr	r3, [pc, #204]	; (80063c4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d109      	bne.n	8006312 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	60bb      	str	r3, [r7, #8]
 8006310:	e7fe      	b.n	8006310 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006316:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	db04      	blt.n	8006330 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	f1c3 0207 	rsb	r2, r3, #7
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	6959      	ldr	r1, [r3, #20]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4a22      	ldr	r2, [pc, #136]	; (80063c8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006340:	4413      	add	r3, r2
 8006342:	4299      	cmp	r1, r3
 8006344:	d101      	bne.n	800634a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800634a:	2300      	movs	r3, #0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d034      	beq.n	80063ba <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	3304      	adds	r3, #4
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe fcdc 	bl	8004d12 <uxListRemove>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d115      	bne.n	800638c <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	4918      	ldr	r1, [pc, #96]	; (80063c8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006366:	4613      	mov	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	440b      	add	r3, r1
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637a:	2201      	movs	r2, #1
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	43da      	mvns	r2, r3
 8006382:	4b12      	ldr	r3, [pc, #72]	; (80063cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4013      	ands	r3, r2
 8006388:	4a10      	ldr	r2, [pc, #64]	; (80063cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800638a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	2201      	movs	r2, #1
 8006392:	409a      	lsls	r2, r3
 8006394:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4313      	orrs	r3, r2
 800639a:	4a0c      	ldr	r2, [pc, #48]	; (80063cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4a07      	ldr	r2, [pc, #28]	; (80063c8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80063ac:	441a      	add	r2, r3
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	3304      	adds	r3, #4
 80063b2:	4619      	mov	r1, r3
 80063b4:	4610      	mov	r0, r2
 80063b6:	f7fe fc51 	bl	8004c5c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063ba:	bf00      	nop
 80063bc:	3720      	adds	r7, #32
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	200004f0 	.word	0x200004f0
 80063c8:	200004f4 	.word	0x200004f4
 80063cc:	200005f8 	.word	0x200005f8

080063d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80063d4:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d004      	beq.n	80063e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063e2:	3201      	adds	r2, #1
 80063e4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80063e6:	4b03      	ldr	r3, [pc, #12]	; (80063f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80063e8:	681b      	ldr	r3, [r3, #0]
	}
 80063ea:	4618      	mov	r0, r3
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc80      	pop	{r7}
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	200004f0 	.word	0x200004f0

080063f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006402:	4b29      	ldr	r3, [pc, #164]	; (80064a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006408:	4b28      	ldr	r3, [pc, #160]	; (80064ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3304      	adds	r3, #4
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fc7f 	bl	8004d12 <uxListRemove>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10b      	bne.n	8006432 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800641a:	4b24      	ldr	r3, [pc, #144]	; (80064ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	2201      	movs	r2, #1
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	43da      	mvns	r2, r3
 8006428:	4b21      	ldr	r3, [pc, #132]	; (80064b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4013      	ands	r3, r2
 800642e:	4a20      	ldr	r2, [pc, #128]	; (80064b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006430:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006438:	d10a      	bne.n	8006450 <prvAddCurrentTaskToDelayedList+0x58>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006440:	4b1a      	ldr	r3, [pc, #104]	; (80064ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3304      	adds	r3, #4
 8006446:	4619      	mov	r1, r3
 8006448:	481a      	ldr	r0, [pc, #104]	; (80064b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800644a:	f7fe fc07 	bl	8004c5c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800644e:	e026      	b.n	800649e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4413      	add	r3, r2
 8006456:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006458:	4b14      	ldr	r3, [pc, #80]	; (80064ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	429a      	cmp	r2, r3
 8006466:	d209      	bcs.n	800647c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006468:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3304      	adds	r3, #4
 8006472:	4619      	mov	r1, r3
 8006474:	4610      	mov	r0, r2
 8006476:	f7fe fc14 	bl	8004ca2 <vListInsert>
}
 800647a:	e010      	b.n	800649e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800647c:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	4b0a      	ldr	r3, [pc, #40]	; (80064ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3304      	adds	r3, #4
 8006486:	4619      	mov	r1, r3
 8006488:	4610      	mov	r0, r2
 800648a:	f7fe fc0a 	bl	8004ca2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800648e:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	429a      	cmp	r2, r3
 8006496:	d202      	bcs.n	800649e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006498:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6013      	str	r3, [r2, #0]
}
 800649e:	bf00      	nop
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	200005f4 	.word	0x200005f4
 80064ac:	200004f0 	.word	0x200004f0
 80064b0:	200005f8 	.word	0x200005f8
 80064b4:	200005dc 	.word	0x200005dc
 80064b8:	200005ac 	.word	0x200005ac
 80064bc:	200005a8 	.word	0x200005a8
 80064c0:	20000610 	.word	0x20000610

080064c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3b04      	subs	r3, #4
 80064d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3b04      	subs	r3, #4
 80064e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f023 0201 	bic.w	r2, r3, #1
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3b04      	subs	r3, #4
 80064f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064f4:	4a08      	ldr	r2, [pc, #32]	; (8006518 <pxPortInitialiseStack+0x54>)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3b14      	subs	r3, #20
 80064fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3b20      	subs	r3, #32
 800650a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800650c:	68fb      	ldr	r3, [r7, #12]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr
 8006518:	0800651d 	.word	0x0800651d

0800651c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006522:	2300      	movs	r3, #0
 8006524:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006526:	4b10      	ldr	r3, [pc, #64]	; (8006568 <prvTaskExitError+0x4c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652e:	d009      	beq.n	8006544 <prvTaskExitError+0x28>
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	e7fe      	b.n	8006542 <prvTaskExitError+0x26>
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006556:	bf00      	nop
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0fc      	beq.n	8006558 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr
 8006568:	20000118 	.word	0x20000118
 800656c:	00000000 	.word	0x00000000

08006570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006570:	4b07      	ldr	r3, [pc, #28]	; (8006590 <pxCurrentTCBConst2>)
 8006572:	6819      	ldr	r1, [r3, #0]
 8006574:	6808      	ldr	r0, [r1, #0]
 8006576:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800657a:	f380 8809 	msr	PSP, r0
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f04f 0000 	mov.w	r0, #0
 8006586:	f380 8811 	msr	BASEPRI, r0
 800658a:	f04e 0e0d 	orr.w	lr, lr, #13
 800658e:	4770      	bx	lr

08006590 <pxCurrentTCBConst2>:
 8006590:	200004f0 	.word	0x200004f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop

08006598 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006598:	4806      	ldr	r0, [pc, #24]	; (80065b4 <prvPortStartFirstTask+0x1c>)
 800659a:	6800      	ldr	r0, [r0, #0]
 800659c:	6800      	ldr	r0, [r0, #0]
 800659e:	f380 8808 	msr	MSP, r0
 80065a2:	b662      	cpsie	i
 80065a4:	b661      	cpsie	f
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	df00      	svc	0
 80065b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065b2:	bf00      	nop
 80065b4:	e000ed08 	.word	0xe000ed08

080065b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065be:	4b31      	ldr	r3, [pc, #196]	; (8006684 <xPortStartScheduler+0xcc>)
 80065c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	22ff      	movs	r2, #255	; 0xff
 80065ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	4b29      	ldr	r3, [pc, #164]	; (8006688 <xPortStartScheduler+0xd0>)
 80065e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065e6:	4b29      	ldr	r3, [pc, #164]	; (800668c <xPortStartScheduler+0xd4>)
 80065e8:	2207      	movs	r2, #7
 80065ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065ec:	e009      	b.n	8006602 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80065ee:	4b27      	ldr	r3, [pc, #156]	; (800668c <xPortStartScheduler+0xd4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	4a25      	ldr	r2, [pc, #148]	; (800668c <xPortStartScheduler+0xd4>)
 80065f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006602:	78fb      	ldrb	r3, [r7, #3]
 8006604:	b2db      	uxtb	r3, r3
 8006606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660a:	2b80      	cmp	r3, #128	; 0x80
 800660c:	d0ef      	beq.n	80065ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800660e:	4b1f      	ldr	r3, [pc, #124]	; (800668c <xPortStartScheduler+0xd4>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f1c3 0307 	rsb	r3, r3, #7
 8006616:	2b04      	cmp	r3, #4
 8006618:	d009      	beq.n	800662e <xPortStartScheduler+0x76>
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	60bb      	str	r3, [r7, #8]
 800662c:	e7fe      	b.n	800662c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800662e:	4b17      	ldr	r3, [pc, #92]	; (800668c <xPortStartScheduler+0xd4>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	4a15      	ldr	r2, [pc, #84]	; (800668c <xPortStartScheduler+0xd4>)
 8006636:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006638:	4b14      	ldr	r3, [pc, #80]	; (800668c <xPortStartScheduler+0xd4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006640:	4a12      	ldr	r2, [pc, #72]	; (800668c <xPortStartScheduler+0xd4>)
 8006642:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	b2da      	uxtb	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800664c:	4b10      	ldr	r3, [pc, #64]	; (8006690 <xPortStartScheduler+0xd8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a0f      	ldr	r2, [pc, #60]	; (8006690 <xPortStartScheduler+0xd8>)
 8006652:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006656:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006658:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <xPortStartScheduler+0xd8>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a0c      	ldr	r2, [pc, #48]	; (8006690 <xPortStartScheduler+0xd8>)
 800665e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006662:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006664:	f000 f8b0 	bl	80067c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <xPortStartScheduler+0xdc>)
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800666e:	f7ff ff93 	bl	8006598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006672:	f7ff facd 	bl	8005c10 <vTaskSwitchContext>
	prvTaskExitError();
 8006676:	f7ff ff51 	bl	800651c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	e000e400 	.word	0xe000e400
 8006688:	2000061c 	.word	0x2000061c
 800668c:	20000620 	.word	0x20000620
 8006690:	e000ed20 	.word	0xe000ed20
 8006694:	20000118 	.word	0x20000118

08006698 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066b0:	4b0e      	ldr	r3, [pc, #56]	; (80066ec <vPortEnterCritical+0x54>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	4a0d      	ldr	r2, [pc, #52]	; (80066ec <vPortEnterCritical+0x54>)
 80066b8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066ba:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <vPortEnterCritical+0x54>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d10e      	bne.n	80066e0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066c2:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <vPortEnterCritical+0x58>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d009      	beq.n	80066e0 <vPortEnterCritical+0x48>
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	603b      	str	r3, [r7, #0]
 80066de:	e7fe      	b.n	80066de <vPortEnterCritical+0x46>
	}
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	20000118 	.word	0x20000118
 80066f0:	e000ed04 	.word	0xe000ed04

080066f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066fa:	4b10      	ldr	r3, [pc, #64]	; (800673c <vPortExitCritical+0x48>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d109      	bne.n	8006716 <vPortExitCritical+0x22>
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	607b      	str	r3, [r7, #4]
 8006714:	e7fe      	b.n	8006714 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006716:	4b09      	ldr	r3, [pc, #36]	; (800673c <vPortExitCritical+0x48>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3b01      	subs	r3, #1
 800671c:	4a07      	ldr	r2, [pc, #28]	; (800673c <vPortExitCritical+0x48>)
 800671e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006720:	4b06      	ldr	r3, [pc, #24]	; (800673c <vPortExitCritical+0x48>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d104      	bne.n	8006732 <vPortExitCritical+0x3e>
 8006728:	2300      	movs	r3, #0
 800672a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr
 800673c:	20000118 	.word	0x20000118

08006740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006740:	f3ef 8009 	mrs	r0, PSP
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <pxCurrentTCBConst>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006750:	6010      	str	r0, [r2, #0]
 8006752:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006756:	f04f 0050 	mov.w	r0, #80	; 0x50
 800675a:	f380 8811 	msr	BASEPRI, r0
 800675e:	f7ff fa57 	bl	8005c10 <vTaskSwitchContext>
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f380 8811 	msr	BASEPRI, r0
 800676a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800676e:	6819      	ldr	r1, [r3, #0]
 8006770:	6808      	ldr	r0, [r1, #0]
 8006772:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006776:	f380 8809 	msr	PSP, r0
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	4770      	bx	lr

08006780 <pxCurrentTCBConst>:
 8006780:	200004f0 	.word	0x200004f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop

08006788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067a0:	f7ff f97a 	bl	8005a98 <xTaskIncrementTick>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067aa:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <SysTick_Handler+0x3c>)
 80067ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80067bc:	bf00      	nop
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	e000ed04 	.word	0xe000ed04

080067c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067cc:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <vPortSetupTimerInterrupt+0x30>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067d2:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <vPortSetupTimerInterrupt+0x34>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067d8:	4b09      	ldr	r3, [pc, #36]	; (8006800 <vPortSetupTimerInterrupt+0x38>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a09      	ldr	r2, [pc, #36]	; (8006804 <vPortSetupTimerInterrupt+0x3c>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	099b      	lsrs	r3, r3, #6
 80067e4:	4a08      	ldr	r2, [pc, #32]	; (8006808 <vPortSetupTimerInterrupt+0x40>)
 80067e6:	3b01      	subs	r3, #1
 80067e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067ea:	4b03      	ldr	r3, [pc, #12]	; (80067f8 <vPortSetupTimerInterrupt+0x30>)
 80067ec:	2207      	movs	r2, #7
 80067ee:	601a      	str	r2, [r3, #0]
}
 80067f0:	bf00      	nop
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr
 80067f8:	e000e010 	.word	0xe000e010
 80067fc:	e000e018 	.word	0xe000e018
 8006800:	2000029c 	.word	0x2000029c
 8006804:	10624dd3 	.word	0x10624dd3
 8006808:	e000e014 	.word	0xe000e014

0800680c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006812:	f3ef 8305 	mrs	r3, IPSR
 8006816:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b0f      	cmp	r3, #15
 800681c:	d913      	bls.n	8006846 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800681e:	4a15      	ldr	r2, [pc, #84]	; (8006874 <vPortValidateInterruptPriority+0x68>)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006828:	4b13      	ldr	r3, [pc, #76]	; (8006878 <vPortValidateInterruptPriority+0x6c>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	7afa      	ldrb	r2, [r7, #11]
 800682e:	429a      	cmp	r2, r3
 8006830:	d209      	bcs.n	8006846 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	607b      	str	r3, [r7, #4]
 8006844:	e7fe      	b.n	8006844 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006846:	4b0d      	ldr	r3, [pc, #52]	; (800687c <vPortValidateInterruptPriority+0x70>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800684e:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <vPortValidateInterruptPriority+0x74>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d909      	bls.n	800686a <vPortValidateInterruptPriority+0x5e>
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	e7fe      	b.n	8006868 <vPortValidateInterruptPriority+0x5c>
	}
 800686a:	bf00      	nop
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr
 8006874:	e000e3f0 	.word	0xe000e3f0
 8006878:	2000061c 	.word	0x2000061c
 800687c:	e000ed0c 	.word	0xe000ed0c
 8006880:	20000620 	.word	0x20000620

08006884 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	; 0x28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800688c:	2300      	movs	r3, #0
 800688e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006890:	f7ff f858 	bl	8005944 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006894:	4b57      	ldr	r3, [pc, #348]	; (80069f4 <pvPortMalloc+0x170>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800689c:	f000 f90c 	bl	8006ab8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068a0:	4b55      	ldr	r3, [pc, #340]	; (80069f8 <pvPortMalloc+0x174>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f040 808c 	bne.w	80069c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01c      	beq.n	80068ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80068b4:	2208      	movs	r2, #8
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4413      	add	r3, r2
 80068ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d013      	beq.n	80068ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f023 0307 	bic.w	r3, r3, #7
 80068cc:	3308      	adds	r3, #8
 80068ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d009      	beq.n	80068ee <pvPortMalloc+0x6a>
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e7fe      	b.n	80068ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d068      	beq.n	80069c6 <pvPortMalloc+0x142>
 80068f4:	4b41      	ldr	r3, [pc, #260]	; (80069fc <pvPortMalloc+0x178>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d863      	bhi.n	80069c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068fe:	4b40      	ldr	r3, [pc, #256]	; (8006a00 <pvPortMalloc+0x17c>)
 8006900:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006902:	4b3f      	ldr	r3, [pc, #252]	; (8006a00 <pvPortMalloc+0x17c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006908:	e004      	b.n	8006914 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	429a      	cmp	r2, r3
 800691c:	d903      	bls.n	8006926 <pvPortMalloc+0xa2>
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1f1      	bne.n	800690a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006926:	4b33      	ldr	r3, [pc, #204]	; (80069f4 <pvPortMalloc+0x170>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692c:	429a      	cmp	r2, r3
 800692e:	d04a      	beq.n	80069c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2208      	movs	r2, #8
 8006936:	4413      	add	r3, r2
 8006938:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	1ad2      	subs	r2, r2, r3
 800694a:	2308      	movs	r3, #8
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	429a      	cmp	r2, r3
 8006950:	d91e      	bls.n	8006990 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4413      	add	r3, r2
 8006958:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <pvPortMalloc+0xf4>
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	e7fe      	b.n	8006976 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800698a:	69b8      	ldr	r0, [r7, #24]
 800698c:	f000 f8f6 	bl	8006b7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006990:	4b1a      	ldr	r3, [pc, #104]	; (80069fc <pvPortMalloc+0x178>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	4a18      	ldr	r2, [pc, #96]	; (80069fc <pvPortMalloc+0x178>)
 800699c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800699e:	4b17      	ldr	r3, [pc, #92]	; (80069fc <pvPortMalloc+0x178>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b18      	ldr	r3, [pc, #96]	; (8006a04 <pvPortMalloc+0x180>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d203      	bcs.n	80069b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069aa:	4b14      	ldr	r3, [pc, #80]	; (80069fc <pvPortMalloc+0x178>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a15      	ldr	r2, [pc, #84]	; (8006a04 <pvPortMalloc+0x180>)
 80069b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <pvPortMalloc+0x174>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069c6:	f7fe ffcb 	bl	8005960 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d009      	beq.n	80069e8 <pvPortMalloc+0x164>
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	e7fe      	b.n	80069e6 <pvPortMalloc+0x162>
	return pvReturn;
 80069e8:	69fb      	ldr	r3, [r7, #28]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3728      	adds	r7, #40	; 0x28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	2000122c 	.word	0x2000122c
 80069f8:	20001238 	.word	0x20001238
 80069fc:	20001230 	.word	0x20001230
 8006a00:	20001224 	.word	0x20001224
 8006a04:	20001234 	.word	0x20001234

08006a08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d046      	beq.n	8006aa8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a1a:	2308      	movs	r3, #8
 8006a1c:	425b      	negs	r3, r3
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	4413      	add	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	4b20      	ldr	r3, [pc, #128]	; (8006ab0 <vPortFree+0xa8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4013      	ands	r3, r2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d109      	bne.n	8006a4a <vPortFree+0x42>
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	e7fe      	b.n	8006a48 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d009      	beq.n	8006a66 <vPortFree+0x5e>
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	60bb      	str	r3, [r7, #8]
 8006a64:	e7fe      	b.n	8006a64 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	4b11      	ldr	r3, [pc, #68]	; (8006ab0 <vPortFree+0xa8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d019      	beq.n	8006aa8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d115      	bne.n	8006aa8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <vPortFree+0xa8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	43db      	mvns	r3, r3
 8006a86:	401a      	ands	r2, r3
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a8c:	f7fe ff5a 	bl	8005944 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <vPortFree+0xac>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4413      	add	r3, r2
 8006a9a:	4a06      	ldr	r2, [pc, #24]	; (8006ab4 <vPortFree+0xac>)
 8006a9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a9e:	6938      	ldr	r0, [r7, #16]
 8006aa0:	f000 f86c 	bl	8006b7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006aa4:	f7fe ff5c 	bl	8005960 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006aa8:	bf00      	nop
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20001238 	.word	0x20001238
 8006ab4:	20001230 	.word	0x20001230

08006ab8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006abe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ac2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ac4:	4b27      	ldr	r3, [pc, #156]	; (8006b64 <prvHeapInit+0xac>)
 8006ac6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f003 0307 	and.w	r3, r3, #7
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00c      	beq.n	8006aec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3307      	adds	r3, #7
 8006ad6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0307 	bic.w	r3, r3, #7
 8006ade:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <prvHeapInit+0xac>)
 8006ae8:	4413      	add	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006af0:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <prvHeapInit+0xb0>)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006af6:	4b1c      	ldr	r3, [pc, #112]	; (8006b68 <prvHeapInit+0xb0>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	4413      	add	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b04:	2208      	movs	r2, #8
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	1a9b      	subs	r3, r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0307 	bic.w	r3, r3, #7
 8006b12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4a15      	ldr	r2, [pc, #84]	; (8006b6c <prvHeapInit+0xb4>)
 8006b18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b1a:	4b14      	ldr	r3, [pc, #80]	; (8006b6c <prvHeapInit+0xb4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b22:	4b12      	ldr	r3, [pc, #72]	; (8006b6c <prvHeapInit+0xb4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2200      	movs	r2, #0
 8006b28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	1ad2      	subs	r2, r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b38:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <prvHeapInit+0xb4>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	4a0a      	ldr	r2, [pc, #40]	; (8006b70 <prvHeapInit+0xb8>)
 8006b46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	4a09      	ldr	r2, [pc, #36]	; (8006b74 <prvHeapInit+0xbc>)
 8006b4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b50:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <prvHeapInit+0xc0>)
 8006b52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b56:	601a      	str	r2, [r3, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	20000624 	.word	0x20000624
 8006b68:	20001224 	.word	0x20001224
 8006b6c:	2000122c 	.word	0x2000122c
 8006b70:	20001234 	.word	0x20001234
 8006b74:	20001230 	.word	0x20001230
 8006b78:	20001238 	.word	0x20001238

08006b7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b84:	4b27      	ldr	r3, [pc, #156]	; (8006c24 <prvInsertBlockIntoFreeList+0xa8>)
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	e002      	b.n	8006b90 <prvInsertBlockIntoFreeList+0x14>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d8f7      	bhi.n	8006b8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d108      	bne.n	8006bbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	441a      	add	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	441a      	add	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d118      	bne.n	8006c04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <prvInsertBlockIntoFreeList+0xac>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d00d      	beq.n	8006bfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	441a      	add	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	e008      	b.n	8006c0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bfa:	4b0b      	ldr	r3, [pc, #44]	; (8006c28 <prvInsertBlockIntoFreeList+0xac>)
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	e003      	b.n	8006c0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d002      	beq.n	8006c1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr
 8006c24:	20001224 	.word	0x20001224
 8006c28:	2000122c 	.word	0x2000122c

08006c2c <MX_GPIO_Init>:
											  "*IDN?"};



static void MX_GPIO_Init(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c32:	f107 0308 	add.w	r3, r7, #8
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	605a      	str	r2, [r3, #4]
 8006c3c:	609a      	str	r2, [r3, #8]
 8006c3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c40:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <MX_GPIO_Init+0x74>)
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <MX_GPIO_Init+0x74>)
 8006c46:	f043 0320 	orr.w	r3, r3, #32
 8006c4a:	6193      	str	r3, [r2, #24]
 8006c4c:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <MX_GPIO_Init+0x74>)
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	f003 0320 	and.w	r3, r3, #32
 8006c54:	607b      	str	r3, [r7, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <MX_GPIO_Init+0x74>)
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	4a10      	ldr	r2, [pc, #64]	; (8006ca0 <MX_GPIO_Init+0x74>)
 8006c5e:	f043 0304 	orr.w	r3, r3, #4
 8006c62:	6193      	str	r3, [r2, #24]
 8006c64:	4b0e      	ldr	r3, [pc, #56]	; (8006ca0 <MX_GPIO_Init+0x74>)
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	603b      	str	r3, [r7, #0]
 8006c6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_MOTOR1_Pin|STEP_MOTOR1_DIR_Pin, GPIO_PIN_RESET);
 8006c70:	2200      	movs	r2, #0
 8006c72:	2103      	movs	r1, #3
 8006c74:	480b      	ldr	r0, [pc, #44]	; (8006ca4 <MX_GPIO_Init+0x78>)
 8006c76:	f7f9 fcd7 	bl	8000628 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEP_MOTOR1_Pin STEP_MOTOR1_DIR_Pin */
  GPIO_InitStruct.Pin = STEP_MOTOR1_Pin|STEP_MOTOR1_DIR_Pin;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c86:	2302      	movs	r3, #2
 8006c88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c8a:	f107 0308 	add.w	r3, r7, #8
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4804      	ldr	r0, [pc, #16]	; (8006ca4 <MX_GPIO_Init+0x78>)
 8006c92:	f7f9 fb6f 	bl	8000374 <HAL_GPIO_Init>

}
 8006c96:	bf00      	nop
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40021000 	.word	0x40021000
 8006ca4:	40010800 	.word	0x40010800

08006ca8 <enviarPassos>:
		{ STATE_ERR, Sm_ERR },
};

StateType SmState = STATE_DISCONNECTED;
void enviarPassos(uint32_t step)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b098      	sub	sp, #96	; 0x60
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
	char temp[33];
	uint8_t temp2[33];
	uint8_t buff_size = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	for (int i=0; i<33; i++)
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cba:	e00e      	b.n	8006cda <enviarPassos+0x32>
	{
			temp2[i]=0;
 8006cbc:	f107 020c 	add.w	r2, r7, #12
 8006cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cc2:	4413      	add	r3, r2
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	701a      	strb	r2, [r3, #0]
			temp[i]=0;
 8006cc8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006ccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cce:	4413      	add	r3, r2
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<33; i++)
 8006cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cdc:	2b20      	cmp	r3, #32
 8006cde:	dded      	ble.n	8006cbc <enviarPassos+0x14>
	}
	itoa(step,temp,10);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006ce6:	220a      	movs	r2, #10
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f001 fb4b 	bl	8008384 <itoa>
	for (int i=0; i<33; i++)
 8006cee:	2300      	movs	r3, #0
 8006cf0:	657b      	str	r3, [r7, #84]	; 0x54
 8006cf2:	e019      	b.n	8006d28 <enviarPassos+0x80>
	{
		    if(temp[i]!=0)
 8006cf4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cfa:	4413      	add	r3, r2
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d004      	beq.n	8006d0c <enviarPassos+0x64>
		    {
		    	buff_size++;
 8006d02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d06:	3301      	adds	r3, #1
 8006d08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		    }
			temp2[i]=temp[i];
 8006d0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d12:	4413      	add	r3, r2
 8006d14:	7819      	ldrb	r1, [r3, #0]
 8006d16:	f107 020c 	add.w	r2, r7, #12
 8006d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1c:	4413      	add	r3, r2
 8006d1e:	460a      	mov	r2, r1
 8006d20:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<33; i++)
 8006d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d24:	3301      	adds	r3, #1
 8006d26:	657b      	str	r3, [r7, #84]	; 0x54
 8006d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	dde2      	ble.n	8006cf4 <enviarPassos+0x4c>
	}
	CDC_Transmit_FS(temp2,buff_size);
 8006d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	f107 030c 	add.w	r3, r7, #12
 8006d38:	4611      	mov	r1, r2
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 feea 	bl	8007b14 <CDC_Transmit_FS>
}
 8006d40:	bf00      	nop
 8006d42:	3760      	adds	r7, #96	; 0x60
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <setStepX>:

void  setStepX(uint8_t* comandoCompleto)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b090      	sub	sp, #64	; 0x40
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	char temp[33];
	uint8_t errstep[9] = {"ERRSTEP",};
 8006d50:	4a2e      	ldr	r2, [pc, #184]	; (8006e0c <setStepX+0xc4>)
 8006d52:	f107 0308 	add.w	r3, r7, #8
 8006d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d5a:	e883 0003 	stmia.w	r3, {r0, r1}
 8006d5e:	2300      	movs	r3, #0
 8006d60:	743b      	strb	r3, [r7, #16]
	osDelay(1);
 8006d62:	2001      	movs	r0, #1
 8006d64:	f7fd ff3b 	bl	8004bde <osDelay>
	for (int i=0; i<8; i++)
 8006d68:	2300      	movs	r3, #0
 8006d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d6c:	e008      	b.n	8006d80 <setStepX+0x38>
	{
			temp[i]=0;
 8006d6e:	f107 0214 	add.w	r2, r7, #20
 8006d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d74:	4413      	add	r3, r2
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 8006d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d82:	2b07      	cmp	r3, #7
 8006d84:	ddf3      	ble.n	8006d6e <setStepX+0x26>
	}
	for (int i=7; i<16; i++)
 8006d86:	2307      	movs	r3, #7
 8006d88:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d8a:	e02f      	b.n	8006dec <setStepX+0xa4>
	{
			if(comandoCompleto[i]==')')
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	4413      	add	r3, r2
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b29      	cmp	r3, #41	; 0x29
 8006d96:	d108      	bne.n	8006daa <setStepX+0x62>
			{
				temp[i-7] = '\0';
 8006d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9a:	3b07      	subs	r3, #7
 8006d9c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006da0:	4413      	add	r3, r2
 8006da2:	2200      	movs	r2, #0
 8006da4:	f803 2c2c 	strb.w	r2, [r3, #-44]
				break;
 8006da8:	e023      	b.n	8006df2 <setStepX+0xaa>
			}
			if(48 > comandoCompleto[i] || 57< comandoCompleto[i])
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	4413      	add	r3, r2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2b2f      	cmp	r3, #47	; 0x2f
 8006db4:	d905      	bls.n	8006dc2 <setStepX+0x7a>
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	4413      	add	r3, r2
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b39      	cmp	r3, #57	; 0x39
 8006dc0:	d906      	bls.n	8006dd0 <setStepX+0x88>
			{
				CDC_Transmit_FS(errstep, 8);
 8006dc2:	f107 0308 	add.w	r3, r7, #8
 8006dc6:	2108      	movs	r1, #8
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fea3 	bl	8007b14 <CDC_Transmit_FS>
				return;
 8006dce:	e019      	b.n	8006e04 <setStepX+0xbc>
			}

			temp[i-7]=comandoCompleto[i];
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	441a      	add	r2, r3
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	3b07      	subs	r3, #7
 8006dda:	7812      	ldrb	r2, [r2, #0]
 8006ddc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006de0:	440b      	add	r3, r1
 8006de2:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (int i=7; i<16; i++)
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	3301      	adds	r3, #1
 8006dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	2b0f      	cmp	r3, #15
 8006df0:	ddcc      	ble.n	8006d8c <setStepX+0x44>
	}
	step_atualX =  atoi(temp);
 8006df2:	f107 0314 	add.w	r3, r7, #20
 8006df6:	4618      	mov	r0, r3
 8006df8:	f001 fa83 	bl	8008302 <atoi>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	461a      	mov	r2, r3
 8006e00:	4b03      	ldr	r3, [pc, #12]	; (8006e10 <setStepX+0xc8>)
 8006e02:	601a      	str	r2, [r3, #0]
}
 8006e04:	3740      	adds	r7, #64	; 0x40
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	080085e4 	.word	0x080085e4
 8006e10:	2000011c 	.word	0x2000011c

08006e14 <setStepY>:
void  setStepY(uint8_t* comandoCompleto)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b090      	sub	sp, #64	; 0x40
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
	char temp[33];
	uint8_t errstep[9] = {"ERRSTEP",};
 8006e1c:	4a2e      	ldr	r2, [pc, #184]	; (8006ed8 <setStepY+0xc4>)
 8006e1e:	f107 0308 	add.w	r3, r7, #8
 8006e22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e26:	e883 0003 	stmia.w	r3, {r0, r1}
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	743b      	strb	r3, [r7, #16]
	osDelay(1);
 8006e2e:	2001      	movs	r0, #1
 8006e30:	f7fd fed5 	bl	8004bde <osDelay>
	for (int i=0; i<8; i++)
 8006e34:	2300      	movs	r3, #0
 8006e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e38:	e008      	b.n	8006e4c <setStepY+0x38>
	{
			temp[i]=0;
 8006e3a:	f107 0214 	add.w	r2, r7, #20
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e40:	4413      	add	r3, r2
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 8006e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e48:	3301      	adds	r3, #1
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4e:	2b07      	cmp	r3, #7
 8006e50:	ddf3      	ble.n	8006e3a <setStepY+0x26>
	}
	for (int i=7; i<16; i++)
 8006e52:	2307      	movs	r3, #7
 8006e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e56:	e02f      	b.n	8006eb8 <setStepY+0xa4>
	{
			if(comandoCompleto[i]==')')
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b29      	cmp	r3, #41	; 0x29
 8006e62:	d108      	bne.n	8006e76 <setStepY+0x62>
			{
				temp[i-7] = '\0';
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	3b07      	subs	r3, #7
 8006e68:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006e6c:	4413      	add	r3, r2
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f803 2c2c 	strb.w	r2, [r3, #-44]
				break;
 8006e74:	e023      	b.n	8006ebe <setStepY+0xaa>
			}
			if(48 > comandoCompleto[i] || 57< comandoCompleto[i])
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b2f      	cmp	r3, #47	; 0x2f
 8006e80:	d905      	bls.n	8006e8e <setStepY+0x7a>
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	4413      	add	r3, r2
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b39      	cmp	r3, #57	; 0x39
 8006e8c:	d906      	bls.n	8006e9c <setStepY+0x88>
			{
				CDC_Transmit_FS(errstep, 8);
 8006e8e:	f107 0308 	add.w	r3, r7, #8
 8006e92:	2108      	movs	r1, #8
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fe3d 	bl	8007b14 <CDC_Transmit_FS>
				return;
 8006e9a:	e019      	b.n	8006ed0 <setStepY+0xbc>
			}

			temp[i-7]=comandoCompleto[i];
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	441a      	add	r2, r3
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	3b07      	subs	r3, #7
 8006ea6:	7812      	ldrb	r2, [r2, #0]
 8006ea8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006eac:	440b      	add	r3, r1
 8006eae:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (int i=7; i<16; i++)
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	2b0f      	cmp	r3, #15
 8006ebc:	ddcc      	ble.n	8006e58 <setStepY+0x44>
	}
	step_atualY =  atoi(temp);
 8006ebe:	f107 0314 	add.w	r3, r7, #20
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 fa1d 	bl	8008302 <atoi>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	461a      	mov	r2, r3
 8006ecc:	4b03      	ldr	r3, [pc, #12]	; (8006edc <setStepY+0xc8>)
 8006ece:	601a      	str	r2, [r3, #0]
}
 8006ed0:	3740      	adds	r7, #64	; 0x40
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	080085e4 	.word	0x080085e4
 8006edc:	20000120 	.word	0x20000120

08006ee0 <interpretarSerial>:
uint8_t interpretarSerial(uint8_t  *entrada)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
	 if(memcmp(entrada,comandos.identificar,5)==0 )
 8006ee8:	2205      	movs	r2, #5
 8006eea:	4934      	ldr	r1, [pc, #208]	; (8006fbc <interpretarSerial+0xdc>)
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 fa4b 	bl	8008388 <memcmp>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <interpretarSerial+0x1c>
		 return CMD_ID;
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e05a      	b.n	8006fb2 <interpretarSerial+0xd2>
	  if(memcmp(entrada,comandos.conectar,5)==0 )
 8006efc:	2205      	movs	r2, #5
 8006efe:	4930      	ldr	r1, [pc, #192]	; (8006fc0 <interpretarSerial+0xe0>)
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 fa41 	bl	8008388 <memcmp>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <interpretarSerial+0x30>
		 return CMD_CO;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e050      	b.n	8006fb2 <interpretarSerial+0xd2>
	  if(memcmp(entrada,comandos.desconectar,5)==0 )
 8006f10:	2205      	movs	r2, #5
 8006f12:	492c      	ldr	r1, [pc, #176]	; (8006fc4 <interpretarSerial+0xe4>)
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 fa37 	bl	8008388 <memcmp>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <interpretarSerial+0x44>
		 return CMD_DC;
 8006f20:	2300      	movs	r3, #0
 8006f22:	e046      	b.n	8006fb2 <interpretarSerial+0xd2>
	  if(memcmp(entrada,comandos.moverX,5)==0 )
 8006f24:	2205      	movs	r2, #5
 8006f26:	4928      	ldr	r1, [pc, #160]	; (8006fc8 <interpretarSerial+0xe8>)
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 fa2d 	bl	8008388 <memcmp>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <interpretarSerial+0x58>
		 return CMD_MOVX;
 8006f34:	2304      	movs	r3, #4
 8006f36:	e03c      	b.n	8006fb2 <interpretarSerial+0xd2>
	  if(memcmp(entrada,comandos.moverY,5)==0 )
 8006f38:	2205      	movs	r2, #5
 8006f3a:	4924      	ldr	r1, [pc, #144]	; (8006fcc <interpretarSerial+0xec>)
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f001 fa23 	bl	8008388 <memcmp>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <interpretarSerial+0x6c>
		 return CMD_MOVY;
 8006f48:	2305      	movs	r3, #5
 8006f4a:	e032      	b.n	8006fb2 <interpretarSerial+0xd2>
	  if(memcmp(entrada,comandos.status,5)==0 )
 8006f4c:	2205      	movs	r2, #5
 8006f4e:	4920      	ldr	r1, [pc, #128]	; (8006fd0 <interpretarSerial+0xf0>)
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 fa19 	bl	8008388 <memcmp>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <interpretarSerial+0x80>
		 return CMD_STAT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e028      	b.n	8006fb2 <interpretarSerial+0xd2>
	  if(memcmp(entrada,comandos.stepX,5)==0 )
 8006f60:	2205      	movs	r2, #5
 8006f62:	491c      	ldr	r1, [pc, #112]	; (8006fd4 <interpretarSerial+0xf4>)
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 fa0f 	bl	8008388 <memcmp>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <interpretarSerial+0x94>
	  	return CMD_STEPQX;
 8006f70:	2307      	movs	r3, #7
 8006f72:	e01e      	b.n	8006fb2 <interpretarSerial+0xd2>
	  if(memcmp(entrada,comandos.set_stepX,6)==0 )
 8006f74:	2206      	movs	r2, #6
 8006f76:	4918      	ldr	r1, [pc, #96]	; (8006fd8 <interpretarSerial+0xf8>)
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 fa05 	bl	8008388 <memcmp>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <interpretarSerial+0xa8>
	  	 return CMD_SSTEPX;
 8006f84:	2306      	movs	r3, #6
 8006f86:	e014      	b.n	8006fb2 <interpretarSerial+0xd2>
	  if(memcmp(entrada,comandos.set_stepY,6)==0 )
 8006f88:	2206      	movs	r2, #6
 8006f8a:	4914      	ldr	r1, [pc, #80]	; (8006fdc <interpretarSerial+0xfc>)
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 f9fb 	bl	8008388 <memcmp>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <interpretarSerial+0xbc>
	  	 return CMD_SSTEPY;
 8006f98:	2308      	movs	r3, #8
 8006f9a:	e00a      	b.n	8006fb2 <interpretarSerial+0xd2>
	  if(memcmp(entrada,comandos.stepY,5)==0 )
 8006f9c:	2205      	movs	r2, #5
 8006f9e:	4910      	ldr	r1, [pc, #64]	; (8006fe0 <interpretarSerial+0x100>)
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 f9f1 	bl	8008388 <memcmp>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <interpretarSerial+0xd0>
	  	 return CMD_STEPQY;
 8006fac:	2309      	movs	r3, #9
 8006fae:	e000      	b.n	8006fb2 <interpretarSerial+0xd2>
	  return -1;
 8006fb0:	23ff      	movs	r3, #255	; 0xff
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	080086ec 	.word	0x080086ec
 8006fc0:	080086a8 	.word	0x080086a8
 8006fc4:	080086b0 	.word	0x080086b0
 8006fc8:	080086b8 	.word	0x080086b8
 8006fcc:	080086be 	.word	0x080086be
 8006fd0:	080086c4 	.word	0x080086c4
 8006fd4:	080086d4 	.word	0x080086d4
 8006fd8:	080086cc 	.word	0x080086cc
 8006fdc:	080086dc 	.word	0x080086dc
 8006fe0:	080086e4 	.word	0x080086e4

08006fe4 <Sm_DISCONNECTED>:

void Sm_DISCONNECTED(void)
{
 8006fe4:	b590      	push	{r4, r7, lr}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0

	 uint8_t temp[16]="ue";
 8006fea:	f246 5375 	movw	r3, #25973	; 0x6575
 8006fee:	607b      	str	r3, [r7, #4]
 8006ff0:	f107 0308 	add.w	r3, r7, #8
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	605a      	str	r2, [r3, #4]
 8006ffa:	609a      	str	r2, [r3, #8]
	 uint8_t resposta = -1;
 8006ffc:	23ff      	movs	r3, #255	; 0xff
 8006ffe:	75fb      	strb	r3, [r7, #23]
	 if( xSemaphoreTake( semafaroUsb ,10000) == pdTRUE )
 8007000:	4b4d      	ldr	r3, [pc, #308]	; (8007138 <Sm_DISCONNECTED+0x154>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f242 7110 	movw	r1, #10000	; 0x2710
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe f8ef 	bl	80051ec <xQueueSemaphoreTake>
 800700e:	4603      	mov	r3, r0
 8007010:	2b01      	cmp	r3, #1
 8007012:	f040 808b 	bne.w	800712c <Sm_DISCONNECTED+0x148>
	 {
		 	 movimentos_em_x = 0;
 8007016:	4b49      	ldr	r3, [pc, #292]	; (800713c <Sm_DISCONNECTED+0x158>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
		 	 movimentos_em_y = 0;
 800701c:	4b48      	ldr	r3, [pc, #288]	; (8007140 <Sm_DISCONNECTED+0x15c>)
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]
	 		  resposta=-1;
 8007022:	23ff      	movs	r3, #255	; 0xff
 8007024:	75fb      	strb	r3, [r7, #23]
			  memcpy(temp,buffer_usb,16);
 8007026:	4b47      	ldr	r3, [pc, #284]	; (8007144 <Sm_DISCONNECTED+0x160>)
 8007028:	1d3c      	adds	r4, r7, #4
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	6859      	ldr	r1, [r3, #4]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			  osDelay(2);
 8007034:	2002      	movs	r0, #2
 8007036:	f7fd fdd2 	bl	8004bde <osDelay>
			  resposta = interpretarSerial(temp);
 800703a:	1d3b      	adds	r3, r7, #4
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff ff4f 	bl	8006ee0 <interpretarSerial>
 8007042:	4603      	mov	r3, r0
 8007044:	75fb      	strb	r3, [r7, #23]

			  switch(resposta)
 8007046:	7dfb      	ldrb	r3, [r7, #23]
 8007048:	2b09      	cmp	r3, #9
 800704a:	d867      	bhi.n	800711c <Sm_DISCONNECTED+0x138>
 800704c:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <Sm_DISCONNECTED+0x70>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	0800709d 	.word	0x0800709d
 8007058:	0800708d 	.word	0x0800708d
 800705c:	0800707d 	.word	0x0800707d
 8007060:	080070cd 	.word	0x080070cd
 8007064:	080070ad 	.word	0x080070ad
 8007068:	080070bd 	.word	0x080070bd
 800706c:	080070ed 	.word	0x080070ed
 8007070:	080070dd 	.word	0x080070dd
 8007074:	0800710d 	.word	0x0800710d
 8007078:	080070fd 	.word	0x080070fd
			  {
			  		case CMD_ID:
			  					CDC_Transmit_FS(respostas_disconnected.identificar ,6);
 800707c:	2106      	movs	r1, #6
 800707e:	4832      	ldr	r0, [pc, #200]	; (8007148 <Sm_DISCONNECTED+0x164>)
 8007080:	f000 fd48 	bl	8007b14 <CDC_Transmit_FS>
			  					SmState = STATE_DISCONNECTED;
 8007084:	4b31      	ldr	r3, [pc, #196]	; (800714c <Sm_DISCONNECTED+0x168>)
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
			  					break;
 800708a:	e050      	b.n	800712e <Sm_DISCONNECTED+0x14a>
			  		case CMD_CO:
			  					CDC_Transmit_FS(respostas_disconnected.conectar ,7);
 800708c:	2107      	movs	r1, #7
 800708e:	4830      	ldr	r0, [pc, #192]	; (8007150 <Sm_DISCONNECTED+0x16c>)
 8007090:	f000 fd40 	bl	8007b14 <CDC_Transmit_FS>
			  					SmState = STATE_STANDBY;
 8007094:	4b2d      	ldr	r3, [pc, #180]	; (800714c <Sm_DISCONNECTED+0x168>)
 8007096:	2201      	movs	r2, #1
 8007098:	701a      	strb	r2, [r3, #0]
			  					break;
 800709a:	e048      	b.n	800712e <Sm_DISCONNECTED+0x14a>
			  		case CMD_DC:
			  					CDC_Transmit_FS(respostas_disconnected.desconectar ,4);
 800709c:	2104      	movs	r1, #4
 800709e:	482d      	ldr	r0, [pc, #180]	; (8007154 <Sm_DISCONNECTED+0x170>)
 80070a0:	f000 fd38 	bl	8007b14 <CDC_Transmit_FS>
								SmState = STATE_DISCONNECTED;
 80070a4:	4b29      	ldr	r3, [pc, #164]	; (800714c <Sm_DISCONNECTED+0x168>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]
								break;
 80070aa:	e040      	b.n	800712e <Sm_DISCONNECTED+0x14a>
			 		case CMD_MOVX:
								CDC_Transmit_FS(respostas_disconnected.moverX ,4);
 80070ac:	2104      	movs	r1, #4
 80070ae:	482a      	ldr	r0, [pc, #168]	; (8007158 <Sm_DISCONNECTED+0x174>)
 80070b0:	f000 fd30 	bl	8007b14 <CDC_Transmit_FS>
								SmState = STATE_DISCONNECTED;
 80070b4:	4b25      	ldr	r3, [pc, #148]	; (800714c <Sm_DISCONNECTED+0x168>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	701a      	strb	r2, [r3, #0]
								break;
 80070ba:	e038      	b.n	800712e <Sm_DISCONNECTED+0x14a>
			 		case CMD_MOVY:
								CDC_Transmit_FS(respostas_disconnected.moverY ,4);
 80070bc:	2104      	movs	r1, #4
 80070be:	4827      	ldr	r0, [pc, #156]	; (800715c <Sm_DISCONNECTED+0x178>)
 80070c0:	f000 fd28 	bl	8007b14 <CDC_Transmit_FS>
								SmState = STATE_DISCONNECTED;
 80070c4:	4b21      	ldr	r3, [pc, #132]	; (800714c <Sm_DISCONNECTED+0x168>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
								break;
 80070ca:	e030      	b.n	800712e <Sm_DISCONNECTED+0x14a>
			 		case CMD_STAT:
								CDC_Transmit_FS(respostas_disconnected.status ,4);
 80070cc:	2104      	movs	r1, #4
 80070ce:	4824      	ldr	r0, [pc, #144]	; (8007160 <Sm_DISCONNECTED+0x17c>)
 80070d0:	f000 fd20 	bl	8007b14 <CDC_Transmit_FS>
								SmState = STATE_DISCONNECTED;
 80070d4:	4b1d      	ldr	r3, [pc, #116]	; (800714c <Sm_DISCONNECTED+0x168>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	701a      	strb	r2, [r3, #0]
								break;
 80070da:	e028      	b.n	800712e <Sm_DISCONNECTED+0x14a>
			 		case CMD_STEPQX:
								CDC_Transmit_FS(respostas_disconnected.stepX ,5);
 80070dc:	2105      	movs	r1, #5
 80070de:	4821      	ldr	r0, [pc, #132]	; (8007164 <Sm_DISCONNECTED+0x180>)
 80070e0:	f000 fd18 	bl	8007b14 <CDC_Transmit_FS>
								SmState = STATE_DISCONNECTED;
 80070e4:	4b19      	ldr	r3, [pc, #100]	; (800714c <Sm_DISCONNECTED+0x168>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]
								break;
 80070ea:	e020      	b.n	800712e <Sm_DISCONNECTED+0x14a>
			 		case CMD_SSTEPX:
								CDC_Transmit_FS(respostas_disconnected.set_stepX ,5);
 80070ec:	2105      	movs	r1, #5
 80070ee:	481e      	ldr	r0, [pc, #120]	; (8007168 <Sm_DISCONNECTED+0x184>)
 80070f0:	f000 fd10 	bl	8007b14 <CDC_Transmit_FS>
								SmState = STATE_DISCONNECTED;
 80070f4:	4b15      	ldr	r3, [pc, #84]	; (800714c <Sm_DISCONNECTED+0x168>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	701a      	strb	r2, [r3, #0]
								break;
 80070fa:	e018      	b.n	800712e <Sm_DISCONNECTED+0x14a>
			 		case CMD_STEPQY:
								CDC_Transmit_FS(respostas_disconnected.stepY ,5);
 80070fc:	2105      	movs	r1, #5
 80070fe:	481b      	ldr	r0, [pc, #108]	; (800716c <Sm_DISCONNECTED+0x188>)
 8007100:	f000 fd08 	bl	8007b14 <CDC_Transmit_FS>
								SmState = STATE_DISCONNECTED;
 8007104:	4b11      	ldr	r3, [pc, #68]	; (800714c <Sm_DISCONNECTED+0x168>)
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]
								break;
 800710a:	e010      	b.n	800712e <Sm_DISCONNECTED+0x14a>
			 		case CMD_SSTEPY:
								CDC_Transmit_FS(respostas_disconnected.set_stepY ,5);
 800710c:	2105      	movs	r1, #5
 800710e:	4818      	ldr	r0, [pc, #96]	; (8007170 <Sm_DISCONNECTED+0x18c>)
 8007110:	f000 fd00 	bl	8007b14 <CDC_Transmit_FS>
								SmState = STATE_DISCONNECTED;
 8007114:	4b0d      	ldr	r3, [pc, #52]	; (800714c <Sm_DISCONNECTED+0x168>)
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
								break;
 800711a:	e008      	b.n	800712e <Sm_DISCONNECTED+0x14a>
			  		default:
			  					CDC_Transmit_FS(respostas_disconnected.wtf,4);
 800711c:	2104      	movs	r1, #4
 800711e:	4815      	ldr	r0, [pc, #84]	; (8007174 <Sm_DISCONNECTED+0x190>)
 8007120:	f000 fcf8 	bl	8007b14 <CDC_Transmit_FS>
			  					SmState = STATE_DISCONNECTED;
 8007124:	4b09      	ldr	r3, [pc, #36]	; (800714c <Sm_DISCONNECTED+0x168>)
 8007126:	2200      	movs	r2, #0
 8007128:	701a      	strb	r2, [r3, #0]
			}
	}
}
 800712a:	e000      	b.n	800712e <Sm_DISCONNECTED+0x14a>
	}
 800712c:	bf00      	nop
}
 800712e:	bf00      	nop
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	bd90      	pop	{r4, r7, pc}
 8007136:	bf00      	nop
 8007138:	20001470 	.word	0x20001470
 800713c:	2000123c 	.word	0x2000123c
 8007140:	20001240 	.word	0x20001240
 8007144:	20001474 	.word	0x20001474
 8007148:	20000148 	.word	0x20000148
 800714c:	20001244 	.word	0x20001244
 8007150:	20000124 	.word	0x20000124
 8007154:	2000012c 	.word	0x2000012c
 8007158:	20000134 	.word	0x20000134
 800715c:	2000013a 	.word	0x2000013a
 8007160:	20000140 	.word	0x20000140
 8007164:	20000158 	.word	0x20000158
 8007168:	20000150 	.word	0x20000150
 800716c:	20000168 	.word	0x20000168
 8007170:	20000160 	.word	0x20000160
 8007174:	20000170 	.word	0x20000170

08007178 <Sm_STANDBY>:
void Sm_STANDBY(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
	 uint8_t temp[16]="ue";
 800717e:	f246 5375 	movw	r3, #25973	; 0x6575
 8007182:	607b      	str	r3, [r7, #4]
 8007184:	f107 0308 	add.w	r3, r7, #8
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	605a      	str	r2, [r3, #4]
 800718e:	609a      	str	r2, [r3, #8]
	 uint8_t resposta = -1;
 8007190:	23ff      	movs	r3, #255	; 0xff
 8007192:	75fb      	strb	r3, [r7, #23]
	 if( xSemaphoreTake( semafaroUsb ,10000) == pdTRUE )
 8007194:	4b58      	ldr	r3, [pc, #352]	; (80072f8 <Sm_STANDBY+0x180>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f242 7110 	movw	r1, #10000	; 0x2710
 800719c:	4618      	mov	r0, r3
 800719e:	f7fe f825 	bl	80051ec <xQueueSemaphoreTake>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	f040 80a2 	bne.w	80072ee <Sm_STANDBY+0x176>
	 {
		      movimentos_em_x = 0;
 80071aa:	4b54      	ldr	r3, [pc, #336]	; (80072fc <Sm_STANDBY+0x184>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
		 	  movimentos_em_y = 0;
 80071b0:	4b53      	ldr	r3, [pc, #332]	; (8007300 <Sm_STANDBY+0x188>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
	 		  resposta=-1;
 80071b6:	23ff      	movs	r3, #255	; 0xff
 80071b8:	75fb      	strb	r3, [r7, #23]
			  memcpy(temp,buffer_usb,15);
 80071ba:	1d3b      	adds	r3, r7, #4
 80071bc:	220f      	movs	r2, #15
 80071be:	4951      	ldr	r1, [pc, #324]	; (8007304 <Sm_STANDBY+0x18c>)
 80071c0:	4618      	mov	r0, r3
 80071c2:	f001 f8f0 	bl	80083a6 <memcpy>

			  osDelay(2);
 80071c6:	2002      	movs	r0, #2
 80071c8:	f7fd fd09 	bl	8004bde <osDelay>
			  resposta = interpretarSerial(temp);
 80071cc:	1d3b      	adds	r3, r7, #4
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff fe86 	bl	8006ee0 <interpretarSerial>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75fb      	strb	r3, [r7, #23]

		     switch(resposta)
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	2b09      	cmp	r3, #9
 80071dc:	d87f      	bhi.n	80072de <Sm_STANDBY+0x166>
 80071de:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <Sm_STANDBY+0x6c>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	0800722d 	.word	0x0800722d
 80071e8:	0800721d 	.word	0x0800721d
 80071ec:	0800720d 	.word	0x0800720d
 80071f0:	08007265 	.word	0x08007265
 80071f4:	0800723d 	.word	0x0800723d
 80071f8:	0800724d 	.word	0x0800724d
 80071fc:	0800728d 	.word	0x0800728d
 8007200:	08007275 	.word	0x08007275
 8007204:	080072bf 	.word	0x080072bf
 8007208:	080072ad 	.word	0x080072ad
		   			  {
		   			  		case CMD_ID:
		   			  					CDC_Transmit_FS(respostas_standby.identificar ,6);
 800720c:	2106      	movs	r1, #6
 800720e:	483e      	ldr	r0, [pc, #248]	; (8007308 <Sm_STANDBY+0x190>)
 8007210:	f000 fc80 	bl	8007b14 <CDC_Transmit_FS>
		   			  					SmState = STATE_STANDBY;
 8007214:	4b3d      	ldr	r3, [pc, #244]	; (800730c <Sm_STANDBY+0x194>)
 8007216:	2201      	movs	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]
		   			  					break;
 800721a:	e069      	b.n	80072f0 <Sm_STANDBY+0x178>
		   			  		case CMD_CO:
		   			  					CDC_Transmit_FS(respostas_standby.conectar ,7);
 800721c:	2107      	movs	r1, #7
 800721e:	483c      	ldr	r0, [pc, #240]	; (8007310 <Sm_STANDBY+0x198>)
 8007220:	f000 fc78 	bl	8007b14 <CDC_Transmit_FS>
		   			  					SmState = STATE_STANDBY;
 8007224:	4b39      	ldr	r3, [pc, #228]	; (800730c <Sm_STANDBY+0x194>)
 8007226:	2201      	movs	r2, #1
 8007228:	701a      	strb	r2, [r3, #0]
		   			  					break;
 800722a:	e061      	b.n	80072f0 <Sm_STANDBY+0x178>
		   			  		case CMD_DC:
		   			  					CDC_Transmit_FS(respostas_standby.desconectar ,7);
 800722c:	2107      	movs	r1, #7
 800722e:	4839      	ldr	r0, [pc, #228]	; (8007314 <Sm_STANDBY+0x19c>)
 8007230:	f000 fc70 	bl	8007b14 <CDC_Transmit_FS>
		   								SmState = STATE_DISCONNECTED;
 8007234:	4b35      	ldr	r3, [pc, #212]	; (800730c <Sm_STANDBY+0x194>)
 8007236:	2200      	movs	r2, #0
 8007238:	701a      	strb	r2, [r3, #0]
		   								break;
 800723a:	e059      	b.n	80072f0 <Sm_STANDBY+0x178>
		   			 		case CMD_MOVX:
		   								CDC_Transmit_FS(respostas_standby.moverX ,4);
 800723c:	2104      	movs	r1, #4
 800723e:	4836      	ldr	r0, [pc, #216]	; (8007318 <Sm_STANDBY+0x1a0>)
 8007240:	f000 fc68 	bl	8007b14 <CDC_Transmit_FS>
		   								SmState = STATE_MOVINGX;
 8007244:	4b31      	ldr	r3, [pc, #196]	; (800730c <Sm_STANDBY+0x194>)
 8007246:	2202      	movs	r2, #2
 8007248:	701a      	strb	r2, [r3, #0]
		   								break;
 800724a:	e051      	b.n	80072f0 <Sm_STANDBY+0x178>
		   			 		case CMD_MOVY:
		   								CDC_Transmit_FS(respostas_standby.moverY ,4);
 800724c:	2104      	movs	r1, #4
 800724e:	4833      	ldr	r0, [pc, #204]	; (800731c <Sm_STANDBY+0x1a4>)
 8007250:	f000 fc60 	bl	8007b14 <CDC_Transmit_FS>
		   								movimentos_em_y = 1 * step_atualY;
 8007254:	4b32      	ldr	r3, [pc, #200]	; (8007320 <Sm_STANDBY+0x1a8>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a29      	ldr	r2, [pc, #164]	; (8007300 <Sm_STANDBY+0x188>)
 800725a:	6013      	str	r3, [r2, #0]
		   								SmState = STATE_MOVINGY;
 800725c:	4b2b      	ldr	r3, [pc, #172]	; (800730c <Sm_STANDBY+0x194>)
 800725e:	2203      	movs	r2, #3
 8007260:	701a      	strb	r2, [r3, #0]
		   								break;
 8007262:	e045      	b.n	80072f0 <Sm_STANDBY+0x178>
		   			 		case CMD_STAT:
		   								CDC_Transmit_FS(respostas_standby.status ,4);
 8007264:	2104      	movs	r1, #4
 8007266:	482f      	ldr	r0, [pc, #188]	; (8007324 <Sm_STANDBY+0x1ac>)
 8007268:	f000 fc54 	bl	8007b14 <CDC_Transmit_FS>
		   								SmState = STATE_STANDBY;
 800726c:	4b27      	ldr	r3, [pc, #156]	; (800730c <Sm_STANDBY+0x194>)
 800726e:	2201      	movs	r2, #1
 8007270:	701a      	strb	r2, [r3, #0]
		   								break;
 8007272:	e03d      	b.n	80072f0 <Sm_STANDBY+0x178>
					 		case CMD_STEPQX:
										//CDC_Transmit_FS(respostas_standby.stepX ,5);
										osDelay(2);
 8007274:	2002      	movs	r0, #2
 8007276:	f7fd fcb2 	bl	8004bde <osDelay>
										enviarPassos(step_atualX);
 800727a:	4b2b      	ldr	r3, [pc, #172]	; (8007328 <Sm_STANDBY+0x1b0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4618      	mov	r0, r3
 8007280:	f7ff fd12 	bl	8006ca8 <enviarPassos>
										SmState = STATE_STANDBY;
 8007284:	4b21      	ldr	r3, [pc, #132]	; (800730c <Sm_STANDBY+0x194>)
 8007286:	2201      	movs	r2, #1
 8007288:	701a      	strb	r2, [r3, #0]
										break;
 800728a:	e031      	b.n	80072f0 <Sm_STANDBY+0x178>
					 		case CMD_SSTEPX:
										//CDC_Transmit_FS(respostas_standby.set_stepX ,5);
										setStepX(temp);
 800728c:	1d3b      	adds	r3, r7, #4
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff fd5a 	bl	8006d48 <setStepX>
										osDelay(2);
 8007294:	2002      	movs	r0, #2
 8007296:	f7fd fca2 	bl	8004bde <osDelay>
										enviarPassos(step_atualX);
 800729a:	4b23      	ldr	r3, [pc, #140]	; (8007328 <Sm_STANDBY+0x1b0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff fd02 	bl	8006ca8 <enviarPassos>
										SmState = STATE_STANDBY;
 80072a4:	4b19      	ldr	r3, [pc, #100]	; (800730c <Sm_STANDBY+0x194>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	701a      	strb	r2, [r3, #0]
										break;
 80072aa:	e021      	b.n	80072f0 <Sm_STANDBY+0x178>
					 		case CMD_STEPQY:
										//CDC_Transmit_FS(respostas_standby.stepY ,5);
										osDelay(2);
 80072ac:	2002      	movs	r0, #2
 80072ae:	f7fd fc96 	bl	8004bde <osDelay>
										enviarPassos(step_atualY);
 80072b2:	4b1b      	ldr	r3, [pc, #108]	; (8007320 <Sm_STANDBY+0x1a8>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7ff fcf6 	bl	8006ca8 <enviarPassos>
										break;
 80072bc:	e018      	b.n	80072f0 <Sm_STANDBY+0x178>
					 		case CMD_SSTEPY:
										//CDC_Transmit_FS(respostas_standby.set_stepY,5);
										setStepY(temp);
 80072be:	1d3b      	adds	r3, r7, #4
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7ff fda7 	bl	8006e14 <setStepY>
										osDelay(2);
 80072c6:	2002      	movs	r0, #2
 80072c8:	f7fd fc89 	bl	8004bde <osDelay>
										enviarPassos(step_atualY);
 80072cc:	4b14      	ldr	r3, [pc, #80]	; (8007320 <Sm_STANDBY+0x1a8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7ff fce9 	bl	8006ca8 <enviarPassos>
										SmState = STATE_STANDBY;
 80072d6:	4b0d      	ldr	r3, [pc, #52]	; (800730c <Sm_STANDBY+0x194>)
 80072d8:	2201      	movs	r2, #1
 80072da:	701a      	strb	r2, [r3, #0]
										break;
 80072dc:	e008      	b.n	80072f0 <Sm_STANDBY+0x178>
		   			  		default:
		   			  					CDC_Transmit_FS(respostas_standby.wtf,4);
 80072de:	2104      	movs	r1, #4
 80072e0:	4812      	ldr	r0, [pc, #72]	; (800732c <Sm_STANDBY+0x1b4>)
 80072e2:	f000 fc17 	bl	8007b14 <CDC_Transmit_FS>
		   			  					SmState = STATE_STANDBY;
 80072e6:	4b09      	ldr	r3, [pc, #36]	; (800730c <Sm_STANDBY+0x194>)
 80072e8:	2201      	movs	r2, #1
 80072ea:	701a      	strb	r2, [r3, #0]
		   			}
	}
}
 80072ec:	e000      	b.n	80072f0 <Sm_STANDBY+0x178>
	}
 80072ee:	bf00      	nop
}
 80072f0:	bf00      	nop
 80072f2:	3718      	adds	r7, #24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	20001470 	.word	0x20001470
 80072fc:	2000123c 	.word	0x2000123c
 8007300:	20001240 	.word	0x20001240
 8007304:	20001474 	.word	0x20001474
 8007308:	2000019c 	.word	0x2000019c
 800730c:	20001244 	.word	0x20001244
 8007310:	20000178 	.word	0x20000178
 8007314:	20000180 	.word	0x20000180
 8007318:	20000188 	.word	0x20000188
 800731c:	2000018e 	.word	0x2000018e
 8007320:	20000120 	.word	0x20000120
 8007324:	20000194 	.word	0x20000194
 8007328:	2000011c 	.word	0x2000011c
 800732c:	200001c4 	.word	0x200001c4

08007330 <Sm_MOVINGX>:
void Sm_MOVINGX(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
	uint8_t fim[6] = "MVXOE";
 8007336:	4a1a      	ldr	r2, [pc, #104]	; (80073a0 <Sm_MOVINGX+0x70>)
 8007338:	463b      	mov	r3, r7
 800733a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800733e:	6018      	str	r0, [r3, #0]
 8007340:	3304      	adds	r3, #4
 8007342:	8019      	strh	r1, [r3, #0]
	movimentos_em_x = 5;
 8007344:	4b17      	ldr	r3, [pc, #92]	; (80073a4 <Sm_MOVINGX+0x74>)
 8007346:	2205      	movs	r2, #5
 8007348:	601a      	str	r2, [r3, #0]
	while(movimentos_em_x>0)
 800734a:	e01a      	b.n	8007382 <Sm_MOVINGX+0x52>
	{
		HAL_GPIO_WritePin(GPIOA, STEP_MOTOR1_Pin, GPIO_PIN_SET);
 800734c:	2201      	movs	r2, #1
 800734e:	2101      	movs	r1, #1
 8007350:	4815      	ldr	r0, [pc, #84]	; (80073a8 <Sm_MOVINGX+0x78>)
 8007352:	f7f9 f969 	bl	8000628 <HAL_GPIO_WritePin>
		osDelay(1000);
 8007356:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800735a:	f7fd fc40 	bl	8004bde <osDelay>
		HAL_GPIO_WritePin(GPIOA, STEP_MOTOR1_Pin, GPIO_PIN_RESET);
 800735e:	2200      	movs	r2, #0
 8007360:	2101      	movs	r1, #1
 8007362:	4811      	ldr	r0, [pc, #68]	; (80073a8 <Sm_MOVINGX+0x78>)
 8007364:	f7f9 f960 	bl	8000628 <HAL_GPIO_WritePin>
		if (SmState != STATE_MOVINGX)
 8007368:	4b10      	ldr	r3, [pc, #64]	; (80073ac <Sm_MOVINGX+0x7c>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2b02      	cmp	r3, #2
 800736e:	d005      	beq.n	800737c <Sm_MOVINGX+0x4c>
		{
			HAL_GPIO_WritePin(GPIOA, STEP_MOTOR1_Pin, GPIO_PIN_RESET);
 8007370:	2200      	movs	r2, #0
 8007372:	2101      	movs	r1, #1
 8007374:	480c      	ldr	r0, [pc, #48]	; (80073a8 <Sm_MOVINGX+0x78>)
 8007376:	f7f9 f957 	bl	8000628 <HAL_GPIO_WritePin>
 800737a:	e00e      	b.n	800739a <Sm_MOVINGX+0x6a>
			return;
		}
		//logica de fazer o bagulho
		osDelay(1);
 800737c:	2001      	movs	r0, #1
 800737e:	f7fd fc2e 	bl	8004bde <osDelay>
	while(movimentos_em_x>0)
 8007382:	4b08      	ldr	r3, [pc, #32]	; (80073a4 <Sm_MOVINGX+0x74>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e0      	bne.n	800734c <Sm_MOVINGX+0x1c>
	}
	CDC_Transmit_FS(fim,5);
 800738a:	463b      	mov	r3, r7
 800738c:	2105      	movs	r1, #5
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fbc0 	bl	8007b14 <CDC_Transmit_FS>
	SmState = STATE_STANDBY;
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <Sm_MOVINGX+0x7c>)
 8007396:	2201      	movs	r2, #1
 8007398:	701a      	strb	r2, [r3, #0]
}
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	080085f0 	.word	0x080085f0
 80073a4:	2000123c 	.word	0x2000123c
 80073a8:	40010800 	.word	0x40010800
 80073ac:	20001244 	.word	0x20001244

080073b0 <Sm_MOVINGY>:

void Sm_MOVINGY(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
	uint8_t fim[6] = "MVYOK";
 80073b6:	4a12      	ldr	r2, [pc, #72]	; (8007400 <Sm_MOVINGY+0x50>)
 80073b8:	463b      	mov	r3, r7
 80073ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073be:	6018      	str	r0, [r3, #0]
 80073c0:	3304      	adds	r3, #4
 80073c2:	8019      	strh	r1, [r3, #0]
	while(movimentos_em_y>0)
 80073c4:	e00b      	b.n	80073de <Sm_MOVINGY+0x2e>
	{
		movimentos_em_y--;
 80073c6:	4b0f      	ldr	r3, [pc, #60]	; (8007404 <Sm_MOVINGY+0x54>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	4a0d      	ldr	r2, [pc, #52]	; (8007404 <Sm_MOVINGY+0x54>)
 80073ce:	6013      	str	r3, [r2, #0]
		if (SmState != STATE_MOVINGY)
 80073d0:	4b0d      	ldr	r3, [pc, #52]	; (8007408 <Sm_MOVINGY+0x58>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d10f      	bne.n	80073f8 <Sm_MOVINGY+0x48>
			return;
		//logica de fazer o bagulho
		osDelay(1);
 80073d8:	2001      	movs	r0, #1
 80073da:	f7fd fc00 	bl	8004bde <osDelay>
	while(movimentos_em_y>0)
 80073de:	4b09      	ldr	r3, [pc, #36]	; (8007404 <Sm_MOVINGY+0x54>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1ef      	bne.n	80073c6 <Sm_MOVINGY+0x16>
	}
	CDC_Transmit_FS(fim,5);
 80073e6:	463b      	mov	r3, r7
 80073e8:	2105      	movs	r1, #5
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 fb92 	bl	8007b14 <CDC_Transmit_FS>
	SmState = STATE_STANDBY;
 80073f0:	4b05      	ldr	r3, [pc, #20]	; (8007408 <Sm_MOVINGY+0x58>)
 80073f2:	2201      	movs	r2, #1
 80073f4:	701a      	strb	r2, [r3, #0]
 80073f6:	e000      	b.n	80073fa <Sm_MOVINGY+0x4a>
			return;
 80073f8:	bf00      	nop
}
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	080085f8 	.word	0x080085f8
 8007404:	20001240 	.word	0x20001240
 8007408:	20001244 	.word	0x20001244

0800740c <Sm_ERR>:


void Sm_ERR(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
	uint8_t err[4] = "err";
 8007412:	4b07      	ldr	r3, [pc, #28]	; (8007430 <Sm_ERR+0x24>)
 8007414:	607b      	str	r3, [r7, #4]
	CDC_Transmit_FS(err,3);
 8007416:	1d3b      	adds	r3, r7, #4
 8007418:	2103      	movs	r1, #3
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fb7a 	bl	8007b14 <CDC_Transmit_FS>
	SmState = STATE_STANDBY;
 8007420:	4b04      	ldr	r3, [pc, #16]	; (8007434 <Sm_ERR+0x28>)
 8007422:	2201      	movs	r2, #1
 8007424:	701a      	strb	r2, [r3, #0]
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	00727265 	.word	0x00727265
 8007434:	20001244 	.word	0x20001244

08007438 <Rodar_Maquina>:

void Rodar_Maquina(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
	if(SmState < NUM_STATES)
 800743c:	4b06      	ldr	r3, [pc, #24]	; (8007458 <Rodar_Maquina+0x20>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b04      	cmp	r3, #4
 8007442:	d807      	bhi.n	8007454 <Rodar_Maquina+0x1c>
	{
		(*StateMachine[SmState].func)();
 8007444:	4b04      	ldr	r3, [pc, #16]	; (8007458 <Rodar_Maquina+0x20>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	4a04      	ldr	r2, [pc, #16]	; (800745c <Rodar_Maquina+0x24>)
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	4413      	add	r3, r2
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	4798      	blx	r3
 8007452:	e000      	b.n	8007456 <Rodar_Maquina+0x1e>
	}
	else
	{
		return;
 8007454:	bf00      	nop
	}
}
 8007456:	bd80      	pop	{r7, pc}
 8007458:	20001244 	.word	0x20001244
 800745c:	20000274 	.word	0x20000274

08007460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007460:	b5b0      	push	{r4, r5, r7, lr}
 8007462:	b090      	sub	sp, #64	; 0x40
 8007464:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007466:	f7f8 fe73 	bl	8000150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800746a:	f000 f843 	bl	80074f4 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */


  MX_GPIO_Init();
 800746e:	f7ff fbdd 	bl	8006c2c <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8007472:	4b1a      	ldr	r3, [pc, #104]	; (80074dc <main+0x7c>)
 8007474:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8007478:	461d      	mov	r5, r3
 800747a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800747c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800747e:	682b      	ldr	r3, [r5, #0]
 8007480:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8007482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007486:	2100      	movs	r1, #0
 8007488:	4618      	mov	r0, r3
 800748a:	f7fd fb81 	bl	8004b90 <osThreadCreate>
 800748e:	4602      	mov	r2, r0
 8007490:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <main+0x80>)
 8007492:	601a      	str	r2, [r3, #0]

  osThreadDef(maquinaTask,maquina, osPriorityNormal, 0, 128);
 8007494:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <main+0x84>)
 8007496:	f107 0418 	add.w	r4, r7, #24
 800749a:	461d      	mov	r5, r3
 800749c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800749e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	6023      	str	r3, [r4, #0]
  osThreadDef(ouveTask, ouvirTask, osPriorityNormal, 0, 128);
 80074a4:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <main+0x88>)
 80074a6:	1d3c      	adds	r4, r7, #4
 80074a8:	461d      	mov	r5, r3
 80074aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ae:	682b      	ldr	r3, [r5, #0]
 80074b0:	6023      	str	r3, [r4, #0]
  maquinaHandle = osThreadCreate(osThread(maquinaTask), NULL);
 80074b2:	f107 0318 	add.w	r3, r7, #24
 80074b6:	2100      	movs	r1, #0
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fd fb69 	bl	8004b90 <osThreadCreate>
 80074be:	4602      	mov	r2, r0
 80074c0:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <main+0x8c>)
 80074c2:	601a      	str	r2, [r3, #0]
   ouvirHandle = osThreadCreate(osThread(ouveTask), NULL);
 80074c4:	1d3b      	adds	r3, r7, #4
 80074c6:	2100      	movs	r1, #0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fd fb61 	bl	8004b90 <osThreadCreate>
 80074ce:	4602      	mov	r2, r0
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <main+0x90>)
 80074d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80074d4:	f7fd fb55 	bl	8004b82 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80074d8:	e7fe      	b.n	80074d8 <main+0x78>
 80074da:	bf00      	nop
 80074dc:	0800860c 	.word	0x0800860c
 80074e0:	20001484 	.word	0x20001484
 80074e4:	0800862c 	.word	0x0800862c
 80074e8:	0800864c 	.word	0x0800864c
 80074ec:	20001488 	.word	0x20001488
 80074f0:	2000148c 	.word	0x2000148c

080074f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b094      	sub	sp, #80	; 0x50
 80074f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80074fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80074fe:	2228      	movs	r2, #40	; 0x28
 8007500:	2100      	movs	r1, #0
 8007502:	4618      	mov	r0, r3
 8007504:	f000 ff5a 	bl	80083bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007508:	f107 0314 	add.w	r3, r7, #20
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	605a      	str	r2, [r3, #4]
 8007512:	609a      	str	r2, [r3, #8]
 8007514:	60da      	str	r2, [r3, #12]
 8007516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007518:	1d3b      	adds	r3, r7, #4
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	605a      	str	r2, [r3, #4]
 8007520:	609a      	str	r2, [r3, #8]
 8007522:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007524:	2301      	movs	r3, #1
 8007526:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800752c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800752e:	2300      	movs	r3, #0
 8007530:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007532:	2301      	movs	r3, #1
 8007534:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007536:	2302      	movs	r3, #2
 8007538:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800753a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800753e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8007540:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007544:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800754a:	4618      	mov	r0, r3
 800754c:	f7f9 ff66 	bl	800141c <HAL_RCC_OscConfig>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8007556:	f000 f913 	bl	8007780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800755a:	230f      	movs	r3, #15
 800755c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800755e:	2302      	movs	r3, #2
 8007560:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800756a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800756c:	2300      	movs	r3, #0
 800756e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007570:	f107 0314 	add.w	r3, r7, #20
 8007574:	2101      	movs	r1, #1
 8007576:	4618      	mov	r0, r3
 8007578:	f7fa f9d0 	bl	800191c <HAL_RCC_ClockConfig>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8007582:	f000 f8fd 	bl	8007780 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007586:	2310      	movs	r3, #16
 8007588:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800758a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800758e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007590:	1d3b      	adds	r3, r7, #4
 8007592:	4618      	mov	r0, r3
 8007594:	f7fa fb7a 	bl	8001c8c <HAL_RCCEx_PeriphCLKConfig>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800759e:	f000 f8ef 	bl	8007780 <Error_Handler>
  }
}
 80075a2:	bf00      	nop
 80075a4:	3750      	adds	r7, #80	; 0x50
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
	...

080075ac <maquina>:
  */
/* USER CODE END Header_StartDefaultTask */


void maquina(void const * argument)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]

	semafaroUsb = xSemaphoreCreateBinary();
 80075b4:	2203      	movs	r2, #3
 80075b6:	2100      	movs	r1, #0
 80075b8:	2001      	movs	r0, #1
 80075ba:	f7fd fc3b 	bl	8004e34 <xQueueGenericCreate>
 80075be:	4602      	mov	r2, r0
 80075c0:	4b02      	ldr	r3, [pc, #8]	; (80075cc <maquina+0x20>)
 80075c2:	601a      	str	r2, [r3, #0]
	while(1)
	{
		Rodar_Maquina();
 80075c4:	f7ff ff38 	bl	8007438 <Rodar_Maquina>
 80075c8:	e7fc      	b.n	80075c4 <maquina+0x18>
 80075ca:	bf00      	nop
 80075cc:	20001470 	.word	0x20001470

080075d0 <interfaceDuranteMovimento>:
	}
}


void interfaceDuranteMovimento()
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
	uint8_t resposta = -1;
 80075d6:	23ff      	movs	r3, #255	; 0xff
 80075d8:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[12];
	if ((SmState == STATE_MOVINGX) || (SmState == STATE_MOVINGY))
 80075da:	4b49      	ldr	r3, [pc, #292]	; (8007700 <interfaceDuranteMovimento+0x130>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d004      	beq.n	80075ec <interfaceDuranteMovimento+0x1c>
 80075e2:	4b47      	ldr	r3, [pc, #284]	; (8007700 <interfaceDuranteMovimento+0x130>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	f040 8084 	bne.w	80076f4 <interfaceDuranteMovimento+0x124>
	{
		 if( xSemaphoreTake( semafaroUsb ,10000) == pdTRUE )
 80075ec:	4b45      	ldr	r3, [pc, #276]	; (8007704 <interfaceDuranteMovimento+0x134>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f242 7110 	movw	r1, #10000	; 0x2710
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fd fdf9 	bl	80051ec <xQueueSemaphoreTake>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d179      	bne.n	80076f4 <interfaceDuranteMovimento+0x124>
			 {
			 	 	 if ((SmState != STATE_MOVINGX) && (SmState != STATE_MOVINGY))
 8007600:	4b3f      	ldr	r3, [pc, #252]	; (8007700 <interfaceDuranteMovimento+0x130>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d00b      	beq.n	8007620 <interfaceDuranteMovimento+0x50>
 8007608:	4b3d      	ldr	r3, [pc, #244]	; (8007700 <interfaceDuranteMovimento+0x130>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b03      	cmp	r3, #3
 800760e:	d007      	beq.n	8007620 <interfaceDuranteMovimento+0x50>
			 	 	 {
			 	 		xSemaphoreGive( semafaroUsb);
 8007610:	4b3c      	ldr	r3, [pc, #240]	; (8007704 <interfaceDuranteMovimento+0x134>)
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	2300      	movs	r3, #0
 8007616:	2200      	movs	r2, #0
 8007618:	2100      	movs	r1, #0
 800761a:	f7fd fc63 	bl	8004ee4 <xQueueGenericSend>
 800761e:	e06c      	b.n	80076fa <interfaceDuranteMovimento+0x12a>
			 	 		return;
			 	 	 }

			 		  resposta=-1;
 8007620:	23ff      	movs	r3, #255	; 0xff
 8007622:	73fb      	strb	r3, [r7, #15]
					  memcpy(temp,buffer_usb,9);
 8007624:	463b      	mov	r3, r7
 8007626:	2209      	movs	r2, #9
 8007628:	4937      	ldr	r1, [pc, #220]	; (8007708 <interfaceDuranteMovimento+0x138>)
 800762a:	4618      	mov	r0, r3
 800762c:	f000 febb 	bl	80083a6 <memcpy>

					  osDelay(2);
 8007630:	2002      	movs	r0, #2
 8007632:	f7fd fad4 	bl	8004bde <osDelay>
					  resposta = interpretarSerial(temp);
 8007636:	463b      	mov	r3, r7
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fc51 	bl	8006ee0 <interpretarSerial>
 800763e:	4603      	mov	r3, r0
 8007640:	73fb      	strb	r3, [r7, #15]

				     switch(resposta)
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	2b07      	cmp	r3, #7
 8007646:	d850      	bhi.n	80076ea <interfaceDuranteMovimento+0x11a>
 8007648:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <interfaceDuranteMovimento+0x80>)
 800764a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764e:	bf00      	nop
 8007650:	08007685 	.word	0x08007685
 8007654:	0800767b 	.word	0x0800767b
 8007658:	08007671 	.word	0x08007671
 800765c:	080076a9 	.word	0x080076a9
 8007660:	08007695 	.word	0x08007695
 8007664:	0800769f 	.word	0x0800769f
 8007668:	080076db 	.word	0x080076db
 800766c:	080076cb 	.word	0x080076cb
				   			  {
				   			  		case CMD_ID:
				   			  					CDC_Transmit_FS(respostas_moveX.identificar ,5);
 8007670:	2105      	movs	r1, #5
 8007672:	4826      	ldr	r0, [pc, #152]	; (800770c <interfaceDuranteMovimento+0x13c>)
 8007674:	f000 fa4e 	bl	8007b14 <CDC_Transmit_FS>
				   			  					break;
 8007678:	e03f      	b.n	80076fa <interfaceDuranteMovimento+0x12a>
				   			  		case CMD_CO:
				   			  					CDC_Transmit_FS(respostas_moveX.conectar ,5);
 800767a:	2105      	movs	r1, #5
 800767c:	4824      	ldr	r0, [pc, #144]	; (8007710 <interfaceDuranteMovimento+0x140>)
 800767e:	f000 fa49 	bl	8007b14 <CDC_Transmit_FS>
				   			  					break;
 8007682:	e03a      	b.n	80076fa <interfaceDuranteMovimento+0x12a>
				   			  		case CMD_DC:
				   			  					CDC_Transmit_FS(respostas_moveX.desconectar ,5);
 8007684:	2105      	movs	r1, #5
 8007686:	4823      	ldr	r0, [pc, #140]	; (8007714 <interfaceDuranteMovimento+0x144>)
 8007688:	f000 fa44 	bl	8007b14 <CDC_Transmit_FS>
				   								SmState = STATE_DISCONNECTED;
 800768c:	4b1c      	ldr	r3, [pc, #112]	; (8007700 <interfaceDuranteMovimento+0x130>)
 800768e:	2200      	movs	r2, #0
 8007690:	701a      	strb	r2, [r3, #0]
				   								break;
 8007692:	e032      	b.n	80076fa <interfaceDuranteMovimento+0x12a>
				   			 		case CMD_MOVX:
				   								CDC_Transmit_FS(respostas_moveX.moverX ,5);
 8007694:	2105      	movs	r1, #5
 8007696:	4820      	ldr	r0, [pc, #128]	; (8007718 <interfaceDuranteMovimento+0x148>)
 8007698:	f000 fa3c 	bl	8007b14 <CDC_Transmit_FS>
				   								break;
 800769c:	e02d      	b.n	80076fa <interfaceDuranteMovimento+0x12a>
				   			 		case CMD_MOVY:
				   								CDC_Transmit_FS(respostas_moveX.moverY ,5);
 800769e:	2105      	movs	r1, #5
 80076a0:	481e      	ldr	r0, [pc, #120]	; (800771c <interfaceDuranteMovimento+0x14c>)
 80076a2:	f000 fa37 	bl	8007b14 <CDC_Transmit_FS>
				   								break;
 80076a6:	e028      	b.n	80076fa <interfaceDuranteMovimento+0x12a>
				   			 		case CMD_STAT:
		   			 							if (SmState ==  STATE_MOVINGY)
 80076a8:	4b15      	ldr	r3, [pc, #84]	; (8007700 <interfaceDuranteMovimento+0x130>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d103      	bne.n	80076b8 <interfaceDuranteMovimento+0xe8>
		   			 							{
		   			 								CDC_Transmit_FS(respostas_moveY.status ,5);
 80076b0:	2105      	movs	r1, #5
 80076b2:	481b      	ldr	r0, [pc, #108]	; (8007720 <interfaceDuranteMovimento+0x150>)
 80076b4:	f000 fa2e 	bl	8007b14 <CDC_Transmit_FS>
		   			 							}
		   			 							if (SmState ==  STATE_MOVINGX)
 80076b8:	4b11      	ldr	r3, [pc, #68]	; (8007700 <interfaceDuranteMovimento+0x130>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d11b      	bne.n	80076f8 <interfaceDuranteMovimento+0x128>
		   			 							{
		   			 								CDC_Transmit_FS(respostas_moveX.status ,5);
 80076c0:	2105      	movs	r1, #5
 80076c2:	4818      	ldr	r0, [pc, #96]	; (8007724 <interfaceDuranteMovimento+0x154>)
 80076c4:	f000 fa26 	bl	8007b14 <CDC_Transmit_FS>
		   			 							}
				   								break;
 80076c8:	e016      	b.n	80076f8 <interfaceDuranteMovimento+0x128>
							 		case CMD_STEPQX:
												CDC_Transmit_FS(respostas_moveX.stepX ,5);
 80076ca:	2105      	movs	r1, #5
 80076cc:	4816      	ldr	r0, [pc, #88]	; (8007728 <interfaceDuranteMovimento+0x158>)
 80076ce:	f000 fa21 	bl	8007b14 <CDC_Transmit_FS>
												osDelay(2);
 80076d2:	2002      	movs	r0, #2
 80076d4:	f7fd fa83 	bl	8004bde <osDelay>
												break;
 80076d8:	e00f      	b.n	80076fa <interfaceDuranteMovimento+0x12a>
							 		case CMD_SSTEPX:
												CDC_Transmit_FS(respostas_moveX.set_stepX ,5);
 80076da:	2105      	movs	r1, #5
 80076dc:	4813      	ldr	r0, [pc, #76]	; (800772c <interfaceDuranteMovimento+0x15c>)
 80076de:	f000 fa19 	bl	8007b14 <CDC_Transmit_FS>
												osDelay(2);
 80076e2:	2002      	movs	r0, #2
 80076e4:	f7fd fa7b 	bl	8004bde <osDelay>
												break;
 80076e8:	e007      	b.n	80076fa <interfaceDuranteMovimento+0x12a>
				   			  		default:
				   			  					CDC_Transmit_FS(respostas_standby.wtf,4);
 80076ea:	2104      	movs	r1, #4
 80076ec:	4810      	ldr	r0, [pc, #64]	; (8007730 <interfaceDuranteMovimento+0x160>)
 80076ee:	f000 fa11 	bl	8007b14 <CDC_Transmit_FS>
 80076f2:	e002      	b.n	80076fa <interfaceDuranteMovimento+0x12a>
				   			}
			}
 80076f4:	bf00      	nop
 80076f6:	e000      	b.n	80076fa <interfaceDuranteMovimento+0x12a>
				   								break;
 80076f8:	bf00      	nop
	}
}
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	20001244 	.word	0x20001244
 8007704:	20001470 	.word	0x20001470
 8007708:	20001474 	.word	0x20001474
 800770c:	200001f0 	.word	0x200001f0
 8007710:	200001cc 	.word	0x200001cc
 8007714:	200001d4 	.word	0x200001d4
 8007718:	200001dc 	.word	0x200001dc
 800771c:	200001e2 	.word	0x200001e2
 8007720:	2000023c 	.word	0x2000023c
 8007724:	200001e8 	.word	0x200001e8
 8007728:	20000200 	.word	0x20000200
 800772c:	200001f8 	.word	0x200001f8
 8007730:	200001c4 	.word	0x200001c4

08007734 <ouvirTask>:

void ouvirTask(void const * argument)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		osDelay(1);
 800773c:	2001      	movs	r0, #1
 800773e:	f7fd fa4e 	bl	8004bde <osDelay>
		interfaceDuranteMovimento();
 8007742:	f7ff ff45 	bl	80075d0 <interfaceDuranteMovimento>
		osDelay(1);
 8007746:	e7f9      	b.n	800773c <ouvirTask+0x8>

08007748 <StartDefaultTask>:

  /* USER CODE END 5 */
}

void StartDefaultTask(void const * argument)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
    
    
                 
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8007750:	f000 f90c 	bl	800796c <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007754:	2001      	movs	r0, #1
 8007756:	f7fd fa42 	bl	8004bde <osDelay>
 800775a:	e7fb      	b.n	8007754 <StartDefaultTask+0xc>

0800775c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a04      	ldr	r2, [pc, #16]	; (800777c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d101      	bne.n	8007772 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800776e:	f7f8 fd05 	bl	800017c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007772:	bf00      	nop
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	40000800 	.word	0x40000800

08007780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007784:	bf00      	nop
 8007786:	46bd      	mov	sp, r7
 8007788:	bc80      	pop	{r7}
 800778a:	4770      	bx	lr

0800778c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007792:	4b18      	ldr	r3, [pc, #96]	; (80077f4 <HAL_MspInit+0x68>)
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	4a17      	ldr	r2, [pc, #92]	; (80077f4 <HAL_MspInit+0x68>)
 8007798:	f043 0301 	orr.w	r3, r3, #1
 800779c:	6193      	str	r3, [r2, #24]
 800779e:	4b15      	ldr	r3, [pc, #84]	; (80077f4 <HAL_MspInit+0x68>)
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	60bb      	str	r3, [r7, #8]
 80077a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077aa:	4b12      	ldr	r3, [pc, #72]	; (80077f4 <HAL_MspInit+0x68>)
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	4a11      	ldr	r2, [pc, #68]	; (80077f4 <HAL_MspInit+0x68>)
 80077b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b4:	61d3      	str	r3, [r2, #28]
 80077b6:	4b0f      	ldr	r3, [pc, #60]	; (80077f4 <HAL_MspInit+0x68>)
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077be:	607b      	str	r3, [r7, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80077c2:	2200      	movs	r2, #0
 80077c4:	210f      	movs	r1, #15
 80077c6:	f06f 0001 	mvn.w	r0, #1
 80077ca:	f7f8 fda8 	bl	800031e <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80077ce:	4b0a      	ldr	r3, [pc, #40]	; (80077f8 <HAL_MspInit+0x6c>)
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	4a04      	ldr	r2, [pc, #16]	; (80077f8 <HAL_MspInit+0x6c>)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	40021000 	.word	0x40021000
 80077f8:	40010000 	.word	0x40010000

080077fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08c      	sub	sp, #48	; 0x30
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800780c:	2200      	movs	r2, #0
 800780e:	6879      	ldr	r1, [r7, #4]
 8007810:	201e      	movs	r0, #30
 8007812:	f7f8 fd84 	bl	800031e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8007816:	201e      	movs	r0, #30
 8007818:	f7f8 fd9d 	bl	8000356 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800781c:	4b1f      	ldr	r3, [pc, #124]	; (800789c <HAL_InitTick+0xa0>)
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	4a1e      	ldr	r2, [pc, #120]	; (800789c <HAL_InitTick+0xa0>)
 8007822:	f043 0304 	orr.w	r3, r3, #4
 8007826:	61d3      	str	r3, [r2, #28]
 8007828:	4b1c      	ldr	r3, [pc, #112]	; (800789c <HAL_InitTick+0xa0>)
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	f003 0304 	and.w	r3, r3, #4
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007834:	f107 0210 	add.w	r2, r7, #16
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	4611      	mov	r1, r2
 800783e:	4618      	mov	r0, r3
 8007840:	f7fa f9d6 	bl	8001bf0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007844:	f7fa f9c0 	bl	8001bc8 <HAL_RCC_GetPCLK1Freq>
 8007848:	4603      	mov	r3, r0
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	4a13      	ldr	r2, [pc, #76]	; (80078a0 <HAL_InitTick+0xa4>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	0c9b      	lsrs	r3, r3, #18
 8007858:	3b01      	subs	r3, #1
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800785c:	4b11      	ldr	r3, [pc, #68]	; (80078a4 <HAL_InitTick+0xa8>)
 800785e:	4a12      	ldr	r2, [pc, #72]	; (80078a8 <HAL_InitTick+0xac>)
 8007860:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8007862:	4b10      	ldr	r3, [pc, #64]	; (80078a4 <HAL_InitTick+0xa8>)
 8007864:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007868:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800786a:	4a0e      	ldr	r2, [pc, #56]	; (80078a4 <HAL_InitTick+0xa8>)
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8007870:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <HAL_InitTick+0xa8>)
 8007872:	2200      	movs	r2, #0
 8007874:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007876:	4b0b      	ldr	r3, [pc, #44]	; (80078a4 <HAL_InitTick+0xa8>)
 8007878:	2200      	movs	r2, #0
 800787a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800787c:	4809      	ldr	r0, [pc, #36]	; (80078a4 <HAL_InitTick+0xa8>)
 800787e:	f7fa fabb 	bl	8001df8 <HAL_TIM_Base_Init>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d104      	bne.n	8007892 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8007888:	4806      	ldr	r0, [pc, #24]	; (80078a4 <HAL_InitTick+0xa8>)
 800788a:	f7fa fae9 	bl	8001e60 <HAL_TIM_Base_Start_IT>
 800788e:	4603      	mov	r3, r0
 8007890:	e000      	b.n	8007894 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
}
 8007894:	4618      	mov	r0, r3
 8007896:	3730      	adds	r7, #48	; 0x30
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	40021000 	.word	0x40021000
 80078a0:	431bde83 	.word	0x431bde83
 80078a4:	20001490 	.word	0x20001490
 80078a8:	40000800 	.word	0x40000800

080078ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80078ac:	b480      	push	{r7}
 80078ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80078b0:	bf00      	nop
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bc80      	pop	{r7}
 80078b6:	4770      	bx	lr

080078b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80078bc:	e7fe      	b.n	80078bc <HardFault_Handler+0x4>

080078be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80078be:	b480      	push	{r7}
 80078c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80078c2:	e7fe      	b.n	80078c2 <MemManage_Handler+0x4>

080078c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80078c8:	e7fe      	b.n	80078c8 <BusFault_Handler+0x4>

080078ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80078ca:	b480      	push	{r7}
 80078cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80078ce:	e7fe      	b.n	80078ce <UsageFault_Handler+0x4>

080078d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80078d4:	bf00      	nop
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bc80      	pop	{r7}
 80078da:	4770      	bx	lr

080078dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80078e0:	4802      	ldr	r0, [pc, #8]	; (80078ec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80078e2:	f7f8 ffc0 	bl	8000866 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80078e6:	bf00      	nop
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20001f64 	.word	0x20001f64

080078f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80078f4:	4802      	ldr	r0, [pc, #8]	; (8007900 <TIM4_IRQHandler+0x10>)
 80078f6:	f7fa fad6 	bl	8001ea6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80078fa:	bf00      	nop
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20001490 	.word	0x20001490

08007904 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007904:	b480      	push	{r7}
 8007906:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8007908:	4b15      	ldr	r3, [pc, #84]	; (8007960 <SystemInit+0x5c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a14      	ldr	r2, [pc, #80]	; (8007960 <SystemInit+0x5c>)
 800790e:	f043 0301 	orr.w	r3, r3, #1
 8007912:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8007914:	4b12      	ldr	r3, [pc, #72]	; (8007960 <SystemInit+0x5c>)
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	4911      	ldr	r1, [pc, #68]	; (8007960 <SystemInit+0x5c>)
 800791a:	4b12      	ldr	r3, [pc, #72]	; (8007964 <SystemInit+0x60>)
 800791c:	4013      	ands	r3, r2
 800791e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8007920:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <SystemInit+0x5c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a0e      	ldr	r2, [pc, #56]	; (8007960 <SystemInit+0x5c>)
 8007926:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800792a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800792e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007930:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <SystemInit+0x5c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a0a      	ldr	r2, [pc, #40]	; (8007960 <SystemInit+0x5c>)
 8007936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800793a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800793c:	4b08      	ldr	r3, [pc, #32]	; (8007960 <SystemInit+0x5c>)
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4a07      	ldr	r2, [pc, #28]	; (8007960 <SystemInit+0x5c>)
 8007942:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007946:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8007948:	4b05      	ldr	r3, [pc, #20]	; (8007960 <SystemInit+0x5c>)
 800794a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800794e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <SystemInit+0x64>)
 8007952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007956:	609a      	str	r2, [r3, #8]
#endif 
}
 8007958:	bf00      	nop
 800795a:	46bd      	mov	sp, r7
 800795c:	bc80      	pop	{r7}
 800795e:	4770      	bx	lr
 8007960:	40021000 	.word	0x40021000
 8007964:	f8ff0000 	.word	0xf8ff0000
 8007968:	e000ed00 	.word	0xe000ed00

0800796c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007970:	2200      	movs	r2, #0
 8007972:	4912      	ldr	r1, [pc, #72]	; (80079bc <MX_USB_DEVICE_Init+0x50>)
 8007974:	4812      	ldr	r0, [pc, #72]	; (80079c0 <MX_USB_DEVICE_Init+0x54>)
 8007976:	f7fc f860 	bl	8003a3a <USBD_Init>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007980:	f7ff fefe 	bl	8007780 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007984:	490f      	ldr	r1, [pc, #60]	; (80079c4 <MX_USB_DEVICE_Init+0x58>)
 8007986:	480e      	ldr	r0, [pc, #56]	; (80079c0 <MX_USB_DEVICE_Init+0x54>)
 8007988:	f7fc f882 	bl	8003a90 <USBD_RegisterClass>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007992:	f7ff fef5 	bl	8007780 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007996:	490c      	ldr	r1, [pc, #48]	; (80079c8 <MX_USB_DEVICE_Init+0x5c>)
 8007998:	4809      	ldr	r0, [pc, #36]	; (80079c0 <MX_USB_DEVICE_Init+0x54>)
 800799a:	f7fb ffb3 	bl	8003904 <USBD_CDC_RegisterInterface>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079a4:	f7ff feec 	bl	8007780 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079a8:	4805      	ldr	r0, [pc, #20]	; (80079c0 <MX_USB_DEVICE_Init+0x54>)
 80079aa:	f7fc f88a 	bl	8003ac2 <USBD_Start>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079b4:	f7ff fee4 	bl	8007780 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079b8:	bf00      	nop
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	200002b0 	.word	0x200002b0
 80079c0:	200014d0 	.word	0x200014d0
 80079c4:	20000014 	.word	0x20000014
 80079c8:	200002a0 	.word	0x200002a0

080079cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079d0:	2200      	movs	r2, #0
 80079d2:	4905      	ldr	r1, [pc, #20]	; (80079e8 <CDC_Init_FS+0x1c>)
 80079d4:	4805      	ldr	r0, [pc, #20]	; (80079ec <CDC_Init_FS+0x20>)
 80079d6:	f7fb ffab 	bl	8003930 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079da:	4905      	ldr	r1, [pc, #20]	; (80079f0 <CDC_Init_FS+0x24>)
 80079dc:	4803      	ldr	r0, [pc, #12]	; (80079ec <CDC_Init_FS+0x20>)
 80079de:	f7fb ffc0 	bl	8003962 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20001b7c 	.word	0x20001b7c
 80079ec:	200014d0 	.word	0x200014d0
 80079f0:	20001794 	.word	0x20001794

080079f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079f4:	b480      	push	{r7}
 80079f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bc80      	pop	{r7}
 8007a00:	4770      	bx	lr
	...

08007a04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	71fb      	strb	r3, [r7, #7]
 8007a10:	4613      	mov	r3, r2
 8007a12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	2b23      	cmp	r3, #35	; 0x23
 8007a18:	d84a      	bhi.n	8007ab0 <CDC_Control_FS+0xac>
 8007a1a:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <CDC_Control_FS+0x1c>)
 8007a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a20:	08007ab1 	.word	0x08007ab1
 8007a24:	08007ab1 	.word	0x08007ab1
 8007a28:	08007ab1 	.word	0x08007ab1
 8007a2c:	08007ab1 	.word	0x08007ab1
 8007a30:	08007ab1 	.word	0x08007ab1
 8007a34:	08007ab1 	.word	0x08007ab1
 8007a38:	08007ab1 	.word	0x08007ab1
 8007a3c:	08007ab1 	.word	0x08007ab1
 8007a40:	08007ab1 	.word	0x08007ab1
 8007a44:	08007ab1 	.word	0x08007ab1
 8007a48:	08007ab1 	.word	0x08007ab1
 8007a4c:	08007ab1 	.word	0x08007ab1
 8007a50:	08007ab1 	.word	0x08007ab1
 8007a54:	08007ab1 	.word	0x08007ab1
 8007a58:	08007ab1 	.word	0x08007ab1
 8007a5c:	08007ab1 	.word	0x08007ab1
 8007a60:	08007ab1 	.word	0x08007ab1
 8007a64:	08007ab1 	.word	0x08007ab1
 8007a68:	08007ab1 	.word	0x08007ab1
 8007a6c:	08007ab1 	.word	0x08007ab1
 8007a70:	08007ab1 	.word	0x08007ab1
 8007a74:	08007ab1 	.word	0x08007ab1
 8007a78:	08007ab1 	.word	0x08007ab1
 8007a7c:	08007ab1 	.word	0x08007ab1
 8007a80:	08007ab1 	.word	0x08007ab1
 8007a84:	08007ab1 	.word	0x08007ab1
 8007a88:	08007ab1 	.word	0x08007ab1
 8007a8c:	08007ab1 	.word	0x08007ab1
 8007a90:	08007ab1 	.word	0x08007ab1
 8007a94:	08007ab1 	.word	0x08007ab1
 8007a98:	08007ab1 	.word	0x08007ab1
 8007a9c:	08007ab1 	.word	0x08007ab1
 8007aa0:	08007ab1 	.word	0x08007ab1
 8007aa4:	08007ab1 	.word	0x08007ab1
 8007aa8:	08007ab1 	.word	0x08007ab1
 8007aac:	08007ab1 	.word	0x08007ab1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ab0:	bf00      	nop
  }

  return (USBD_OK);
 8007ab2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop

08007ac0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ac0:	b590      	push	{r4, r7, lr}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	480d      	ldr	r0, [pc, #52]	; (8007b04 <CDC_Receive_FS+0x44>)
 8007ace:	f7fb ff48 	bl	8003962 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ad2:	480c      	ldr	r0, [pc, #48]	; (8007b04 <CDC_Receive_FS+0x44>)
 8007ad4:	f7fb ff87 	bl	80039e6 <USBD_CDC_ReceivePacket>
  xSemaphoreGiveFromISR(semafaroUsb, &xHigherPriorityTaskWoken );
 8007ad8:	4b0b      	ldr	r3, [pc, #44]	; (8007b08 <CDC_Receive_FS+0x48>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	490b      	ldr	r1, [pc, #44]	; (8007b0c <CDC_Receive_FS+0x4c>)
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fd fafa 	bl	80050d8 <xQueueGiveFromISR>
  memcpy(buffer_usb, Buf, 16);
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <CDC_Receive_FS+0x50>)
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6814      	ldr	r4, [r2, #0]
 8007aea:	6850      	ldr	r0, [r2, #4]
 8007aec:	6891      	ldr	r1, [r2, #8]
 8007aee:	68d2      	ldr	r2, [r2, #12]
 8007af0:	601c      	str	r4, [r3, #0]
 8007af2:	6058      	str	r0, [r3, #4]
 8007af4:	6099      	str	r1, [r3, #8]
 8007af6:	60da      	str	r2, [r3, #12]
  return (USBD_OK);
 8007af8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd90      	pop	{r4, r7, pc}
 8007b02:	bf00      	nop
 8007b04:	200014d0 	.word	0x200014d0
 8007b08:	20001470 	.word	0x20001470
 8007b0c:	20001248 	.word	0x20001248
 8007b10:	20001474 	.word	0x20001474

08007b14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b24:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <CDC_Transmit_FS+0x48>)
 8007b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e00b      	b.n	8007b52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b3a:	887b      	ldrh	r3, [r7, #2]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	4806      	ldr	r0, [pc, #24]	; (8007b5c <CDC_Transmit_FS+0x48>)
 8007b42:	f7fb fef5 	bl	8003930 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b46:	4805      	ldr	r0, [pc, #20]	; (8007b5c <CDC_Transmit_FS+0x48>)
 8007b48:	f7fb ff1e 	bl	8003988 <USBD_CDC_TransmitPacket>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	200014d0 	.word	0x200014d0

08007b60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a0d      	ldr	r2, [pc, #52]	; (8007ba4 <HAL_PCD_MspInit+0x44>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d113      	bne.n	8007b9a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007b72:	4b0d      	ldr	r3, [pc, #52]	; (8007ba8 <HAL_PCD_MspInit+0x48>)
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	4a0c      	ldr	r2, [pc, #48]	; (8007ba8 <HAL_PCD_MspInit+0x48>)
 8007b78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b7c:	61d3      	str	r3, [r2, #28]
 8007b7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <HAL_PCD_MspInit+0x48>)
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2105      	movs	r1, #5
 8007b8e:	2014      	movs	r0, #20
 8007b90:	f7f8 fbc5 	bl	800031e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007b94:	2014      	movs	r0, #20
 8007b96:	f7f8 fbde 	bl	8000356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	40005c00 	.word	0x40005c00
 8007ba8:	40021000 	.word	0x40021000

08007bac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	f7fb ffc5 	bl	8003b52 <USBD_LL_SetupStage>
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	015b      	lsls	r3, r3, #5
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	f7fb fff8 	bl	8003be8 <USBD_LL_DataOutStage>
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007c12:	78fb      	ldrb	r3, [r7, #3]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	015b      	lsls	r3, r3, #5
 8007c18:	4413      	add	r3, r2
 8007c1a:	333c      	adds	r3, #60	; 0x3c
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	4619      	mov	r1, r3
 8007c22:	f7fc f852 	bl	8003cca <USBD_LL_DataInStage>
}
 8007c26:	bf00      	nop
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fc f962 	bl	8003f06 <USBD_LL_SOF>
}
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c52:	2301      	movs	r3, #1
 8007c54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d001      	beq.n	8007c62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c5e:	f7ff fd8f 	bl	8007780 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007c68:	7bfa      	ldrb	r2, [r7, #15]
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fc f912 	bl	8003e96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fc f8cb 	bl	8003e14 <USBD_LL_Reset>
}
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fc f90c 	bl	8003eb4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d005      	beq.n	8007cb0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ca4:	4b04      	ldr	r3, [pc, #16]	; (8007cb8 <HAL_PCD_SuspendCallback+0x30>)
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	4a03      	ldr	r2, [pc, #12]	; (8007cb8 <HAL_PCD_SuspendCallback+0x30>)
 8007caa:	f043 0306 	orr.w	r3, r3, #6
 8007cae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	e000ed00 	.word	0xe000ed00

08007cbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fc f906 	bl	8003edc <USBD_LL_Resume>
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007ce0:	4a28      	ldr	r2, [pc, #160]	; (8007d84 <USBD_LL_Init+0xac>)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a26      	ldr	r2, [pc, #152]	; (8007d84 <USBD_LL_Init+0xac>)
 8007cec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007cf0:	4b24      	ldr	r3, [pc, #144]	; (8007d84 <USBD_LL_Init+0xac>)
 8007cf2:	4a25      	ldr	r2, [pc, #148]	; (8007d88 <USBD_LL_Init+0xb0>)
 8007cf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007cf6:	4b23      	ldr	r3, [pc, #140]	; (8007d84 <USBD_LL_Init+0xac>)
 8007cf8:	2208      	movs	r2, #8
 8007cfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007cfc:	4b21      	ldr	r3, [pc, #132]	; (8007d84 <USBD_LL_Init+0xac>)
 8007cfe:	2202      	movs	r2, #2
 8007d00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007d02:	4b20      	ldr	r3, [pc, #128]	; (8007d84 <USBD_LL_Init+0xac>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007d08:	4b1e      	ldr	r3, [pc, #120]	; (8007d84 <USBD_LL_Init+0xac>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007d0e:	4b1d      	ldr	r3, [pc, #116]	; (8007d84 <USBD_LL_Init+0xac>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007d14:	481b      	ldr	r0, [pc, #108]	; (8007d84 <USBD_LL_Init+0xac>)
 8007d16:	f7f8 fc9f 	bl	8000658 <HAL_PCD_Init>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007d20:	f7ff fd2e 	bl	8007780 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d2a:	2318      	movs	r3, #24
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2100      	movs	r1, #0
 8007d30:	f7f9 fb38 	bl	80013a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d3a:	2358      	movs	r3, #88	; 0x58
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2180      	movs	r1, #128	; 0x80
 8007d40:	f7f9 fb30 	bl	80013a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d4a:	23c0      	movs	r3, #192	; 0xc0
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2181      	movs	r1, #129	; 0x81
 8007d50:	f7f9 fb28 	bl	80013a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2101      	movs	r1, #1
 8007d62:	f7f9 fb1f 	bl	80013a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d70:	2200      	movs	r2, #0
 8007d72:	2182      	movs	r1, #130	; 0x82
 8007d74:	f7f9 fb16 	bl	80013a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20001f64 	.word	0x20001f64
 8007d88:	40005c00 	.word	0x40005c00

08007d8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7f8 fd39 	bl	800081a <HAL_PCD_Start>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 f948 	bl	8008044 <USBD_Get_USB_Status>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	4608      	mov	r0, r1
 8007dcc:	4611      	mov	r1, r2
 8007dce:	461a      	mov	r2, r3
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	70fb      	strb	r3, [r7, #3]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	70bb      	strb	r3, [r7, #2]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dea:	78bb      	ldrb	r3, [r7, #2]
 8007dec:	883a      	ldrh	r2, [r7, #0]
 8007dee:	78f9      	ldrb	r1, [r7, #3]
 8007df0:	f7f8 fe6c 	bl	8000acc <HAL_PCD_EP_Open>
 8007df4:	4603      	mov	r3, r0
 8007df6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 f922 	bl	8008044 <USBD_Get_USB_Status>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	460b      	mov	r3, r1
 8007e18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e28:	78fa      	ldrb	r2, [r7, #3]
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7f8 fead 	bl	8000b8c <HAL_PCD_EP_Close>
 8007e32:	4603      	mov	r3, r0
 8007e34:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 f903 	bl	8008044 <USBD_Get_USB_Status>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e66:	78fa      	ldrb	r2, [r7, #3]
 8007e68:	4611      	mov	r1, r2
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7f8 ff57 	bl	8000d1e <HAL_PCD_EP_SetStall>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 f8e4 	bl	8008044 <USBD_Get_USB_Status>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ea4:	78fa      	ldrb	r2, [r7, #3]
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7f8 ff92 	bl	8000dd2 <HAL_PCD_EP_ClrStall>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 f8c5 	bl	8008044 <USBD_Get_USB_Status>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eda:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	da08      	bge.n	8007ef6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	015b      	lsls	r3, r3, #5
 8007eee:	4413      	add	r3, r2
 8007ef0:	332a      	adds	r3, #42	; 0x2a
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	e008      	b.n	8007f08 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007ef6:	78fb      	ldrb	r3, [r7, #3]
 8007ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	015b      	lsls	r3, r3, #5
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007f06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bc80      	pop	{r7}
 8007f10:	4770      	bx	lr

08007f12 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f2c:	78fa      	ldrb	r2, [r7, #3]
 8007f2e:	4611      	mov	r1, r2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7f8 fda6 	bl	8000a82 <HAL_PCD_SetAddress>
 8007f36:	4603      	mov	r3, r0
 8007f38:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 f881 	bl	8008044 <USBD_Get_USB_Status>
 8007f42:	4603      	mov	r3, r0
 8007f44:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	607a      	str	r2, [r7, #4]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	72fb      	strb	r3, [r7, #11]
 8007f60:	4613      	mov	r3, r2
 8007f62:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f72:	893b      	ldrh	r3, [r7, #8]
 8007f74:	7af9      	ldrb	r1, [r7, #11]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	f7f8 fe98 	bl	8000cac <HAL_PCD_EP_Transmit>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 f85e 	bl	8008044 <USBD_Get_USB_Status>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007f8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b086      	sub	sp, #24
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	60f8      	str	r0, [r7, #12]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	72fb      	strb	r3, [r7, #11]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fb8:	893b      	ldrh	r3, [r7, #8]
 8007fba:	7af9      	ldrb	r1, [r7, #11]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	f7f8 fe27 	bl	8000c10 <HAL_PCD_EP_Receive>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f83b 	bl	8008044 <USBD_Get_USB_Status>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8007fd2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fee:	78fa      	ldrb	r2, [r7, #3]
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7f8 fe46 	bl	8000c84 <HAL_PCD_EP_GetRxCount>
 8007ff8:	4603      	mov	r3, r0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800800c:	4b02      	ldr	r3, [pc, #8]	; (8008018 <USBD_static_malloc+0x14>)
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	bc80      	pop	{r7}
 8008016:	4770      	bx	lr
 8008018:	2000124c 	.word	0x2000124c

0800801c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]

}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	bc80      	pop	{r7}
 800802c:	4770      	bx	lr

0800802e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800803a:	bf00      	nop
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	bc80      	pop	{r7}
 8008042:	4770      	bx	lr

08008044 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	2b03      	cmp	r3, #3
 8008056:	d817      	bhi.n	8008088 <USBD_Get_USB_Status+0x44>
 8008058:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <USBD_Get_USB_Status+0x1c>)
 800805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805e:	bf00      	nop
 8008060:	08008071 	.word	0x08008071
 8008064:	08008077 	.word	0x08008077
 8008068:	0800807d 	.word	0x0800807d
 800806c:	08008083 	.word	0x08008083
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
    break;
 8008074:	e00b      	b.n	800808e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008076:	2302      	movs	r3, #2
 8008078:	73fb      	strb	r3, [r7, #15]
    break;
 800807a:	e008      	b.n	800808e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800807c:	2301      	movs	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]
    break;
 8008080:	e005      	b.n	800808e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008082:	2302      	movs	r3, #2
 8008084:	73fb      	strb	r3, [r7, #15]
    break;
 8008086:	e002      	b.n	800808e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008088:	2302      	movs	r3, #2
 800808a:	73fb      	strb	r3, [r7, #15]
    break;
 800808c:	bf00      	nop
  }
  return usb_status;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	bc80      	pop	{r7}
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop

0800809c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	6039      	str	r1, [r7, #0]
 80080a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2212      	movs	r2, #18
 80080ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080ae:	4b03      	ldr	r3, [pc, #12]	; (80080bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bc80      	pop	{r7}
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	200002cc 	.word	0x200002cc

080080c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	6039      	str	r1, [r7, #0]
 80080ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2204      	movs	r2, #4
 80080d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080d2:	4b03      	ldr	r3, [pc, #12]	; (80080e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	bc80      	pop	{r7}
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	200002e0 	.word	0x200002e0

080080e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	6039      	str	r1, [r7, #0]
 80080ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d105      	bne.n	8008102 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	4907      	ldr	r1, [pc, #28]	; (8008118 <USBD_FS_ProductStrDescriptor+0x34>)
 80080fa:	4808      	ldr	r0, [pc, #32]	; (800811c <USBD_FS_ProductStrDescriptor+0x38>)
 80080fc:	f7fc fc4d 	bl	800499a <USBD_GetString>
 8008100:	e004      	b.n	800810c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	4904      	ldr	r1, [pc, #16]	; (8008118 <USBD_FS_ProductStrDescriptor+0x34>)
 8008106:	4805      	ldr	r0, [pc, #20]	; (800811c <USBD_FS_ProductStrDescriptor+0x38>)
 8008108:	f7fc fc47 	bl	800499a <USBD_GetString>
  }
  return USBD_StrDesc;
 800810c:	4b02      	ldr	r3, [pc, #8]	; (8008118 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	200021d0 	.word	0x200021d0
 800811c:	08008660 	.word	0x08008660

08008120 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	6039      	str	r1, [r7, #0]
 800812a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	4904      	ldr	r1, [pc, #16]	; (8008140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008130:	4804      	ldr	r0, [pc, #16]	; (8008144 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008132:	f7fc fc32 	bl	800499a <USBD_GetString>
  return USBD_StrDesc;
 8008136:	4b02      	ldr	r3, [pc, #8]	; (8008140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008138:	4618      	mov	r0, r3
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	200021d0 	.word	0x200021d0
 8008144:	08008678 	.word	0x08008678

08008148 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	4603      	mov	r3, r0
 8008150:	6039      	str	r1, [r7, #0]
 8008152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	221a      	movs	r2, #26
 8008158:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800815a:	f000 f843 	bl	80081e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800815e:	4b02      	ldr	r3, [pc, #8]	; (8008168 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008160:	4618      	mov	r0, r3
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	200002e4 	.word	0x200002e4

0800816c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	4603      	mov	r3, r0
 8008174:	6039      	str	r1, [r7, #0]
 8008176:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008178:	79fb      	ldrb	r3, [r7, #7]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d105      	bne.n	800818a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	4907      	ldr	r1, [pc, #28]	; (80081a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008182:	4808      	ldr	r0, [pc, #32]	; (80081a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008184:	f7fc fc09 	bl	800499a <USBD_GetString>
 8008188:	e004      	b.n	8008194 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	4904      	ldr	r1, [pc, #16]	; (80081a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800818e:	4805      	ldr	r0, [pc, #20]	; (80081a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008190:	f7fc fc03 	bl	800499a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008194:	4b02      	ldr	r3, [pc, #8]	; (80081a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	200021d0 	.word	0x200021d0
 80081a4:	0800868c 	.word	0x0800868c

080081a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	6039      	str	r1, [r7, #0]
 80081b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081b4:	79fb      	ldrb	r3, [r7, #7]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d105      	bne.n	80081c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	4907      	ldr	r1, [pc, #28]	; (80081dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081be:	4808      	ldr	r0, [pc, #32]	; (80081e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081c0:	f7fc fbeb 	bl	800499a <USBD_GetString>
 80081c4:	e004      	b.n	80081d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	4904      	ldr	r1, [pc, #16]	; (80081dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081ca:	4805      	ldr	r0, [pc, #20]	; (80081e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081cc:	f7fc fbe5 	bl	800499a <USBD_GetString>
  }
  return USBD_StrDesc;
 80081d0:	4b02      	ldr	r3, [pc, #8]	; (80081dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	200021d0 	.word	0x200021d0
 80081e0:	08008698 	.word	0x08008698

080081e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081ea:	4b0f      	ldr	r3, [pc, #60]	; (8008228 <Get_SerialNum+0x44>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081f0:	4b0e      	ldr	r3, [pc, #56]	; (800822c <Get_SerialNum+0x48>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081f6:	4b0e      	ldr	r3, [pc, #56]	; (8008230 <Get_SerialNum+0x4c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4413      	add	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d009      	beq.n	800821e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800820a:	2208      	movs	r2, #8
 800820c:	4909      	ldr	r1, [pc, #36]	; (8008234 <Get_SerialNum+0x50>)
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 f814 	bl	800823c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008214:	2204      	movs	r2, #4
 8008216:	4908      	ldr	r1, [pc, #32]	; (8008238 <Get_SerialNum+0x54>)
 8008218:	68b8      	ldr	r0, [r7, #8]
 800821a:	f000 f80f 	bl	800823c <IntToUnicode>
  }
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	1ffff7e8 	.word	0x1ffff7e8
 800822c:	1ffff7ec 	.word	0x1ffff7ec
 8008230:	1ffff7f0 	.word	0x1ffff7f0
 8008234:	200002e6 	.word	0x200002e6
 8008238:	200002f6 	.word	0x200002f6

0800823c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	4613      	mov	r3, r2
 8008248:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800824e:	2300      	movs	r3, #0
 8008250:	75fb      	strb	r3, [r7, #23]
 8008252:	e027      	b.n	80082a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	0f1b      	lsrs	r3, r3, #28
 8008258:	2b09      	cmp	r3, #9
 800825a:	d80b      	bhi.n	8008274 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	0f1b      	lsrs	r3, r3, #28
 8008260:	b2da      	uxtb	r2, r3
 8008262:	7dfb      	ldrb	r3, [r7, #23]
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	4619      	mov	r1, r3
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	440b      	add	r3, r1
 800826c:	3230      	adds	r2, #48	; 0x30
 800826e:	b2d2      	uxtb	r2, r2
 8008270:	701a      	strb	r2, [r3, #0]
 8008272:	e00a      	b.n	800828a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	0f1b      	lsrs	r3, r3, #28
 8008278:	b2da      	uxtb	r2, r3
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	4619      	mov	r1, r3
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	440b      	add	r3, r1
 8008284:	3237      	adds	r2, #55	; 0x37
 8008286:	b2d2      	uxtb	r2, r2
 8008288:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	3301      	adds	r3, #1
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	4413      	add	r3, r2
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800829e:	7dfb      	ldrb	r3, [r7, #23]
 80082a0:	3301      	adds	r3, #1
 80082a2:	75fb      	strb	r3, [r7, #23]
 80082a4:	7dfa      	ldrb	r2, [r7, #23]
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d3d3      	bcc.n	8008254 <IntToUnicode+0x18>
  }
}
 80082ac:	bf00      	nop
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bc80      	pop	{r7}
 80082b4:	4770      	bx	lr
	...

080082b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80082b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80082ba:	e003      	b.n	80082c4 <LoopCopyDataInit>

080082bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80082bc:	4b0b      	ldr	r3, [pc, #44]	; (80082ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80082be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80082c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80082c2:	3104      	adds	r1, #4

080082c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80082c4:	480a      	ldr	r0, [pc, #40]	; (80082f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80082c6:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80082c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80082ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80082cc:	d3f6      	bcc.n	80082bc <CopyDataInit>
  ldr r2, =_sbss
 80082ce:	4a0a      	ldr	r2, [pc, #40]	; (80082f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80082d0:	e002      	b.n	80082d8 <LoopFillZerobss>

080082d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80082d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80082d4:	f842 3b04 	str.w	r3, [r2], #4

080082d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80082d8:	4b08      	ldr	r3, [pc, #32]	; (80082fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80082da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80082dc:	d3f9      	bcc.n	80082d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80082de:	f7ff fb11 	bl	8007904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80082e2:	f000 f813 	bl	800830c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80082e6:	f7ff f8bb 	bl	8007460 <main>
  bx lr
 80082ea:	4770      	bx	lr
  ldr r3, =_sidata
 80082ec:	08008844 	.word	0x08008844
  ldr r0, =_sdata
 80082f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80082f4:	200004d0 	.word	0x200004d0
  ldr r2, =_sbss
 80082f8:	200004d0 	.word	0x200004d0
  ldr r3, = _ebss
 80082fc:	200023d0 	.word	0x200023d0

08008300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008300:	e7fe      	b.n	8008300 <ADC1_2_IRQHandler>

08008302 <atoi>:
 8008302:	220a      	movs	r2, #10
 8008304:	2100      	movs	r1, #0
 8008306:	f000 b8dd 	b.w	80084c4 <strtol>
	...

0800830c <__libc_init_array>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	2500      	movs	r5, #0
 8008310:	4e0c      	ldr	r6, [pc, #48]	; (8008344 <__libc_init_array+0x38>)
 8008312:	4c0d      	ldr	r4, [pc, #52]	; (8008348 <__libc_init_array+0x3c>)
 8008314:	1ba4      	subs	r4, r4, r6
 8008316:	10a4      	asrs	r4, r4, #2
 8008318:	42a5      	cmp	r5, r4
 800831a:	d109      	bne.n	8008330 <__libc_init_array+0x24>
 800831c:	f000 f948 	bl	80085b0 <_init>
 8008320:	2500      	movs	r5, #0
 8008322:	4e0a      	ldr	r6, [pc, #40]	; (800834c <__libc_init_array+0x40>)
 8008324:	4c0a      	ldr	r4, [pc, #40]	; (8008350 <__libc_init_array+0x44>)
 8008326:	1ba4      	subs	r4, r4, r6
 8008328:	10a4      	asrs	r4, r4, #2
 800832a:	42a5      	cmp	r5, r4
 800832c:	d105      	bne.n	800833a <__libc_init_array+0x2e>
 800832e:	bd70      	pop	{r4, r5, r6, pc}
 8008330:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008334:	4798      	blx	r3
 8008336:	3501      	adds	r5, #1
 8008338:	e7ee      	b.n	8008318 <__libc_init_array+0xc>
 800833a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800833e:	4798      	blx	r3
 8008340:	3501      	adds	r5, #1
 8008342:	e7f2      	b.n	800832a <__libc_init_array+0x1e>
 8008344:	0800883c 	.word	0x0800883c
 8008348:	0800883c 	.word	0x0800883c
 800834c:	0800883c 	.word	0x0800883c
 8008350:	08008840 	.word	0x08008840

08008354 <__itoa>:
 8008354:	1e93      	subs	r3, r2, #2
 8008356:	2b22      	cmp	r3, #34	; 0x22
 8008358:	b510      	push	{r4, lr}
 800835a:	460c      	mov	r4, r1
 800835c:	d904      	bls.n	8008368 <__itoa+0x14>
 800835e:	2300      	movs	r3, #0
 8008360:	461c      	mov	r4, r3
 8008362:	700b      	strb	r3, [r1, #0]
 8008364:	4620      	mov	r0, r4
 8008366:	bd10      	pop	{r4, pc}
 8008368:	2a0a      	cmp	r2, #10
 800836a:	d109      	bne.n	8008380 <__itoa+0x2c>
 800836c:	2800      	cmp	r0, #0
 800836e:	da07      	bge.n	8008380 <__itoa+0x2c>
 8008370:	232d      	movs	r3, #45	; 0x2d
 8008372:	700b      	strb	r3, [r1, #0]
 8008374:	2101      	movs	r1, #1
 8008376:	4240      	negs	r0, r0
 8008378:	4421      	add	r1, r4
 800837a:	f000 f8b9 	bl	80084f0 <__utoa>
 800837e:	e7f1      	b.n	8008364 <__itoa+0x10>
 8008380:	2100      	movs	r1, #0
 8008382:	e7f9      	b.n	8008378 <__itoa+0x24>

08008384 <itoa>:
 8008384:	f7ff bfe6 	b.w	8008354 <__itoa>

08008388 <memcmp>:
 8008388:	b530      	push	{r4, r5, lr}
 800838a:	2400      	movs	r4, #0
 800838c:	42a2      	cmp	r2, r4
 800838e:	d101      	bne.n	8008394 <memcmp+0xc>
 8008390:	2000      	movs	r0, #0
 8008392:	e007      	b.n	80083a4 <memcmp+0x1c>
 8008394:	5d03      	ldrb	r3, [r0, r4]
 8008396:	3401      	adds	r4, #1
 8008398:	190d      	adds	r5, r1, r4
 800839a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800839e:	42ab      	cmp	r3, r5
 80083a0:	d0f4      	beq.n	800838c <memcmp+0x4>
 80083a2:	1b58      	subs	r0, r3, r5
 80083a4:	bd30      	pop	{r4, r5, pc}

080083a6 <memcpy>:
 80083a6:	b510      	push	{r4, lr}
 80083a8:	1e43      	subs	r3, r0, #1
 80083aa:	440a      	add	r2, r1
 80083ac:	4291      	cmp	r1, r2
 80083ae:	d100      	bne.n	80083b2 <memcpy+0xc>
 80083b0:	bd10      	pop	{r4, pc}
 80083b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ba:	e7f7      	b.n	80083ac <memcpy+0x6>

080083bc <memset>:
 80083bc:	4603      	mov	r3, r0
 80083be:	4402      	add	r2, r0
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d100      	bne.n	80083c6 <memset+0xa>
 80083c4:	4770      	bx	lr
 80083c6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ca:	e7f9      	b.n	80083c0 <memset+0x4>

080083cc <_strtol_l.isra.0>:
 80083cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d0:	4680      	mov	r8, r0
 80083d2:	4689      	mov	r9, r1
 80083d4:	4692      	mov	sl, r2
 80083d6:	461e      	mov	r6, r3
 80083d8:	460f      	mov	r7, r1
 80083da:	463d      	mov	r5, r7
 80083dc:	9808      	ldr	r0, [sp, #32]
 80083de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083e2:	f000 f8c3 	bl	800856c <__locale_ctype_ptr_l>
 80083e6:	4420      	add	r0, r4
 80083e8:	7843      	ldrb	r3, [r0, #1]
 80083ea:	f013 0308 	ands.w	r3, r3, #8
 80083ee:	d132      	bne.n	8008456 <_strtol_l.isra.0+0x8a>
 80083f0:	2c2d      	cmp	r4, #45	; 0x2d
 80083f2:	d132      	bne.n	800845a <_strtol_l.isra.0+0x8e>
 80083f4:	2201      	movs	r2, #1
 80083f6:	787c      	ldrb	r4, [r7, #1]
 80083f8:	1cbd      	adds	r5, r7, #2
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d05d      	beq.n	80084ba <_strtol_l.isra.0+0xee>
 80083fe:	2e10      	cmp	r6, #16
 8008400:	d109      	bne.n	8008416 <_strtol_l.isra.0+0x4a>
 8008402:	2c30      	cmp	r4, #48	; 0x30
 8008404:	d107      	bne.n	8008416 <_strtol_l.isra.0+0x4a>
 8008406:	782b      	ldrb	r3, [r5, #0]
 8008408:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800840c:	2b58      	cmp	r3, #88	; 0x58
 800840e:	d14f      	bne.n	80084b0 <_strtol_l.isra.0+0xe4>
 8008410:	2610      	movs	r6, #16
 8008412:	786c      	ldrb	r4, [r5, #1]
 8008414:	3502      	adds	r5, #2
 8008416:	2a00      	cmp	r2, #0
 8008418:	bf14      	ite	ne
 800841a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800841e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008422:	2700      	movs	r7, #0
 8008424:	fbb1 fcf6 	udiv	ip, r1, r6
 8008428:	4638      	mov	r0, r7
 800842a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800842e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008432:	2b09      	cmp	r3, #9
 8008434:	d817      	bhi.n	8008466 <_strtol_l.isra.0+0x9a>
 8008436:	461c      	mov	r4, r3
 8008438:	42a6      	cmp	r6, r4
 800843a:	dd23      	ble.n	8008484 <_strtol_l.isra.0+0xb8>
 800843c:	1c7b      	adds	r3, r7, #1
 800843e:	d007      	beq.n	8008450 <_strtol_l.isra.0+0x84>
 8008440:	4584      	cmp	ip, r0
 8008442:	d31c      	bcc.n	800847e <_strtol_l.isra.0+0xb2>
 8008444:	d101      	bne.n	800844a <_strtol_l.isra.0+0x7e>
 8008446:	45a6      	cmp	lr, r4
 8008448:	db19      	blt.n	800847e <_strtol_l.isra.0+0xb2>
 800844a:	2701      	movs	r7, #1
 800844c:	fb00 4006 	mla	r0, r0, r6, r4
 8008450:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008454:	e7eb      	b.n	800842e <_strtol_l.isra.0+0x62>
 8008456:	462f      	mov	r7, r5
 8008458:	e7bf      	b.n	80083da <_strtol_l.isra.0+0xe>
 800845a:	2c2b      	cmp	r4, #43	; 0x2b
 800845c:	bf04      	itt	eq
 800845e:	1cbd      	addeq	r5, r7, #2
 8008460:	787c      	ldrbeq	r4, [r7, #1]
 8008462:	461a      	mov	r2, r3
 8008464:	e7c9      	b.n	80083fa <_strtol_l.isra.0+0x2e>
 8008466:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800846a:	2b19      	cmp	r3, #25
 800846c:	d801      	bhi.n	8008472 <_strtol_l.isra.0+0xa6>
 800846e:	3c37      	subs	r4, #55	; 0x37
 8008470:	e7e2      	b.n	8008438 <_strtol_l.isra.0+0x6c>
 8008472:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008476:	2b19      	cmp	r3, #25
 8008478:	d804      	bhi.n	8008484 <_strtol_l.isra.0+0xb8>
 800847a:	3c57      	subs	r4, #87	; 0x57
 800847c:	e7dc      	b.n	8008438 <_strtol_l.isra.0+0x6c>
 800847e:	f04f 37ff 	mov.w	r7, #4294967295
 8008482:	e7e5      	b.n	8008450 <_strtol_l.isra.0+0x84>
 8008484:	1c7b      	adds	r3, r7, #1
 8008486:	d108      	bne.n	800849a <_strtol_l.isra.0+0xce>
 8008488:	2322      	movs	r3, #34	; 0x22
 800848a:	4608      	mov	r0, r1
 800848c:	f8c8 3000 	str.w	r3, [r8]
 8008490:	f1ba 0f00 	cmp.w	sl, #0
 8008494:	d107      	bne.n	80084a6 <_strtol_l.isra.0+0xda>
 8008496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849a:	b102      	cbz	r2, 800849e <_strtol_l.isra.0+0xd2>
 800849c:	4240      	negs	r0, r0
 800849e:	f1ba 0f00 	cmp.w	sl, #0
 80084a2:	d0f8      	beq.n	8008496 <_strtol_l.isra.0+0xca>
 80084a4:	b10f      	cbz	r7, 80084aa <_strtol_l.isra.0+0xde>
 80084a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80084aa:	f8ca 9000 	str.w	r9, [sl]
 80084ae:	e7f2      	b.n	8008496 <_strtol_l.isra.0+0xca>
 80084b0:	2430      	movs	r4, #48	; 0x30
 80084b2:	2e00      	cmp	r6, #0
 80084b4:	d1af      	bne.n	8008416 <_strtol_l.isra.0+0x4a>
 80084b6:	2608      	movs	r6, #8
 80084b8:	e7ad      	b.n	8008416 <_strtol_l.isra.0+0x4a>
 80084ba:	2c30      	cmp	r4, #48	; 0x30
 80084bc:	d0a3      	beq.n	8008406 <_strtol_l.isra.0+0x3a>
 80084be:	260a      	movs	r6, #10
 80084c0:	e7a9      	b.n	8008416 <_strtol_l.isra.0+0x4a>
	...

080084c4 <strtol>:
 80084c4:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <strtol+0x24>)
 80084c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084c8:	681c      	ldr	r4, [r3, #0]
 80084ca:	4d08      	ldr	r5, [pc, #32]	; (80084ec <strtol+0x28>)
 80084cc:	6a23      	ldr	r3, [r4, #32]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	bf08      	it	eq
 80084d2:	462b      	moveq	r3, r5
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	4613      	mov	r3, r2
 80084d8:	460a      	mov	r2, r1
 80084da:	4601      	mov	r1, r0
 80084dc:	4620      	mov	r0, r4
 80084de:	f7ff ff75 	bl	80083cc <_strtol_l.isra.0>
 80084e2:	b003      	add	sp, #12
 80084e4:	bd30      	pop	{r4, r5, pc}
 80084e6:	bf00      	nop
 80084e8:	20000300 	.word	0x20000300
 80084ec:	20000364 	.word	0x20000364

080084f0 <__utoa>:
 80084f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084f2:	b08b      	sub	sp, #44	; 0x2c
 80084f4:	4605      	mov	r5, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	466e      	mov	r6, sp
 80084fa:	4b1b      	ldr	r3, [pc, #108]	; (8008568 <__utoa+0x78>)
 80084fc:	f103 0c20 	add.w	ip, r3, #32
 8008500:	4637      	mov	r7, r6
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	6859      	ldr	r1, [r3, #4]
 8008506:	3308      	adds	r3, #8
 8008508:	c703      	stmia	r7!, {r0, r1}
 800850a:	4563      	cmp	r3, ip
 800850c:	463e      	mov	r6, r7
 800850e:	d1f7      	bne.n	8008500 <__utoa+0x10>
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	791b      	ldrb	r3, [r3, #4]
 8008514:	6038      	str	r0, [r7, #0]
 8008516:	713b      	strb	r3, [r7, #4]
 8008518:	1e93      	subs	r3, r2, #2
 800851a:	2b22      	cmp	r3, #34	; 0x22
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	d904      	bls.n	800852c <__utoa+0x3c>
 8008522:	7023      	strb	r3, [r4, #0]
 8008524:	461c      	mov	r4, r3
 8008526:	4620      	mov	r0, r4
 8008528:	b00b      	add	sp, #44	; 0x2c
 800852a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800852c:	1e66      	subs	r6, r4, #1
 800852e:	fbb5 f0f2 	udiv	r0, r5, r2
 8008532:	fb02 5510 	mls	r5, r2, r0, r5
 8008536:	af0a      	add	r7, sp, #40	; 0x28
 8008538:	443d      	add	r5, r7
 800853a:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800853e:	1c59      	adds	r1, r3, #1
 8008540:	f806 5f01 	strb.w	r5, [r6, #1]!
 8008544:	4605      	mov	r5, r0
 8008546:	b968      	cbnz	r0, 8008564 <__utoa+0x74>
 8008548:	4622      	mov	r2, r4
 800854a:	5460      	strb	r0, [r4, r1]
 800854c:	4423      	add	r3, r4
 800854e:	1b19      	subs	r1, r3, r4
 8008550:	1b10      	subs	r0, r2, r4
 8008552:	4281      	cmp	r1, r0
 8008554:	dde7      	ble.n	8008526 <__utoa+0x36>
 8008556:	7811      	ldrb	r1, [r2, #0]
 8008558:	7818      	ldrb	r0, [r3, #0]
 800855a:	f802 0b01 	strb.w	r0, [r2], #1
 800855e:	f803 1901 	strb.w	r1, [r3], #-1
 8008562:	e7f4      	b.n	800854e <__utoa+0x5e>
 8008564:	460b      	mov	r3, r1
 8008566:	e7e2      	b.n	800852e <__utoa+0x3e>
 8008568:	0800870c 	.word	0x0800870c

0800856c <__locale_ctype_ptr_l>:
 800856c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008570:	4770      	bx	lr

08008572 <__ascii_mbtowc>:
 8008572:	b082      	sub	sp, #8
 8008574:	b901      	cbnz	r1, 8008578 <__ascii_mbtowc+0x6>
 8008576:	a901      	add	r1, sp, #4
 8008578:	b142      	cbz	r2, 800858c <__ascii_mbtowc+0x1a>
 800857a:	b14b      	cbz	r3, 8008590 <__ascii_mbtowc+0x1e>
 800857c:	7813      	ldrb	r3, [r2, #0]
 800857e:	600b      	str	r3, [r1, #0]
 8008580:	7812      	ldrb	r2, [r2, #0]
 8008582:	1c10      	adds	r0, r2, #0
 8008584:	bf18      	it	ne
 8008586:	2001      	movne	r0, #1
 8008588:	b002      	add	sp, #8
 800858a:	4770      	bx	lr
 800858c:	4610      	mov	r0, r2
 800858e:	e7fb      	b.n	8008588 <__ascii_mbtowc+0x16>
 8008590:	f06f 0001 	mvn.w	r0, #1
 8008594:	e7f8      	b.n	8008588 <__ascii_mbtowc+0x16>

08008596 <__ascii_wctomb>:
 8008596:	b149      	cbz	r1, 80085ac <__ascii_wctomb+0x16>
 8008598:	2aff      	cmp	r2, #255	; 0xff
 800859a:	bf8b      	itete	hi
 800859c:	238a      	movhi	r3, #138	; 0x8a
 800859e:	700a      	strbls	r2, [r1, #0]
 80085a0:	6003      	strhi	r3, [r0, #0]
 80085a2:	2001      	movls	r0, #1
 80085a4:	bf88      	it	hi
 80085a6:	f04f 30ff 	movhi.w	r0, #4294967295
 80085aa:	4770      	bx	lr
 80085ac:	4608      	mov	r0, r1
 80085ae:	4770      	bx	lr

080085b0 <_init>:
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b2:	bf00      	nop
 80085b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b6:	bc08      	pop	{r3}
 80085b8:	469e      	mov	lr, r3
 80085ba:	4770      	bx	lr

080085bc <_fini>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	bf00      	nop
 80085c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c2:	bc08      	pop	{r3}
 80085c4:	469e      	mov	lr, r3
 80085c6:	4770      	bx	lr
